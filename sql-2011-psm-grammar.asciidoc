:toc: right

= Document


== 5 Lexical elements

This Clause modifies Clause 5, “Lexical elements”, in ISO/IEC 9075-2.



=== 5.1      <token> and <separator>

.Function

Specify lexical units (tokens and separators) that participate in SQL language.


Format
[[non-reserved-word]]
[subs="specialcharacters,macros"]
----
<non-reserved word> ::=
    !! All alternatives from ISO/IEC 9075-2

  | CONDITION_IDENTIFIER

  | EXIT

  | STACKED

  | UNDO
----

[[reserved-word]]
[subs="specialcharacters,macros"]
----
<reserved word> ::=
    !! All alternatives from ISO/IEC 9075-2

  | DO

  | ELSEIF

  | HANDLER

  | IF | ITERATE

  | LEAVE | LOOP

  | REPEAT | RESIGNAL

  | SIGNAL

  | UNTIL

  | WHILE
----

=== 5.2        Names and identifiers

.Function

Specify names.


Format
[[SQL-server-module-name]]
[subs="specialcharacters,macros"]
----
<SQL-server module name> ::=
  <<schema-qualified-name, <schema qualified name> >>
----

[[SQL-variable-name]]
[subs="specialcharacters,macros"]
----
<SQL variable name> ::=
  <<identifier, <identifier> >>
----

[[condition-name]]
[subs="specialcharacters,macros"]
----
<condition name> ::=
  <<identifier, <identifier> >>
----

== 6 Scalar expressions

=== 6.1      <value specification> and <target specification>

.Function

Specify one or more values, host parameters, SQL parameters, dynamic parameters, host variables, or SQL
variables.


Format
[[general-value-specification]]
[subs="specialcharacters,macros"]
----
<general value specification> ::=
    !! All alternatives from ISO/IEC 9075-2
  | <<SQL-variable-reference, <SQL variable reference> >>
----

[[simple-value-specification]]
[subs="specialcharacters,macros"]
----
<simple value specification> ::=
    !! All alternatives from ISO/IEC 9075-2
  | <<SQL-variable-reference, <SQL variable reference> >>
----

[[target-specification]]
[subs="specialcharacters,macros"]
----
<target specification> ::=
    !! All alternatives from ISO/IEC 9075-2
  | <<SQL-variable-reference, <SQL variable reference> >>
----

[[simple-target-specification]]
[subs="specialcharacters,macros"]
----
<simple target specification> ::=
    !! All alternatives from ISO/IEC 9075-2
  | <<SQL-variable-reference, <SQL variable reference> >>
----

[[target-array-reference]]
[subs="specialcharacters,macros"]
----
<target array reference> ::=
    !! All alternatives from ISO/IEC 9075-2
  | <<SQL-variable-reference, <SQL variable reference> >>
----

=== 6.4      <SQL variable reference>

.Function

Reference an SQL variable.


Format
[[SQL-variable-reference]]
[subs="specialcharacters,macros"]
----
<SQL variable reference> ::=
  <<basic-identifier-chain, <basic identifier chain> >>
----

=== 8.2        <sqlstate value>

.Function

Specify an SQLSTATE value.


Format
[[sqlstate-value]]
[subs="specialcharacters,macros"]
----
<sqlstate value> ::=
  SQLSTATE [ VALUE ] <<character-string-literal, <character string literal> >>
----

== 9 Schema definition and manipulation

=== 9.1      <schema definition>

.Function

Define a schema.


Format
[[schema-element]]
[subs="specialcharacters,macros"]
----
<schema element> ::=
    !! All alternatives from ISO/IEC 9075-2
  | <<SQL-server-module-definition, <SQL-server module definition> >>
----

=== 9.19 <trigger definition>

.Function

Defined triggered SQL-statements.


Format
[[triggered-SQL-statement]]
[subs="specialcharacters,macros"]
----
<triggered SQL statement> ::=
  <<SQL-procedure-statement, <SQL procedure statement> >>
     NOTE 12 — The preceding production defining <<triggered-SQL-statement, <triggered SQL statement> >> completely supersedes the definition in [ISO9075-2].
----

=== 9.21 <SQL-server module definition>

.Function

Define an SQL-server module.


Format
[[SQL-server-module-definition]]
[subs="specialcharacters,macros"]
----
<SQL-server module definition> ::=
  CREATE MODULE <<SQL-server-module-name, <SQL-server module name> >>
      [ <<SQL-server-module-character-set-specification, <SQL-server module character set specification> >> ]
      [ <<SQL-server-module-schema-clause, <SQL-server module schema clause> >> ]
      [ <<SQL-server-module-path-specification, <SQL-server module path specification> >> ]
      [ <<temporary-table-declaration, <temporary table declaration> >>... ]
      <<SQL-server-module-contents, <SQL-server module contents> >>...
      END MODULE
----

[[SQL-server-module-character-set-specification]]
[subs="specialcharacters,macros"]
----
<SQL-server module character set specification> ::=
  NAMES ARE <<character-set-specification, <character set specification> >>
----

[[SQL-server-module-schema-clause]]
[subs="specialcharacters,macros"]
----
<SQL-server module schema clause> ::=
  SCHEMA <<default-schema-name, <default schema name> >>
----

[[default-schema-name]]
[subs="specialcharacters,macros"]
----
<default schema name> ::=
  <<schema-name, <schema name> >>
----

[[SQL-server-module-path-specification]]
[subs="specialcharacters,macros"]
----
<SQL-server module path specification> ::=
  <<path-specification, <path specification> >>
----

[[SQL-server-module-contents]]
[subs="specialcharacters,macros"]
----
<SQL-server module contents> ::=
  <<SQL-invoked-routine, <SQL-invoked routine> >> <<semicolon, <semicolon> >>
----

=== 9.22 <drop module statement>

.Function

Destroy an SQL-server module.


Format
[[drop-module-statement]]
[subs="specialcharacters,macros"]
----
<drop module statement> ::=
  DROP MODULE <<SQL-server-module-name, <SQL-server module name> >> <<drop-behavior, <drop behavior> >>
----

=== 9.24 <SQL-invoked routine>

.Function

Define an SQL-invoked routine.


Format
[[SQL-invoked-routine]]
[subs="specialcharacters,macros"]
----
<SQL-invoked routine> ::=
    !! All alternatives from ISO/IEC 9075-2
  | <<module-routine, <module routine> >>
----

[[module-routine]]
[subs="specialcharacters,macros"]
----
<module routine> ::=
    <<module-procedure, <module procedure> >>
  | <<module-function, <module function> >>
----

[[module-procedure]]
[subs="specialcharacters,macros"]
----
<module procedure> ::=
  [ DECLARE ] <<SQL-invoked-procedure, <SQL-invoked procedure> >>
----

[[module-function]]
[subs="specialcharacters,macros"]
----
<module function> ::=
  [ DECLARE ] <<SQL-invoked-function, <SQL-invoked function> >>
----

=== 10.2 <privileges>

This Subclause modifies Subclause 12.3, “<privileges>”, in ISO/IEC 9075-2.


.Function

Specify privileges.


Format
[[object-name]]
[subs="specialcharacters,macros"]
----
<object name> ::=
    !! All alternatives from ISO/IEC 9075-2
  | MODULE <<SQL-server-module-name, <SQL-server module name> >>
----

=== 11.2 <SQL procedure statement>

.Function

Define all of the SQL-statements that are <SQL procedure statement>s.


Format
[[SQL-schema-definition-statement]]
[subs="specialcharacters,macros"]
----
<SQL schema definition statement> ::=
    !! All alternatives from ISO/IEC 9075-2
  | <<SQL-server-module-definition, <SQL-server module definition> >>
----

[[SQL-schema-manipulation-statement]]
[subs="specialcharacters,macros"]
----
<SQL schema manipulation statement> ::=
    !! All alternatives from ISO/IEC 9075-2
  | <<drop-module-statement, <drop module statement> >>
----

[[SQL-control-statement]]
[subs="specialcharacters,macros"]
----
<SQL control statement> ::=
    !! All alternatives from ISO/IEC 9075-2
  | <<assignment-statement, <assignment statement> >>
  | <<compound-statement, <compound statement> >>
  | <<case-statement, <case statement> >>
  | <<if-statement, <if statement> >>
  | <<iterate-statement, <iterate statement> >>
  | <<leave-statement, <leave statement> >>
  | <<loop-statement, <loop statement> >>
  | <<while-statement, <while statement> >>
  | <<repeat-statement, <repeat statement> >>
  | <<for-statement, <for statement> >>
----

[[SQL-diagnostics-statement]]
[subs="specialcharacters,macros"]
----
<SQL diagnostics statement> ::=
    !! All alternatives from ISO/IEC 9075-2
  | <<signal-statement, <signal statement> >>
  | <<resignal-statement, <resignal statement> >>
----

=== 14.1 <compound statement>

.Function

Specify a statement that groups other statements together.


Format
[[compound-statement]]
[subs="specialcharacters,macros"]
----
<compound statement> ::=
  [ <<beginning-label, <beginning label> >> <<colon, <colon> >> ] BEGIN [ [ NOT ] ATOMIC ]
      [ <<local-declaration-list, <local declaration list> >> ] [ <<local-cursor-declaration-list, <local cursor declaration list> >> ]
      [ <<local-handler-declaration-list, <local handler declaration list> >> ]
      [ <<SQL-statement-list, <SQL statement list> >> ]
      END [ <<ending-label, <ending label> >> ]
----

[[beginning-label]]
[subs="specialcharacters,macros"]
----
<beginning label> ::=
  <<statement-label, <statement label> >>
----

[[ending-label]]
[subs="specialcharacters,macros"]
----
<ending label> ::=
  <<statement-label, <statement label> >>
----

[[statement-label]]
[subs="specialcharacters,macros"]
----
<statement label> ::=
  <<identifier, <identifier> >>
----

[[local-declaration-list]]
[subs="specialcharacters,macros"]
----
<local declaration list> ::=
  <<terminated-local-declaration, <terminated local declaration> >>...
----

[[terminated-local-declaration]]
[subs="specialcharacters,macros"]
----
<terminated local declaration> ::=
  <<local-declaration, <local declaration> >> <<semicolon, <semicolon> >>
----

[[local-declaration]]
[subs="specialcharacters,macros"]
----
<local declaration> ::=
    <<SQL-variable-declaration, <SQL variable declaration> >>
  | <<condition-declaration, <condition declaration> >>
----

[[local-cursor-declaration-list]]
[subs="specialcharacters,macros"]
----
<local cursor declaration list> ::=
  <<terminated-local-cursor-declaration, <terminated local cursor declaration> >>...
----

[[terminated-local-cursor-declaration]]
[subs="specialcharacters,macros"]
----
<terminated local cursor declaration> ::=
  <<declare-cursor, <declare cursor> >> <<semicolon, <semicolon> >>
----

[[local-handler-declaration-list]]
[subs="specialcharacters,macros"]
----
<local handler declaration list> ::=
  <<terminated-local-handler-declaration, <terminated local handler declaration> >>...
----

[[terminated-local-handler-declaration]]
[subs="specialcharacters,macros"]
----
<terminated local handler declaration> ::=
  <<handler-declaration, <handler declaration> >> <<semicolon, <semicolon> >>
----

[[SQL-statement-list]]
[subs="specialcharacters,macros"]
----
<SQL statement list> ::=
  <<terminated-SQL-statement, <terminated SQL statement> >>...
----

[[terminated-SQL-statement]]
[subs="specialcharacters,macros"]
----
<terminated SQL statement> ::=
  <<SQL-procedure-statement, <SQL procedure statement> >> <<semicolon, <semicolon> >>
----

=== 14.2 <handler declaration>

.Function

Associate a handler with exception or completion conditions to be handled in a module or compound statement.


Format
[[handler-declaration]]
[subs="specialcharacters,macros"]
----
<handler declaration> ::=
  DECLARE <<handler-type, <handler type> >> HANDLER FOR <<condition-value-list, <condition value list> >> <<handler-action, <handler action> >>
----

[[handler-type]]
[subs="specialcharacters,macros"]
----
<handler type> ::=
    CONTINUE
  | EXIT
  | UNDO
----

[[handler-action]]
[subs="specialcharacters,macros"]
----
<handler action> ::=
  <<SQL-procedure-statement, <SQL procedure statement> >>
----

[[condition-value-list]]
[subs="specialcharacters,macros"]
----
<condition value list> ::=
  <<condition-value, <condition value> >> [ { <<comma, <comma> >> <<condition-value, <condition value> >> }... ]
----

[[condition-value]]
[subs="specialcharacters,macros"]
----
<condition value> ::=
    <<sqlstate-value, <sqlstate value> >>
  | <<condition-name, <condition name> >>
  | SQLEXCEPTION
  | SQLWARNING
  | NOT FOUND
----

=== 14.3 <condition declaration>

.Function

Declare a condition name and an optional corresponding SQLSTATE value.


Format
[[condition-declaration]]
[subs="specialcharacters,macros"]
----
<condition declaration> ::=
  DECLARE <<condition-name, <condition name> >> CONDITION [ FOR <<sqlstate-value, <sqlstate value> >> ]
----

=== 14.4 <SQL variable declaration>

.Function

Declare one or more variables.


Format
[[SQL-variable-declaration]]
[subs="specialcharacters,macros"]
----
<SQL variable declaration> ::=
  DECLARE <<SQL-variable-name-list, <SQL variable name list> >> <<data-type, <data type> >> [ <<default-clause, <default clause> >> ]
----

[[SQL-variable-name-list]]
[subs="specialcharacters,macros"]
----
<SQL variable name list> ::=
  <<SQL-variable-name, <SQL variable name> >> [ { <<comma, <comma> >> <<SQL-variable-name, <SQL variable name> >> }... ]
----

=== 14.5 <assignment statement>

.Function

Assign a value to an SQL variable, SQL parameter, host parameter, or host variable.


Format
[[assignment-statement]]
[subs="specialcharacters,macros"]
----
<assignment statement> ::=
    <<singleton-variable-assignment, <singleton variable assignment> >>
  | <<multiple-variable-assignment, <multiple variable assignment> >>
----

[[multiple-variable-assignment]]
[subs="specialcharacters,macros"]
----
<multiple variable assignment> ::=
  SET <<assignment-target-list, <assignment target list> >> <<equals-operator, <equals operator> >> <<assigned-row, <assigned row> >>
----

[[assignment-target-list]]
[subs="specialcharacters,macros"]
----
<assignment target list> ::=
  <<left-paren, <left paren> >> <<assignment-target, <assignment target> >> [ { <<comma, <comma> >> <<assignment-target, <assignment target> >> }... ] <<right-paren, <right paren> >>
----

[[singleton-variable-assignment]]
[subs="specialcharacters,macros"]
----
<singleton variable assignment> ::=
  SET <<assignment-target, <assignment target> >> <<equals-operator, <equals operator> >> <<assignment-source, <assignment source> >>
----

[[assignment-target]]
[subs="specialcharacters,macros"]
----
<assignment target> ::=
    <<target-specification, <target specification> >>
  | <<modified-field-reference, <modified field reference> >>
  | <<mutator-reference, <mutator reference> >>
----

[[assignment-source]]
[subs="specialcharacters,macros"]
----
<assignment source> ::=
    <<value-expression, <value expression> >>
  | <<contextually-typed-source, <contextually typed source> >>
----

[[contextually-typed-source]]
[subs="specialcharacters,macros"]
----
<contextually typed source> ::=
    <<implicitly-typed-value-specification, <implicitly typed value specification> >>
  | <<contextually-typed-row-value-expression, <contextually typed row value expression> >>
----

[[modified-field-reference]]
[subs="specialcharacters,macros"]
----
<modified field reference> ::=
  <<modified-field-target, <modified field target> >> <<period, <period> >> <<field-name, <field name> >>
----

[[modified-field-target]]
[subs="specialcharacters,macros"]
----
<modified field target> ::=
    <<target-specification, <target specification> >>
  | <<left-paren, <left paren> >> <<target-specification, <target specification> >> <<right-paren, <right paren> >>
  | <<modified-field-reference, <modified field reference> >>
----

[[mutator-reference]]
[subs="specialcharacters,macros"]
----
<mutator reference> ::=
  <<mutated-target-specification, <mutated target specification> >> <<period, <period> >> <<method-name, <method name> >>
----

[[mutated-target-specification]]
[subs="specialcharacters,macros"]
----
<mutated target specification> ::=
    <<target-specification, <target specification> >>
  | <<left-paren, <left paren> >> <<target-specification, <target specification> >> <<right-paren, <right paren> >>
  | <<mutator-reference, <mutator reference> >>
----

=== 14.6 <case statement>

.Function

Provide conditional execution based on truth of <search condition>s or on equality of operands.


Format
[[case-statement]]
[subs="specialcharacters,macros"]
----
<case statement> ::=
    <<simple-case-statement, <simple case statement> >>
  | <<searched-case-statement, <searched case statement> >>
----

[[simple-case-statement]]
[subs="specialcharacters,macros"]
----
<simple case statement> ::=
  CASE <<case-operand, <case operand> >>
      <<simple-case-statement-when-clause, <simple case statement when clause> >>...
      [ <<case-statement-else-clause, <case statement else clause> >> ]
      END CASE
----

[[searched-case-statement]]
[subs="specialcharacters,macros"]
----
<searched case statement> ::=
  CASE <<searched-case-statement-when-clause, <searched case statement when clause> >>...
      [ <<case-statement-else-clause, <case statement else clause> >> ]
      END CASE
----

[[simple-case-statement-when-clause]]
[subs="specialcharacters,macros"]
----
<simple case statement when clause> ::=
  WHEN <<when-operand-list, <when operand list> >>
      THEN <<SQL-statement-list, <SQL statement list> >>
----

[[searched-case-statement-when-clause]]
[subs="specialcharacters,macros"]
----
<searched case statement when clause> ::=
  WHEN <<search-condition, <search condition> >>
      THEN <<SQL-statement-list, <SQL statement list> >>
----

[[case-statement-else-clause]]
[subs="specialcharacters,macros"]
----
<case statement else clause> ::=
  ELSE <<SQL-statement-list, <SQL statement list> >>
----

=== 14.7 <if statement>

.Function

Provide conditional execution based on the truth value of a condition.


Format
[[if-statement]]
[subs="specialcharacters,macros"]
----
<if statement> ::=
  IF <<search-condition, <search condition> >>
      <<if-statement-then-clause, <if statement then clause> >>
      [ <<if-statement-elseif-clause, <if statement elseif clause> >>... ]
      [ <<if-statement-else-clause, <if statement else clause> >> ]
      END IF
----

[[if-statement-then-clause]]
[subs="specialcharacters,macros"]
----
<if statement then clause> ::=
  THEN <<SQL-statement-list, <SQL statement list> >>
----

[[if-statement-elseif-clause]]
[subs="specialcharacters,macros"]
----
<if statement elseif clause> ::=
  ELSEIF <<search-condition, <search condition> >> THEN <<SQL-statement-list, <SQL statement list> >>
----

[[if-statement-else-clause]]
[subs="specialcharacters,macros"]
----
<if statement else clause> ::=
  ELSE <<SQL-statement-list, <SQL statement list> >>
----

=== 14.8 <iterate statement>

.Function

Terminate the execution of an iteration of an iterated SQL-statement.


Format
[[iterate-statement]]
[subs="specialcharacters,macros"]
----
<iterate statement> ::=
  ITERATE <<statement-label, <statement label> >>
----

=== 14.9 <leave statement>

.Function

Continue execution by leaving a labeled statement.


Format
[[leave-statement]]
[subs="specialcharacters,macros"]
----
<leave statement> ::=
  LEAVE <<statement-label, <statement label> >>
----

=== 14.10 <loop statement>

.Function

Repeat the execution of a statement.


Format
[[loop-statement]]
[subs="specialcharacters,macros"]
----
<loop statement> ::=
  [ <<beginning-label, <beginning label> >> <<colon, <colon> >> ]
      LOOP
      <<SQL-statement-list, <SQL statement list> >>
      END LOOP [ <<ending-label, <ending label> >> ]
----

=== 14.11 <while statement>

.Function

While a specified condition is True, repeat the execution of a statement.


Format
[[while-statement]]
[subs="specialcharacters,macros"]
----
<while statement> ::=
  [ <<beginning-label, <beginning label> >> <<colon, <colon> >> ]
      WHILE <<search-condition, <search condition> >> DO
      <<SQL-statement-list, <SQL statement list> >>
      END WHILE [ <<ending-label, <ending label> >> ]
----

=== 14.12 <repeat statement>

.Function

Repeat the execution of a statement.


Format
[[repeat-statement]]
[subs="specialcharacters,macros"]
----
<repeat statement> ::=
  [ <<beginning-label, <beginning label> >> <<colon, <colon> >> ]
      REPEAT
      <<SQL-statement-list, <SQL statement list> >>
      UNTIL <<search-condition, <search condition> >>
      END REPEAT [ <<ending-label, <ending label> >> ]
----

=== 14.13 <for statement>

.Function

Execute a statement for each row of a table.


Format
[[for-statement]]
[subs="specialcharacters,macros"]
----
<for statement> ::=
  [ <<beginning-label, <beginning label> >> <<colon, <colon> >> ]
      FOR [ <<for-loop-variable-name, <for loop variable name> >> AS ]
      [ <<cursor-name, <cursor name> >> [ <<cursor-sensitivity, <cursor sensitivity> >> ] CURSOR FOR ]
      <<cursor-specification, <cursor specification> >>
      DO <<SQL-statement-list, <SQL statement list> >>
      END FOR [ <<ending-label, <ending label> >> ]
----

[[for-loop-variable-name]]
[subs="specialcharacters,macros"]
----
<for loop variable name> ::=
  <<identifier, <identifier> >>
----

== 17 Diagnostics management

=== 17.1 <get diagnostics statement>

.Function

Get exception or completion condition information from the diagnostics area.


Format
[[get-diagnostics-statement]]
[subs="specialcharacters,macros"]
----
<get diagnostics statement> ::=
  GET [ <<which-area, <which area> >> ] DIAGNOSTICS <<SQL-diagnostics-information, <SQL diagnostics information> >>
----

[[which-area]]
[subs="specialcharacters,macros"]
----
<which area> ::=
    CURRENT
  | STACKED
----

[[condition-information-item-name]]
[subs="specialcharacters,macros"]
----
<condition information item name> ::=
    !! All alternatives from [ISO9075-2]
  | CONDITION_IDENTIFIER
----

=== 17.2 <signal statement>

.Function

Signal an exception condition.


Format
[[signal-statement]]
[subs="specialcharacters,macros"]
----
<signal statement> ::=
  SIGNAL <<signal-value, <signal value> >> [ <<set-signal-information, <set signal information> >> ]
----

[[signal-value]]
[subs="specialcharacters,macros"]
----
<signal value> ::=
    <<condition-name, <condition name> >>
  | <<sqlstate-value, <sqlstate value> >>
----

[[set-signal-information]]
[subs="specialcharacters,macros"]
----
<set signal information> ::=
  SET <<signal-information-item-list, <signal information item list> >>
----

[[signal-information-item-list]]
[subs="specialcharacters,macros"]
----
<signal information item list> ::=
  <<signal-information-item, <signal information item> >> [ { <<comma, <comma> >> <<signal-information-item, <signal information item> >> }... ]
----

[[signal-information-item]]
[subs="specialcharacters,macros"]
----
<signal information item> ::=
  <<condition-information-item-name, <condition information item name> >> <<equals-operator, <equals operator> >> <<simple-value-specification, <simple value specification> >>
----

=== 17.3 <resignal statement>

.Function

Resignal an exception condition.


Format
[[resignal-statement]]
[subs="specialcharacters,macros"]
----
<resignal statement> ::=
  RESIGNAL [ <<signal-value, <signal value> >> ] [ <<set-signal-information, <set signal information> >> ]
----

