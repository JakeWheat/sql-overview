:toc: right

= Document

== 5 Lexical elements


=== 5.1 <SQL terminal character>

.Function

Define the terminal symbols of the SQL language and the elements of strings.
Format

[[SQL-terminal-character]]
[subs="specialcharacters,macros"]
----
<SQL terminal character> ::=
       <<SQL-language-character, <SQL language character> >>
----

[[SQL-language-character]]
[subs="specialcharacters,macros"]
----
<SQL language character> ::=
         <<simple-Latin-letter, <simple Latin letter> >>
       | <<digit, <digit> >>
       | <<SQL-special-character, <SQL special character> >>
----

[[simple-Latin-letter]]
[subs="specialcharacters,macros"]
----
<simple Latin letter> ::=
         <<simple-Latin-upper-case-letter, <simple Latin upper case letter> >>
       | <<simple-Latin-lower-case-letter, <simple Latin lower case letter> >>
----

[[simple-Latin-upper-case-letter]]
[subs="specialcharacters,macros"]
----
<simple Latin upper case letter> ::=
             A | B | C | D | E | F | G | H | I | J | K | L | M | N | O
       | P | Q | R | S | T | U | V | W | X | Y | Z
----

[[simple-Latin-lower-case-letter]]
[subs="specialcharacters,macros"]
----
<simple Latin lower case letter> ::=
             a | b | c | d | e | f | g | h | i | j | k | l | m | n | o
       | p | q | r | s | t | u | v | w | x | y | z
----

[[digit]]
[subs="specialcharacters,macros"]
----
<digit> ::=
       0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
----

[[SQL-special-character]]
[subs="specialcharacters,macros"]
----
<SQL special character> ::=
         <<space, <space> >>
       | <<double-quote, <double quote> >>
       | <<percent, <percent> >>
       | <<ampersand, <ampersand> >>
       | <<quote, <quote> >>
       | <<left-paren, <left paren> >>
       | <<right-paren, <right paren> >>
       | <<asterisk, <asterisk> >>
       | <<plus-sign, <plus sign> >>
       | <<comma, <comma> >>
       | <<minus-sign, <minus sign> >>
       | <<period, <period> >>
       | <<solidus, <solidus> >>
       | <<colon, <colon> >>
       | <<semicolon, <semicolon> >>
       | <<less-than-operator, <less than operator> >>
       | <<equals-operator, <equals operator> >>
       | <<greater-than-operator, <greater than operator> >>
       | <<question-mark, <question mark> >>
       | <<left-bracket, <left bracket> >>
       | <<right-bracket, <right bracket> >>
      |   <<circumflex, <circumflex> >>
      |   <<underscore, <underscore> >>
      |   <<vertical-bar, <vertical bar> >>
      |   <<left-brace, <left brace> >>
      |   <<right-brace, <right brace> >>
----

[[space]]
[subs="specialcharacters,macros"]
----
<space> ::= !! See the Syntax Rules
----

[[double-quote]]
[subs="specialcharacters,macros"]
----
<double quote> ::= "
----

[[percent]]
[subs="specialcharacters,macros"]
----
<percent> ::= %
----

[[ampersand]]
[subs="specialcharacters,macros"]
----
<ampersand> ::= &
----

[[quote]]
[subs="specialcharacters,macros"]
----
<quote> ::= â€™
----

[[left-paren]]
[subs="specialcharacters,macros"]
----
<left paren> ::= (
----

[[right-paren]]
[subs="specialcharacters,macros"]
----
<right paren> ::= )
----

[[asterisk]]
[subs="specialcharacters,macros"]
----
<asterisk> ::= *
----

[[plus-sign]]
[subs="specialcharacters,macros"]
----
<plus sign> ::= +
----

[[comma]]
[subs="specialcharacters,macros"]
----
<comma> ::= ,
----

[[minus-sign]]
[subs="specialcharacters,macros"]
----
<minus sign> ::= -
----

[[period]]
[subs="specialcharacters,macros"]
----
<period> ::= .
----

[[solidus]]
[subs="specialcharacters,macros"]
----
<solidus> ::= /
----

[[colon]]
[subs="specialcharacters,macros"]
----
<colon> ::= :
----

[[semicolon]]
[subs="specialcharacters,macros"]
----
<semicolon> ::= ;
----

[[less-than-operator]]
[subs="specialcharacters,macros"]
----
<less than operator> ::= <
----

[[equals-operator]]
[subs="specialcharacters,macros"]
----
<equals operator> ::= =
----

[[greater-than-operator]]
[subs="specialcharacters,macros"]
----
<greater than operator> ::= >
----

[[question-mark]]
[subs="specialcharacters,macros"]
----
<question mark> ::= ?
----

[[left-bracket-or-trigraph]]
[subs="specialcharacters,macros"]
----
<left bracket or trigraph> ::=
         <<left-bracket, <left bracket> >>
       | <<left-bracket-trigraph, <left bracket trigraph> >>
----

[[right-bracket-or-trigraph]]
[subs="specialcharacters,macros"]
----
<right bracket or trigraph> ::=
         <<right-bracket, <right bracket> >>
       | <<right-bracket-trigraph, <right bracket trigraph> >>
----

[[left-bracket]]
[subs="specialcharacters,macros"]
----
<left bracket> ::= [
----

[[left-bracket-trigraph]]
[subs="specialcharacters,macros"]
----
<left bracket trigraph> ::= ??(
----

[[right-bracket]]
[subs="specialcharacters,macros"]
----
<right bracket> ::= ]
----

[[right-bracket-trigraph]]
[subs="specialcharacters,macros"]
----
<right bracket trigraph> ::= ??)
----

[[circumflex]]
[subs="specialcharacters,macros"]
----
<circumflex> ::= ^
----

[[underscore]]
[subs="specialcharacters,macros"]
----
<underscore> ::= _
----

[[vertical-bar]]
[subs="specialcharacters,macros"]
----
<vertical bar> ::= |
----

[[left-brace]]
[subs="specialcharacters,macros"]
----
<left brace> ::={
----

[[right-brace]]
[subs="specialcharacters,macros"]
----
<right brace> ::=}
----

=== 5.2 <token> and <separator>

.Function

Specify lexical units (tokens and separators) that participate in SQL language.
Format

[[token]]
[subs="specialcharacters,macros"]
----
<token> ::=
         <<nondelimiter-token, <nondelimiter token> >>
       | <<delimiter-token, <delimiter token> >>
----

[[nondelimiter-token]]
[subs="specialcharacters,macros"]
----
<nondelimiter token> ::=
         <<regular-identifier, <regular identifier> >>
       | <<key-word, <key word> >>
       | <<unsigned-numeric-literal, <unsigned numeric literal> >>
       | <<national-character-string-literal, <national character string literal> >>
       | <<bit-string-literal, <bit string literal> >>
       | <<hex-string-literal, <hex string literal> >>
       | <<large-object-length-token, <large object length token> >>
       | <<multiplier, <multiplier> >>
----

[[regular-identifier]]
[subs="specialcharacters,macros"]
----
<regular identifier> ::= <identifier body>
----

[[identifier-body]]
[subs="specialcharacters,macros"]
----
<identifier body> ::=
       <<identifier-start, <identifier start> >> [ { <<underscore, <underscore> >> | <<identifier-part, <identifier part> >> }... ]
----

[[identifier-start]]
[subs="specialcharacters,macros"]
----
<identifier start> ::=
         <<initial-alphabetic-character, <initial alphabetic character> >>
       | <<ideographic-character, <ideographic character> >>
----

[[identifier-part]]
[subs="specialcharacters,macros"]
----
<identifier part> ::=
         <<alphabetic-character, <alphabetic character> >>
       | <<ideographic-character, <ideographic character> >>
       | <<decimal-digit-character, <decimal digit character> >>
       | <<identifier-combining-character, <identifier combining character> >>
       | <<underscore, <underscore> >>
       | <<alternate-underscore, <alternate underscore> >>
       | <<extender-character, <extender character> >>
       | <<identifier-ignorable-character, <identifier ignorable character> >>
       | <<connector-character, <connector character> >>
----

[[initial-alphabetic-character]]
[subs="specialcharacters,macros"]
----
<initial alphabetic character> ::= !! See the Syntax Rules
----

[[ideographic-character]]
[subs="specialcharacters,macros"]
----
<ideographic character> ::= !! See the Syntax Rules
----

[[alphabetic-character]]
[subs="specialcharacters,macros"]
----
<alphabetic character> ::= !! See the Syntax Rules
----

[[decimal-digit-character]]
[subs="specialcharacters,macros"]
----
<decimal digit character> ::= !! See the Syntax Rules
----

[[identifier-combining-character]]
[subs="specialcharacters,macros"]
----
<identifier combining character> ::= !! See the Syntax Rules
----

[[alternate-underscore]]
[subs="specialcharacters,macros"]
----
<alternate underscore> ::= !! See the Syntax Rules
----

[[extender-character]]
[subs="specialcharacters,macros"]
----
<extender character> ::= !! See the Syntax Rules
----

[[identifier-ignorable-character]]
[subs="specialcharacters,macros"]
----
<identifier ignorable character> ::= !! See the Syntax Rules
----

[[connector-character]]
[subs="specialcharacters,macros"]
----
<connector character> ::= !! See the Syntax Rules
----

[[large-object-length-token]]
[subs="specialcharacters,macros"]
----
<large object length token> ::=
       <<digit, <digit> >>...<<multiplier, <multiplier> >>
----

[[multiplier]]
[subs="specialcharacters,macros"]
----
<multiplier> ::=
         K
       | M
       | G
----

[[delimited-identifier]]
[subs="specialcharacters,macros"]
----
<delimited identifier> ::=
       <<double-quote, <double quote> >> <<delimited-identifier-body, <delimited identifier body> >> <<double-quote, <double quote> >>
----

[[delimited-identifier-body]]
[subs="specialcharacters,macros"]
----
<delimited identifier body> ::= <delimited identifier part>...
----

[[delimited-identifier-part]]
[subs="specialcharacters,macros"]
----
<delimited identifier part> ::=
         <<nondoublequote-character, <nondoublequote character> >>
       | <<doublequote-symbol, <doublequote symbol> >>
----

[[nondoublequote-character]]
[subs="specialcharacters,macros"]
----
<nondoublequote character> ::= !! See the Syntax Rules
----

[[doublequote-symbol]]
[subs="specialcharacters,macros"]
----
<doublequote symbol> ::= "" !! two consecutive double quote characters
----

[[delimiter-token]]
[subs="specialcharacters,macros"]
----
<delimiter token> ::=
         <<character-string-literal, <character string literal> >>
       | <<date-string, <date string> >>
       | <<time-string, <time string> >>
       | <<timestamp-string, <timestamp string> >>
       | <<interval-string, <interval string> >>
       | <<delimited-identifier, <delimited identifier> >>
       | <<SQL-special-character, <SQL special character> >>
       | <<not-equals-operator, <not equals operator> >>
       | <<greater-than-or-equals-operator, <greater than or equals operator> >>
       | <<less-than-or-equals-operator, <less than or equals operator> >>
       | <<concatenation-operator, <concatenation operator> >>
       | <<right-arrow, <right arrow> >>
       | <<left-bracket-trigraph, <left bracket trigraph> >>
       | <<right-bracket-trigraph, <right bracket trigraph> >>
       | <<double-colon, <double colon> >>
----

[[not-equals-operator]]
[subs="specialcharacters,macros"]
----
<not equals operator> ::= <>
----

[[greater-than-or-equals-operator]]
[subs="specialcharacters,macros"]
----
<greater than or equals operator> ::= >=
----

[[less-than-or-equals-operator]]
[subs="specialcharacters,macros"]
----
<less than or equals operator> ::= <=
----

[[concatenation-operator]]
[subs="specialcharacters,macros"]
----
<concatenation operator> ::= ||
----

[[right-arrow]]
[subs="specialcharacters,macros"]
----
<right arrow> ::= ->
----

[[double-colon]]
[subs="specialcharacters,macros"]
----
<double colon> ::= ::
----

[[separator]]
[subs="specialcharacters,macros"]
----
<separator> ::= { <comment> | <white space> }...
----

[[white-space]]
[subs="specialcharacters,macros"]
----
<white space> ::= !! See the Syntax Rules
----

[[comment]]
[subs="specialcharacters,macros"]
----
<comment> ::=
         <<simple-comment, <simple comment> >>
       | <<bracketed-comment, <bracketed comment> >>
----

[[simple-comment]]
[subs="specialcharacters,macros"]
----
<simple comment> ::=
       <<simple-comment-introducer, <simple comment introducer> >> [ <<comment-character, <comment character> >>... ] <<newline, <newline> >>
----

[[simple-comment-introducer]]
[subs="specialcharacters,macros"]
----
<simple comment introducer> ::= <minus sign><minus sign>[<minus sign>...]
----

[[bracketed-comment]]
[subs="specialcharacters,macros"]
----
<bracketed comment> ::=             !! (See the Syntax Rules)
       <<bracketed-comment-introducer, <bracketed comment introducer> >>
         <<bracketed-comment-contents, <bracketed comment contents> >>
       <<bracketed-comment-terminator, <bracketed comment terminator> >>
----

[[bracketed-comment-introducer]]
[subs="specialcharacters,macros"]
----
<bracketed comment introducer> ::= /*
----

[[bracketed-comment-terminator]]
[subs="specialcharacters,macros"]
----
<bracketed comment terminator> ::= */
----

[[bracketed-comment-contents]]
[subs="specialcharacters,macros"]
----
<bracketed comment contents> ::=
       [ { <<comment-character, <comment character> >> | <<separator, <separator> >> }... ]
----

[[comment-character]]
[subs="specialcharacters,macros"]
----
<comment character> ::=
         <<nonquote-character, <nonquote character> >>
       | <<quote, <quote> >>
----

[[newline]]
[subs="specialcharacters,macros"]
----
<newline> ::= !! See the Syntax Rules
----

[[key-word]]
[subs="specialcharacters,macros"]
----
<key word> ::=
         <<reserved-word, <reserved word> >>
       | <<non-reserved-word, <non-reserved word> >>
----

[[non-reserved-word]]
[subs="specialcharacters,macros"]
----
<non-reserved word> ::=
         ABS | ADA | ASENSITIVE | ASSIGNMENT | ASYMMETRIC | ATOMIC | AVG

      | BETWEEN | BIT_LENGTH | BITVAR

      |   C | CALLED | CARDINALITY | CATALOG_NAME | CHAIN | CHAR_LENGTH
      |   CHARACTER_LENGTH | CHARACTER_SET_CATALOG | CHARACTER_SET_NAME
      |   CHARACTER_SET_SCHEMA | CHECKED | CLASS_ORIGIN | COALESCE | COBOL
      |   COLLATION_CATALOG | COLLATION_NAME | COLLATION_SCHEMA | COLUMN_NAME
      |   COMMAND_FUNCTION | COMMAND_FUNCTION_CODE | COMMITTED | CONDITION_NUMBER
      |   CONNECTION_NAME | CONSTRAINT_CATALOG | CONSTRAINT_NAME | CONSTRAINT_SCHEMA
      |   CONTAINS | CONVERT | COUNT | CURSOR_NAME

      | DATETIME_INTERVAL_CODE | DATETIME_INTERVAL_PRECISION | DEFINED | DEFINER
      | DISPATCH | DYNAMIC_FUNCTION | DYNAMIC_FUNCTION_CODE

      | EXISTING | EXISTS | EXTRACT

      | FINAL | FORTRAN

      | G | GENERATED | GRANTED

      | HIERARCHY | HOLD

      | IMPLEMENTATION | INFIX | INSENSITIVE | INSTANCE | INSTANTIABLE | INVOKER

      | K | KEY_MEMBER | KEY_TYPE

      | LENGTH | LOWER

      | M | MAX | MIN | MESSAGE_LENGTH | MESSAGE_OCTET_LENGTH | MESSAGE_TEXT
      | METHOD | MOD | MORE | MUMPS

      | NAME | NULLABLE | NUMBER | NULLIF

      | OCTET_LENGTH | OPTIONS | OVERLAPS | OVERLAY | OVERRIDING

      | PASCAL | PARAMETER_MODE | PARAMETER_NAME | PARAMETER_ORDINAL_POSITION
      | PARAMETER_SPECIFIC_CATALOG | PARAMETER_SPECIFIC_NAME
      | PARAMETER_SPECIFIC_SCHEMA | PLI | POSITION

      | REPEATABLE | RETURNED_LENGTH | RETURNED_OCTET_LENGTH | RETURNED_SQLSTATE
      | ROUTINE_CATALOG | ROUTINE_NAME | ROUTINE_SCHEMA | ROW_COUNT

      | SCALE | SCHEMA_NAME | SECURITY | SELF | SENSITIVE | SERIALIZABLE | SERVER_NAME
      | SIMPLE | SOURCE | SPECIFIC_NAME | SIMILAR | SUBLIST | SUBSTRING | SUM | STYLE
      | SUBCLASS_ORIGIN | SYMMETRIC | SYSTEM

      | TABLE_NAME | TRANSACTIONS_COMMITTED | TRANSACTIONS_ROLLED_BACK
      | TRANSACTION_ACTIVE | TRANSFORM | TRANSFORMS | TRANSLATE | TRIGGER_CATALOG
      | TRIGGER_SCHEMA | TRIGGER_NAME | TRIM | TYPE

      | UNCOMMITTED | UNNAMED | UPPER | USER_DEFINED_TYPE_CATALOG
      | USER_DEFINED_TYPE_NAME | USER_DEFINED_TYPE_SCHEMA
----

[[reserved-word]]
[subs="specialcharacters,macros"]
----
<reserved word> ::=
         ABSOLUTE | ACTION | ADD | ADMIN | AFTER | AGGREGATE
       | ALIAS | ALL | ALLOCATE | ALTER | AND | ANY | ARE | ARRAY | AS | ASC
       | ASSERTION | AT | AUTHORIZATION

      | BEFORE | BEGIN | BINARY | BIT | BLOB | BOOLEAN | BOTH | BREADTH | BY

      |   CALL | CASCADE | CASCADED | CASE | CAST | CATALOG | CHAR | CHARACTER
      |   CHECK | CLASS | CLOB | CLOSE | COLLATE | COLLATION | COLUMN | COMMIT
      |   COMPLETION | CONNECT | CONNECTION | CONSTRAINT | CONSTRAINTS
      |   CONSTRUCTOR | CONTINUE | CORRESPONDING | CREATE | CROSS | CUBE | CURRENT
      |   CURRENT_DATE | CURRENT_PATH | CURRENT_ROLE | CURRENT_TIME | CURRENT_TIMESTAMP
      |   CURRENT_USER | CURSOR | CYCLE

      |   DATA | DATE | DAY | DEALLOCATE | DEC | DECIMAL | DECLARE | DEFAULT
      |   DEFERRABLE | DEFERRED | DELETE | DEPTH | DEREF | DESC | DESCRIBE | DESCRIPTOR
      |   DESTROY | DESTRUCTOR | DETERMINISTIC | DICTIONARY | DIAGNOSTICS | DISCONNECT
      |   DISTINCT | DOMAIN | DOUBLE | DROP | DYNAMIC

      | EACH | ELSE | END | END-EXEC | EQUALS | ESCAPE | EVERY | EXCEPT
      | EXCEPTION | EXEC | EXECUTE | EXTERNAL

      | FALSE | FETCH | FIRST | FLOAT | FOR | FOREIGN | FOUND | FROM | FREE | FULL
      | FUNCTION

      | GENERAL | GET | GLOBAL | GO | GOTO | GRANT | GROUP | GROUPING

      | HAVING | HOST | HOUR

      | IDENTITY | IGNORE | IMMEDIATE | IN | INDICATOR | INITIALIZE | INITIALLY
      | INNER | INOUT | INPUT | INSERT | INT | INTEGER | INTERSECT | INTERVAL
      | INTO | IS | ISOLATION | ITERATE

      | JOIN

      | KEY

      | LANGUAGE | LARGE | LAST | LATERAL | LEADING | LEFT | LESS | LEVEL | LIKE
      | LIMIT
      | LOCAL | LOCALTIME | LOCALTIMESTAMP | LOCATOR

        | MAP | MATCH | MINUTE | MODIFIES | MODIFY | MODULE | MONTH

        | NAMES | NATIONAL | NATURAL | NCHAR | NCLOB | NEW | NEXT | NO | NONE
        | NOT | NULL | NUMERIC

        | OBJECT | OF | OFF | OLD | ON | ONLY | OPEN | OPERATION | OPTION
        | OR | ORDER | ORDINALITY | OUT | OUTER | OUTPUT

        | PAD | PARAMETER | PARAMETERS | PARTIAL | PATH | POSTFIX | PRECISION | PREFIX
        | PREORDER | PREPARE | PRESERVE | PRIMARY
        | PRIOR | PRIVILEGES | PROCEDURE | PUBLIC

        | READ | READS | REAL | RECURSIVE | REF | REFERENCES | REFERENCING | RELATIVE
        | RESTRICT | RESULT | RETURN | RETURNS | REVOKE | RIGHT
        | ROLE | ROLLBACK | ROLLUP | ROUTINE | ROW | ROWS

        |   SAVEPOINT | SCHEMA | SCROLL | SCOPE | SEARCH | SECOND | SECTION | SELECT
        |   SEQUENCE | SESSION | SESSION_USER | SET | SETS | SIZE | SMALLINT | SOME| SPACE
        |   SPECIFIC | SPECIFICTYPE | SQL | SQLEXCEPTION | SQLSTATE | SQLWARNING | START
        |   STATE | STATEMENT | STATIC | STRUCTURE | SYSTEM_USER

        | TABLE | TEMPORARY | TERMINATE | THAN | THEN | TIME | TIMESTAMP
        | TIMEZONE_HOUR | TIMEZONE_MINUTE | TO | TRAILING | TRANSACTION | TRANSLATION
        | TREAT | TRIGGER | TRUE

        | UNDER | UNION | UNIQUE | UNKNOWN
        | UNNEST | UPDATE | USAGE | USER | USING

        | VALUE | VALUES | VARCHAR | VARIABLE | VARYING | VIEW

        | WHEN | WHENEVER | WHERE | WITH | WITHOUT | WORK | WRITE

        | YEAR

        | ZONE
----

=== 5.3 <literal>

.Function

Specify a non-null value.
Format

[[literal]]
[subs="specialcharacters,macros"]
----
<literal> ::=
         <<signed-numeric-literal, <signed numeric literal> >>
       | <<general-literal, <general literal> >>
----

[[unsigned-literal]]
[subs="specialcharacters,macros"]
----
<unsigned literal> ::=
         <<unsigned-numeric-literal, <unsigned numeric literal> >>
       | <<general-literal, <general literal> >>
----

[[general-literal]]
[subs="specialcharacters,macros"]
----
<general literal> ::=
         <<character-string-literal, <character string literal> >>
       | <<national-character-string-literal, <national character string literal> >>
       | <<bit-string-literal, <bit string literal> >>
       | <<hex-string-literal, <hex string literal> >>
       | <<binary-string-literal, <binary string literal> >>
       | <<datetime-literal, <datetime literal> >>
       | <<interval-literal, <interval literal> >>
       | <<boolean-literal, <boolean literal> >>
----

[[character-string-literal]]
[subs="specialcharacters,macros"]
----
<character string literal> ::=
       [ <<introducer, <introducer> >><<character-set-specification, <character set specification> >> ]
       <<quote, <quote> >> [ <<character-representation, <character representation> >>... ] <<quote, <quote> >>
         [ { <<separator, <separator> >> <<quote, <quote> >> [ <<character-representation, <character representation> >>... ] <<quote, <quote> >> }... ]
----

[[introducer]]
[subs="specialcharacters,macros"]
----
<introducer> ::= <underscore>
----

[[character-representation]]
[subs="specialcharacters,macros"]
----
<character representation> ::=
         <<nonquote-character, <nonquote character> >>
       | <<quote-symbol, <quote symbol> >>
----

[[nonquote-character]]
[subs="specialcharacters,macros"]
----
<nonquote character> ::= !! See the Syntax Rules.
----

[[quote-symbol]]
[subs="specialcharacters,macros"]
----
<quote symbol> ::= <quote><quote>
----

[[national-character-string-literal]]
[subs="specialcharacters,macros"]
----
<national character string literal> ::=
       N <<quote, <quote> >> [ <<character-representation, <character representation> >>... ] <<quote, <quote> >>
         [ { <<separator, <separator> >> <<quote, <quote> >> [ <<character-representation, <character representation> >>... ] <<quote, <quote> >> }... ]
----

[[bit-string-literal]]
[subs="specialcharacters,macros"]
----
<bit string literal> ::=
       B <<quote, <quote> >> [ <<bit, <bit> >>... ] <<quote, <quote> >>
         [ { <<separator, <separator> >> <<quote, <quote> >> [ <<bit, <bit> >>... ] <<quote, <quote> >> }... ]
----

[[hex-string-literal]]
[subs="specialcharacters,macros"]
----
<hex string literal> ::=
       X <<quote, <quote> >> [ <<hexit, <hexit> >>... ] <<quote, <quote> >>
         [ { <<separator, <separator> >> <<quote, <quote> >> [ <<hexit, <hexit> >>... ] <<quote, <quote> >> }... ]
----

[[binary-string-literal]]
[subs="specialcharacters,macros"]
----
<binary string literal> ::=
       X <<quote, <quote> >> [ { <<hexit, <hexit> >> <<hexit, <hexit> >> }... ] <<quote, <quote> >>
         [ { <<separator, <separator> >> <<quote, <quote> >> [ { <<hexit, <hexit> >> <<hexit, <hexit> >> }... ] <<quote, <quote> >> }... ]
----

[[bit]]
[subs="specialcharacters,macros"]
----
<bit> ::= 0 | 1
----

[[hexit]]
[subs="specialcharacters,macros"]
----
<hexit> ::= <digit> | A | B | C | D | E | F | a | b | c | d | e | f
----

[[signed-numeric-literal]]
[subs="specialcharacters,macros"]
----
<signed numeric literal> ::=
       [ <<sign, <sign> >> ] <<unsigned-numeric-literal, <unsigned numeric literal> >>
----

[[unsigned-numeric-literal]]
[subs="specialcharacters,macros"]
----
<unsigned numeric literal> ::=
         <<exact-numeric-literal, <exact numeric literal> >>
       | <<approximate-numeric-literal, <approximate numeric literal> >>
----

[[exact-numeric-literal]]
[subs="specialcharacters,macros"]
----
<exact numeric literal> ::=
         <<unsigned-integer, <unsigned integer> >> [ <<period, <period> >> [ <<unsigned-integer, <unsigned integer> >> ] ]
       | <<period, <period> >> <<unsigned-integer, <unsigned integer> >>
----

[[sign]]
[subs="specialcharacters,macros"]
----
<sign> ::= <plus sign> | <minus sign>
----

[[approximate-numeric-literal]]
[subs="specialcharacters,macros"]
----
<approximate numeric literal> ::= <mantissa> E <exponent>
----

[[mantissa]]
[subs="specialcharacters,macros"]
----
<mantissa> ::= <exact numeric literal>
----

[[exponent]]
[subs="specialcharacters,macros"]
----
<exponent> ::= <signed integer>
----

[[signed-integer]]
[subs="specialcharacters,macros"]
----
<signed integer> ::= [ <sign> ] <unsigned integer>
----

[[unsigned-integer]]
[subs="specialcharacters,macros"]
----
<unsigned integer> ::= <digit>...
----

[[datetime-literal]]
[subs="specialcharacters,macros"]
----
<datetime literal> ::=
         <<date-literal, <date literal> >>
       | <<time-literal, <time literal> >>
       | <<timestamp-literal, <timestamp literal> >>
----

[[date-literal]]
[subs="specialcharacters,macros"]
----
<date literal> ::=
       DATE <<date-string, <date string> >>
----

[[time-literal]]
[subs="specialcharacters,macros"]
----
<time literal> ::=
       TIME <<time-string, <time string> >>
----

[[timestamp-literal]]
[subs="specialcharacters,macros"]
----
<timestamp literal> ::=
       TIMESTAMP <<timestamp-string, <timestamp string> >>
----

[[date-string]]
[subs="specialcharacters,macros"]
----
<date string> ::=
       <<quote, <quote> >> <<unquoted-date-string, <unquoted date string> >> <<quote, <quote> >>
----

[[time-string]]
[subs="specialcharacters,macros"]
----
<time string> ::=
       <<quote, <quote> >> <<unquoted-time-string, <unquoted time string> >> <<quote, <quote> >>
----

[[timestamp-string]]
[subs="specialcharacters,macros"]
----
<timestamp string> ::=
       <<quote, <quote> >> <<unquoted-timestamp-string, <unquoted timestamp string> >> <<quote, <quote> >>
----

[[time-zone-interval]]
[subs="specialcharacters,macros"]
----
<time zone interval> ::=
       <<sign, <sign> >> <<hours-value, <hours value> >> <<colon, <colon> >> <<minutes-value, <minutes value> >>
----

[[date-value]]
[subs="specialcharacters,macros"]
----
<date value> ::=
       <<years-value, <years value> >> <<minus-sign, <minus sign> >> <<months-value, <months value> >> <<minus-sign, <minus sign> >> <<days-value, <days value> >>
----

[[time-value]]
[subs="specialcharacters,macros"]
----
<time value> ::=
       <<hours-value, <hours value> >> <<colon, <colon> >> <<minutes-value, <minutes value> >> <<colon, <colon> >> <<seconds-value, <seconds value> >>
----

[[interval-literal]]
[subs="specialcharacters,macros"]
----
<interval literal> ::=
      INTERVAL [ <<sign, <sign> >> ] <<interval-string, <interval string> >> <<interval-qualifier, <interval qualifier> >>
----

[[interval-string]]
[subs="specialcharacters,macros"]
----
<interval string> ::=
       <<quote, <quote> >> <<unquoted-interval-string, <unquoted interval string> >> <<quote, <quote> >>
----

[[unquoted-date-string]]
[subs="specialcharacters,macros"]
----
<unquoted date string> ::= <date value>
----

[[unquoted-time-string]]
[subs="specialcharacters,macros"]
----
<unquoted time string> ::=
       <<time-value, <time value> >> [ <<time-zone-interval, <time zone interval> >> ]
----

[[unquoted-timestamp-string]]
[subs="specialcharacters,macros"]
----
<unquoted timestamp string> ::=
       <<unquoted-date-string, <unquoted date string> >> <<space, <space> >> <<unquoted-time-string, <unquoted time string> >>
----

[[unquoted-interval-string]]
[subs="specialcharacters,macros"]
----
<unquoted interval string> ::=
       [ <<sign, <sign> >> ] { <<year-month-literal, <year-month literal> >> | <<day-time-literal, <day-time literal> >> }
----

[[year-month-literal]]
[subs="specialcharacters,macros"]
----
<year-month literal> ::=
         <<years-value, <years value> >>
       | [ <<years-value, <years value> >> <<minus-sign, <minus sign> >> ] <<months-value, <months value> >>
----

[[day-time-literal]]
[subs="specialcharacters,macros"]
----
<day-time literal> ::=
         <<day-time-interval, <day-time interval> >>
       | <<time-interval, <time interval> >>
----

[[day-time-interval]]
[subs="specialcharacters,macros"]
----
<day-time interval> ::=
       <<days-value, <days value> >>
         [ <<space, <space> >> <<hours-value, <hours value> >> [ <<colon, <colon> >> <<minutes-value, <minutes value> >> [ <<colon, <colon> >> <<seconds-value, <seconds value> >> ] ] ]
----


[[time-interval]]
[subs="specialcharacters,macros"]
----
<time interval> ::=
         <<hours-value, <hours value> >> [ <<colon, <colon> >> <<minutes-value, <minutes value> >> [ <<colon, <colon> >> <<seconds-value, <seconds value> >> ] ]
       | <<minutes-value, <minutes value> >> [ <<colon, <colon> >> <<seconds-value, <seconds value> >> ]
       | <<seconds-value, <seconds value> >>
----

[[years-value]]
[subs="specialcharacters,macros"]
----
<years value> ::= <datetime value>
----

[[months-value]]
[subs="specialcharacters,macros"]
----
<months value> ::= <datetime value>
----

[[days-value]]
[subs="specialcharacters,macros"]
----
<days value> ::= <datetime value>
----

[[hours-value]]
[subs="specialcharacters,macros"]
----
<hours value> ::= <datetime value>
----

[[minutes-value]]
[subs="specialcharacters,macros"]
----
<minutes value> ::= <datetime value>
----

[[seconds-value]]
[subs="specialcharacters,macros"]
----
<seconds value> ::=
         <<seconds-integer-value, <seconds integer value> >> [ <<period, <period> >> [ <<seconds-fraction, <seconds fraction> >> ] ]
----

[[seconds-integer-value]]
[subs="specialcharacters,macros"]
----
<seconds integer value> ::= <unsigned integer>
----

[[seconds-fraction]]
[subs="specialcharacters,macros"]
----
<seconds fraction> ::= <unsigned integer>
----

[[datetime-value]]
[subs="specialcharacters,macros"]
----
<datetime value> ::= <unsigned integer>
----

[[boolean-literal]]
[subs="specialcharacters,macros"]
----
<boolean literal> ::=
         TRUE
       | FALSE
       | UNKNOWN
----

=== 5.4 Names and identifiers

.Function

Specify names.
Format

[[identifier]]
[subs="specialcharacters,macros"]
----
<identifier> ::=
       <<actual-identifier, <actual identifier> >>
----

[[actual-identifier]]
[subs="specialcharacters,macros"]
----
<actual identifier> ::=
         <<regular-identifier, <regular identifier> >>
       | <<delimited-identifier, <delimited identifier> >>
----

[[SQL-language-identifier]]
[subs="specialcharacters,macros"]
----
<SQL language identifier> ::=
       <<SQL-language-identifier-start, <SQL language identifier start> >>
         [ { <<underscore, <underscore> >> | <<SQL-language-identifier-part, <SQL language identifier part> >> }... ]
----

[[SQL-language-identifier-start]]
[subs="specialcharacters,macros"]
----
<SQL language identifier start> ::= <simple Latin letter>
----

[[SQL-language-identifier-part]]
[subs="specialcharacters,macros"]
----
<SQL language identifier part> ::=
         <<simple-Latin-letter, <simple Latin letter> >>
       | <<digit, <digit> >>
----

[[authorization-identifier]]
[subs="specialcharacters,macros"]
----
<authorization identifier> ::=
         <<role-name, <role name> >>
       | <<user-identifier, <user identifier> >>
----

[[table-name]]
[subs="specialcharacters,macros"]
----
<table name> ::=
         <<local-or-schema-qualified-name, <local or schema qualified name> >>
----

[[domain-name]]
[subs="specialcharacters,macros"]
----
<domain name> ::= <schema qualified name>
----

[[schema-name]]
[subs="specialcharacters,macros"]
----
<schema name> ::=
       [ <<catalog-name, <catalog name> >> <<period, <period> >> ] <<unqualified-schema-name, <unqualified schema name> >>
----

[[unqualified-schema-name]]
[subs="specialcharacters,macros"]
----
<unqualified schema name> ::= <identifier>
----

[[catalog-name]]
[subs="specialcharacters,macros"]
----
<catalog name> ::= <identifier>
----

[[schema-qualified-name]]
[subs="specialcharacters,macros"]
----
<schema qualified name> ::=
       [ <<schema-name, <schema name> >> <<period, <period> >> ] <<qualified-identifier, <qualified identifier> >>
----

[[local-or-schema-qualified-name]]
[subs="specialcharacters,macros"]
----
<local or schema qualified name> ::=
       [ <<local-or-schema-qualifier, <local or schema qualifier> >> <<period, <period> >> ] <<qualified-identifier, <qualified identifier> >>
----

[[local-or-schema-qualifier]]
[subs="specialcharacters,macros"]
----
<local or schema qualifier> ::=
         <<schema-name, <schema name> >>
       | MODULE
----

[[qualified-identifier]]
[subs="specialcharacters,macros"]
----
<qualified identifier> ::= <identifier>
----

[[column-name]]
[subs="specialcharacters,macros"]
----
<column name> ::=
         <<identifier, <identifier> >>
----

[[correlation-name]]
[subs="specialcharacters,macros"]
----
<correlation name> ::= <identifier>
----

[[query-name]]
[subs="specialcharacters,macros"]
----
<query name> ::= <identifier>
----

[[SQL-client-module-name]]
[subs="specialcharacters,macros"]
----
<SQL-client module name> ::= <identifier>
----

[[procedure-name]]
[subs="specialcharacters,macros"]
----
<procedure name> ::= <identifier>
----

[[schema-qualified-routine-name]]
[subs="specialcharacters,macros"]
----
<schema qualified routine name> ::= <schema qualified name>
----

[[method-name]]
[subs="specialcharacters,macros"]
----
<method name> ::= <identifier>
----

[[specific-name]]
[subs="specialcharacters,macros"]
----
<specific name> ::= <schema qualified name>
----

[[cursor-name]]
[subs="specialcharacters,macros"]
----
<cursor name> ::= <local qualified name>
----

[[local-qualified-name]]
[subs="specialcharacters,macros"]
----
<local qualified name> ::=
       [ <<local-qualifier, <local qualifier> >> <<period, <period> >> ] <<qualified-identifier, <qualified identifier> >>
----

[[local-qualifier]]
[subs="specialcharacters,macros"]
----
<local qualifier> ::= MODULE
----

[[host-parameter-name]]
[subs="specialcharacters,macros"]
----
<host parameter name> ::= <colon> <identifier>
----

[[SQL-parameter-name]]
[subs="specialcharacters,macros"]
----
<SQL parameter name> ::= <identifier>
----

[[constraint-name]]
[subs="specialcharacters,macros"]
----
<constraint name> ::= <schema qualified name>
----

[[external-routine-name]]
[subs="specialcharacters,macros"]
----
<external routine name> ::=
         <<identifier, <identifier> >>
       | <<character-string-literal, <character string literal> >>
----

[[trigger-name]]
[subs="specialcharacters,macros"]
----
<trigger name> ::= <schema qualified name>
----

[[collation-name]]
[subs="specialcharacters,macros"]
----
<collation name> ::= <schema qualified name>
----

[[character-set-name]]
[subs="specialcharacters,macros"]
----
<character set name> ::= [ <schema name> <period> ] <SQL language identifier>
----

[[translation-name]]
[subs="specialcharacters,macros"]
----
<translation name> ::= <schema qualified name>
----

[[form-of-use-conversion-name]]
[subs="specialcharacters,macros"]
----
<form-of-use conversion name> ::= <schema qualified name>
----

[[user-defined-type-name]]
[subs="specialcharacters,macros"]
----
<user-defined type name> ::= <schema qualified type name>
----

[[schema-qualified-type-name]]
[subs="specialcharacters,macros"]
----
<schema qualified type name> ::=
       [ <<schema-name, <schema name> >> <<period, <period> >> ] <<qualified-identifier, <qualified identifier> >>
----

[[attribute-name]]
[subs="specialcharacters,macros"]
----
<attribute name> ::=
         <<identifier, <identifier> >>
----

[[field-name]]
[subs="specialcharacters,macros"]
----
<field name> ::= <identifier>
----

[[savepoint-name]]
[subs="specialcharacters,macros"]
----
<savepoint name> ::= <identifier>
----

[[role-name]]
[subs="specialcharacters,macros"]
----
<role name> ::= <identifier>
----

[[user-identifier]]
[subs="specialcharacters,macros"]
----
<user identifier> ::= <identifier>
----

[[connection-name]]
[subs="specialcharacters,macros"]
----
<connection name> ::= <simple value specification>
----

[[SQL-server-name]]
[subs="specialcharacters,macros"]
----
<SQL-server name> ::= <simple value specification>
----

[[connection-user-name]]
[subs="specialcharacters,macros"]
----
<connection user name> ::= <simple value specification>
----

== 6 Scalar expressions

=== 6.1 <data type>

.Function

Specify a data type.
Format

[[data-type]]
[subs="specialcharacters,macros"]
----
<data type> ::=
         <<predefined-type, <predefined type> >>
       | <<row-type, <row type> >>
       | <<user-defined-type, <user-defined type> >>
       | <<reference-type, <reference type> >>
       | <<collection-type, <collection type> >>
----

[[predefined-type]]
[subs="specialcharacters,macros"]
----
<predefined type> ::=
         <<character-string-type, <character string type> >> [ CHARACTER SET <<character-set-specification, <character set specification> >> ]
       | <<national-character-string-type, <national character string type> >>
       | <<binary-large-object-string-type, <binary large object string type> >>
       | <<bit-string-type, <bit string type> >>
       | <<numeric-type, <numeric type> >>
       | <<boolean-type, <boolean type> >>
       | <<datetime-type, <datetime type> >>
       | <<interval-type, <interval type> >>
----

[[character-string-type]]
[subs="specialcharacters,macros"]
----
<character string type> ::=
         CHARACTER [ <<left-paren, <left paren> >> <<length, <length> >> <<right-paren, <right paren> >> ]
       | CHAR [ <<left-paren, <left paren> >> <<length, <length> >> <<right-paren, <right paren> >> ]
       | CHARACTER VARYING <<left-paren, <left paren> >> <<length, <length> >> <<right-paren, <right paren> >>
       | CHAR VARYING <<left-paren, <left paren> >> <<length, <length> >> <<right-paren, <right paren> >>
       | VARCHAR <<left-paren, <left paren> >> <<length, <length> >> <<right-paren, <right paren> >>
       | CHARACTER LARGE OBJECT [ <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >> ]
       | CHAR LARGE OBJECT [ <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >> ]
       | CLOB [ <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >> ]
----

[[national-character-string-type]]
[subs="specialcharacters,macros"]
----
<national character string type> ::=
         NATIONAL CHARACTER [ <<left-paren, <left paren> >> <<length, <length> >> <<right-paren, <right paren> >> ]
       | NATIONAL CHAR [ <<left-paren, <left paren> >> <<length, <length> >> <<right-paren, <right paren> >> ]
       | NCHAR [ <<left-paren, <left paren> >> <<length, <length> >> <<right-paren, <right paren> >> ]
       | NATIONAL CHARACTER VARYING <<left-paren, <left paren> >> <<length, <length> >> <<right-paren, <right paren> >>
       | NATIONAL CHAR VARYING <<left-paren, <left paren> >> <<length, <length> >> <<right-paren, <right paren> >>
       | NCHAR VARYING <<left-paren, <left paren> >> <<length, <length> >> <<right-paren, <right paren> >>
       | NATIONAL CHARACTER LARGE OBJECT [ <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >> ]

       | NCHAR LARGE OBJECT [ <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >> ]
       | NCLOB [ <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >> ]
----

[[binary-large-object-string-type]]
[subs="specialcharacters,macros"]
----
<binary large object string type> ::=
         BINARY LARGE OBJECT [ <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >> ]
       | BLOB [ <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >> ]
----

[[bit-string-type]]
[subs="specialcharacters,macros"]
----
<bit string type> ::=
         BIT [ <<left-paren, <left paren> >> <<length, <length> >> <<right-paren, <right paren> >> ]
      | BIT VARYING <<left-paren, <left paren> >> <<length, <length> >> <<right-paren, <right paren> >>
----

[[numeric-type]]
[subs="specialcharacters,macros"]
----
<numeric type> ::=
         <<exact-numeric-type, <exact numeric type> >>
       | <<approximate-numeric-type, <approximate numeric type> >>
----

[[exact-numeric-type]]
[subs="specialcharacters,macros"]
----
<exact numeric type> ::=
         NUMERIC [ <<left-paren, <left paren> >> <<precision, <precision> >> [ <<comma, <comma> >> <<scale, <scale> >> ] <<right-paren, <right paren> >> ]
       | DECIMAL [ <<left-paren, <left paren> >> <<precision, <precision> >> [ <<comma, <comma> >> <<scale, <scale> >> ] <<right-paren, <right paren> >> ]
       | DEC [ <<left-paren, <left paren> >> <<precision, <precision> >> [ <<comma, <comma> >> <<scale, <scale> >> ] <<right-paren, <right paren> >> ]
       | INTEGER
       | INT
       | SMALLINT
----

[[approximate-numeric-type]]
[subs="specialcharacters,macros"]
----
<approximate numeric type> ::=
         FLOAT [ <<left-paren, <left paren> >> <<precision, <precision> >> <<right-paren, <right paren> >> ]
       | REAL
       | DOUBLE PRECISION
----

[[length]]
[subs="specialcharacters,macros"]
----
<length> ::= <unsigned integer>
----

[[large-object-length]]
[subs="specialcharacters,macros"]
----
<large object length> ::=
         <<unsigned-integer, <unsigned integer> >> [ <<multiplier, <multiplier> >> ]
       | <<large-object-length-token, <large object length token> >>
----

[[precision]]
[subs="specialcharacters,macros"]
----
<precision> ::= <unsigned integer>
----

[[scale]]
[subs="specialcharacters,macros"]
----
<scale> ::= <unsigned integer>
----

[[boolean-type]]
[subs="specialcharacters,macros"]
----
<boolean type> ::= BOOLEAN
----

[[datetime-type]]
[subs="specialcharacters,macros"]
----
<datetime type> ::=
         DATE
       | TIME [ <<left-paren, <left paren> >> <<time-precision, <time precision> >> <<right-paren, <right paren> >> ]
           [ <<with-or-without-time-zone, <with or without time zone> >> ]
       | TIMESTAMP [ <<left-paren, <left paren> >> <<timestamp-precision, <timestamp precision> >> <<right-paren, <right paren> >> ]
           [ <<with-or-without-time-zone, <with or without time zone> >> ]
----

[[with-or-without-time-zone]]
[subs="specialcharacters,macros"]
----
<with or without time zone> ::=
         WITH TIME ZONE
       | WITHOUT TIME ZONE
----

[[time-precision]]
[subs="specialcharacters,macros"]
----
<time precision> ::= <time fractional seconds precision>
----

[[timestamp-precision]]
[subs="specialcharacters,macros"]
----
<timestamp precision> ::= <time fractional seconds precision>
----

[[time-fractional-seconds-precision]]
[subs="specialcharacters,macros"]
----
<time fractional seconds precision> ::= <unsigned integer>
----

[[interval-type]]
[subs="specialcharacters,macros"]
----
<interval type> ::= INTERVAL <interval qualifier>
----

[[row-type]]
[subs="specialcharacters,macros"]
----
<row type> ::=
       ROW <<row-type-body, <row type body> >>
----

[[row-type-body]]
[subs="specialcharacters,macros"]
----
<row type body> ::=
       <<left-paren, <left paren> >>
         <<field-definition, <field definition> >> [ { <<comma, <comma> >> <<field-definition, <field definition> >> }... ]
       <<right-paren, <right paren> >>
----

[[reference-type]]
[subs="specialcharacters,macros"]
----
<reference type> ::=
       REF <<left-paren, <left paren> >> <<referenced-type, <referenced type> >> <<right-paren, <right paren> >>
       [ <<scope-clause, <scope clause> >> ]
----

[[scope-clause]]
[subs="specialcharacters,macros"]
----
<scope clause> ::=
       SCOPE <<table-name, <table name> >>
----

[[referenced-type]]
[subs="specialcharacters,macros"]
----
<referenced type> ::= <user-defined type>
----

[[user-defined-type]]
[subs="specialcharacters,macros"]
----
<user-defined type> ::= <user-defined type name>
----

[[collection-type]]
[subs="specialcharacters,macros"]
----
<collection type> ::=
         <<data-type, <data type> >> <<array-specification, <array specification> >>
----

[[array-specification]]
[subs="specialcharacters,macros"]
----
<array specification> ::=
       <<collection-type-constructor, <collection type constructor> >>
           <<left-bracket-or-trigraph, <left bracket or trigraph> >> <<unsigned-integer, <unsigned integer> >> <<right-bracket-or-trigraph, <right bracket or trigraph> >>
----

[[collection-type-constructor]]
[subs="specialcharacters,macros"]
----
<collection type constructor> ::=
         ARRAY
----

=== 6.2 <field definition>

.Function

Define a field of a row type.
Format

[[field-definition]]
[subs="specialcharacters,macros"]
----
<field definition> ::=
       <<field-name, <field name> >>
       <<data-type, <data type> >>
       [ <<reference-scope-check, <reference scope check> >> ]
       [ <<collate-clause, <collate clause> >> ]
----

=== 6.3 <value specification> and <target specification>

.Function

Specify one or more values, host parameters, or SQL parameters.
Format

[[value-specification]]
[subs="specialcharacters,macros"]
----
<value specification> ::=
         <<literal, <literal> >>
       | <<general-value-specification, <general value specification> >>
----

[[unsigned-value-specification]]
[subs="specialcharacters,macros"]
----
<unsigned value specification> ::=
         <<unsigned-literal, <unsigned literal> >>
       | <<general-value-specification, <general value specification> >>
----

[[general-value-specification]]
[subs="specialcharacters,macros"]
----
<general value specification> ::=
         <<host-parameter-specification, <host parameter specification> >>
       | <<SQL-parameter-reference, <SQL parameter reference> >>
       | CURRENT_PATH
       | CURRENT_ROLE
       | CURRENT_USER
       | SESSION_USER
       | SYSTEM_USER
       | USER
       | VALUE
----

[[simple-value-specification]]
[subs="specialcharacters,macros"]
----
<simple value specification> ::=
         <<literal, <literal> >>
       | <<host-parameter-name, <host parameter name> >>
       | <<SQL-parameter-reference, <SQL parameter reference> >>
----

[[target-specification]]
[subs="specialcharacters,macros"]
----
<target specification> ::=
         <<host-parameter-specification, <host parameter specification> >>
       | <<SQL-parameter-reference, <SQL parameter reference> >>
       | <<column-reference, <column reference> >>
----

[[simple-target-specification]]
[subs="specialcharacters,macros"]
----
<simple target specification> ::=
         <<host-parameter-specification, <host parameter specification> >>
       | <<SQL-parameter-reference, <SQL parameter reference> >>
       | <<column-reference, <column reference> >>
----

[[host-parameter-specification]]
[subs="specialcharacters,macros"]
----
<host parameter specification> ::=
       <<host-parameter-name, <host parameter name> >> [ <<indicator-parameter, <indicator parameter> >> ]
----

[[indicator-parameter]]
[subs="specialcharacters,macros"]
----
<indicator parameter> ::=
       [ INDICATOR ] <<host-parameter-name, <host parameter name> >>
----

=== 6.4 <contextually typed value specification>

.Function

Specify a value whose data type is to be inferred from its context.
Format

[[contextually-typed-value-specification]]
[subs="specialcharacters,macros"]
----
<contextually typed value specification> ::=
         <<implicitly-typed-value-specification, <implicitly typed value specification> >>
       | <<default-specification, <default specification> >>
----

[[implicitly-typed-value-specification]]
[subs="specialcharacters,macros"]
----
<implicitly typed value specification> ::=
         <<null-specification, <null specification> >>
       | <<empty-specification, <empty specification> >>
----

[[null-specification]]
[subs="specialcharacters,macros"]
----
<null specification> ::=
       NULL
----

[[empty-specification]]
[subs="specialcharacters,macros"]
----
<empty specification> ::=
       ARRAY <<left-bracket-or-trigraph, <left bracket or trigraph> >> <<right-bracket-or-trigraph, <right bracket or trigraph> >>
----

[[default-specification]]
[subs="specialcharacters,macros"]
----
<default specification> ::=
       DEFAULT
----

=== 6.5 <identifier chain>

.Function

Disambiguate a <period>-separated chain of identifiers.
Format

[[identifier-chain]]
[subs="specialcharacters,macros"]
----
<identifier chain> ::=
       <<identifier, <identifier> >> [ { <<period, <period> >> <<identifier, <identifier> >> }... ]
----

[[basic-identifier-chain]]
[subs="specialcharacters,macros"]
----
<basic identifier chain> ::=
       <<identifier-chain, <identifier chain> >>
----


=== 6.6 <column reference>

.Function

Reference a column.
Format

[[column-reference]]
[subs="specialcharacters,macros"]
----
<column reference> ::=
         <<basic-identifier-chain, <basic identifier chain> >>
       | MODULE <<period, <period> >> <<qualified-identifier, <qualified identifier> >> <<period, <period> >> <<column-name, <column name> >>
----


=== 6.7 <SQL parameter reference>

.Function

Reference an SQL parameter.
Format

[[SQL-parameter-reference]]
[subs="specialcharacters,macros"]
----
<SQL parameter reference> ::=
       <<basic-identifier-chain, <basic identifier chain> >>
----


=== 6.8 <field reference>

.Function

Reference a field of a row value.
Format

[[field-reference]]
[subs="specialcharacters,macros"]
----
<field reference> ::=
       <<value-expression-primary, <value expression primary> >> <<period, <period> >> <<field-name, <field name> >>
----


=== 6.9 <attribute or method reference>

.Function

Return a value acquired by accessing a column of the row identified by a value of a reference type
or by invoking an SQL-invoked method.
Format

[[attribute-or-method-reference]]
[subs="specialcharacters,macros"]
----
<attribute or method reference> ::=
       <<value-expression-primary, <value expression primary> >> <<dereference-operator, <dereference operator> >> <<qualified-identifier, <qualified identifier> >>
           [ <<SQL-argument-list, <SQL argument list> >> ]
----

[[dereference-operator]]
[subs="specialcharacters,macros"]
----
<dereference operator> ::= <right arrow>
----


=== 6.10 <method reference>

.Function

Return a value acquired from invoking an SQL-invoked routine that is a method.
Format

[[method-reference]]
[subs="specialcharacters,macros"]
----
<method reference> ::=
       <<value-expression-primary, <value expression primary> >> <<dereference-operator, <dereference operator> >> <<method-name, <method name> >>
           <<SQL-argument-list, <SQL argument list> >>
----


=== 6.11 <method invocation>

.Function

Reference an SQL-invoked method of a user-defined type value.
Format

[[method-invocation]]
[subs="specialcharacters,macros"]
----
<method invocation> ::=
         <<direct-invocation, <direct invocation> >>
       | <<generalized-invocation, <generalized invocation> >>
----

[[direct-invocation]]
[subs="specialcharacters,macros"]
----
<direct invocation> ::=
       <<value-expression-primary, <value expression primary> >> <<period, <period> >> <<method-name, <method name> >>
         [ <<SQL-argument-list, <SQL argument list> >> ]
----

[[generalized-invocation]]
[subs="specialcharacters,macros"]
----
<generalized invocation> ::=
       <<left-paren, <left paren> >> <<value-expression-primary, <value expression primary> >>
           AS <<data-type, <data type> >> <<right-paren, <right paren> >> <<period, <period> >> <<method-name, <method name> >>
         [ <<SQL-argument-list, <SQL argument list> >> ]
----

[[method-selection]]
[subs="specialcharacters,macros"]
----
<method selection> ::= <routine invocation>
----


=== 6.12 <static method invocation>

.Function

Invoke a static method.
Format

[[static-method-invocation]]
[subs="specialcharacters,macros"]
----
<static method invocation> ::=
       <<user-defined-type, <user-defined type> >> <<double-colon, <double colon> >> <<method-name, <method name> >> [ <<SQL-argument-list, <SQL argument list> >> ]
----

[[static-method-selection]]
[subs="specialcharacters,macros"]
----
<static method selection> ::= <routine invocation>
----


=== 6.13 <element reference>

.Function

Return an element of an array.
Format

[[element-reference]]
[subs="specialcharacters,macros"]
----
<element reference> ::=
       <<array-value-expression, <array value expression> >>
           <<left-bracket-or-trigraph, <left bracket or trigraph> >> <<numeric-value-expression, <numeric value expression> >> <<right-bracket-or-trigraph, <right bracket or trigraph> >>
----


=== 6.14 <dereference operation>

.Function

Access a column of the row identified by a value of a reference type.
Format

[[dereference-operation]]
[subs="specialcharacters,macros"]
----
<dereference operation> ::=
       <<reference-value-expression, <reference value expression> >> <<dereference-operator, <dereference operator> >> <<attribute-name, <attribute name> >>
----


=== 6.15 <reference resolution>

.Function

Obtain the value referenced by a reference value.
Format

[[reference-resolution]]
[subs="specialcharacters,macros"]
----
<reference resolution> ::=
       DEREF <<left-paren, <left paren> >> <<reference-value-expression, <reference value expression> >> <<right-paren, <right paren> >>
----


=== 6.16 <set function specification>

.Function

Specify a value derived by the application of a function to an argument.
Format

[[set-function-specification]]
[subs="specialcharacters,macros"]
----
<set function specification> ::=
         COUNT <<left-paren, <left paren> >> <<asterisk, <asterisk> >> <<right-paren, <right paren> >>
       | <<general-set-function, <general set function> >>
       | <<grouping-operation, <grouping operation> >>
----

[[general-set-function]]
[subs="specialcharacters,macros"]
----
<general set function> ::=
         <<set-function-type, <set function type> >>
             <<left-paren, <left paren> >> [ <<set-quantifier, <set quantifier> >> ] <<value-expression, <value expression> >> <<right-paren, <right paren> >>
----

[[set-function-type]]
[subs="specialcharacters,macros"]
----
<set function type> ::=
         <<computational-operation, <computational operation> >>
----

[[computational-operation]]
[subs="specialcharacters,macros"]
----
<computational operation> ::=
         AVG | MAX | MIN | SUM
       | EVERY | ANY | SOME
       | COUNT
----

[[grouping-operation]]
[subs="specialcharacters,macros"]
----
<grouping operation> ::=
       GROUPING <<left-paren, <left paren> >> <<column-reference, <column reference> >> <<right-paren, <right paren> >>
----

[[set-quantifier]]
[subs="specialcharacters,macros"]
----
<set quantifier> ::=
         DISTINCT
       | ALL
----


=== 6.17 <numeric value function>

.Function

Specify a function yielding a value of type numeric.
Format

[[numeric-value-function]]
[subs="specialcharacters,macros"]
----
<numeric value function> ::=
         <<position-expression, <position expression> >>
       | <<extract-expression, <extract expression> >>
       | <<length-expression, <length expression> >>
       | <<cardinality-expression, <cardinality expression> >>
       | <<absolute-value-expression, <absolute value expression> >>
       | <<modulus-expression, <modulus expression> >>
----

[[position-expression]]
[subs="specialcharacters,macros"]
----
<position expression> ::=
         <<string-position-expression, <string position expression> >>
       | <<blob-position-expression, <blob position expression> >>
----


[[string-position-expression]]
[subs="specialcharacters,macros"]
----
<string position expression> ::=
       POSITION <<left-paren, <left paren> >> <<string-value-expression, <string value expression> >>
           IN <<string-value-expression, <string value expression> >> <<right-paren, <right paren> >>
----

[[blob-position-expression]]
[subs="specialcharacters,macros"]
----
<blob position expression> ::=
       POSITION <<left-paren, <left paren> >> <<blob-value-expression, <blob value expression> >>
           IN <<blob-value-expression, <blob value expression> >> <<right-paren, <right paren> >>
----

[[length-expression]]
[subs="specialcharacters,macros"]
----
<length expression> ::=
         <<char-length-expression, <char length expression> >>
       | <<octet-length-expression, <octet length expression> >>
       | <<bit-length-expression, <bit length expression> >>
----

[[char-length-expression]]
[subs="specialcharacters,macros"]
----
<char length expression> ::=
       { CHAR_LENGTH | CHARACTER_LENGTH }
           <<left-paren, <left paren> >> <<string-value-expression, <string value expression> >> <<right-paren, <right paren> >>
----

[[octet-length-expression]]
[subs="specialcharacters,macros"]
----
<octet length expression> ::=
       OCTET_LENGTH <<left-paren, <left paren> >> <<string-value-expression, <string value expression> >> <<right-paren, <right paren> >>
----

[[bit-length-expression]]
[subs="specialcharacters,macros"]
----
<bit length expression> ::=
       BIT_LENGTH <<left-paren, <left paren> >> <<string-value-expression, <string value expression> >> <<right-paren, <right paren> >>
----

[[extract-expression]]
[subs="specialcharacters,macros"]
----
<extract expression> ::=
       EXTRACT <<left-paren, <left paren> >> <<extract-field, <extract field> >>
           FROM <<extract-source, <extract source> >> <<right-paren, <right paren> >>
----

[[extract-field]]
[subs="specialcharacters,macros"]
----
<extract field> ::=
         <<primary-datetime-field, <primary datetime field> >>
       | <<time-zone-field, <time zone field> >>
----

[[time-zone-field]]
[subs="specialcharacters,macros"]
----
<time zone field> ::=
         TIMEZONE_HOUR
       | TIMEZONE_MINUTE
----

[[extract-source]]
[subs="specialcharacters,macros"]
----
<extract source> ::=
         <<datetime-value-expression, <datetime value expression> >>
       | <<interval-value-expression, <interval value expression> >>
----

[[cardinality-expression]]
[subs="specialcharacters,macros"]
----
<cardinality expression> ::=
       CARDINALITY <<left-paren, <left paren> >> <<collection-value-expression, <collection value expression> >> <<right-paren, <right paren> >>
----

[[absolute-value-expression]]
[subs="specialcharacters,macros"]
----
<absolute value expression> ::=
       ABS <<left-paren, <left paren> >> <<numeric-value-expression, <numeric value expression> >> <<right-paren, <right paren> >>
----

[[modulus-expression]]
[subs="specialcharacters,macros"]
----
<modulus expression> ::=
       MOD <<left-paren, <left paren> >> <<numeric-value-expression-dividend, <numeric value expression dividend> >> <<comma, <comma> >>
                        <<numeric-value-expression-divisor, <numeric value expression divisor> >><<right-paren, <right paren> >>
----

[[numeric-value-expression-dividend]]
[subs="specialcharacters,macros"]
----
<numeric value expression dividend> ::= <numeric value expression>
----

[[numeric-value-expression-divisor]]
[subs="specialcharacters,macros"]
----
<numeric value expression divisor> ::= <numeric value expression>
----


=== 6.18 <string value function>

.Function

Specify a function yielding a value of type character string or bit string.
Format

[[string-value-function]]
[subs="specialcharacters,macros"]
----
<string value function> ::=
         <<character-value-function, <character value function> >>
       | <<blob-value-function, <blob value function> >>
       | <<bit-value-function, <bit value function> >>
----

[[character-value-function]]
[subs="specialcharacters,macros"]
----
<character value function> ::=
         <<character-substring-function, <character substring function> >>
       | <<regular-expression-substring-function, <regular expression substring function> >>
       | <<fold, <fold> >>
       | <<form-of-use-conversion, <form-of-use conversion> >>
       | <<character-translation, <character translation> >>
       | <<trim-function, <trim function> >>
       | <<character-overlay-function, <character overlay function> >>
       | <<specific-type-method, <specific type method> >>
----

[[character-substring-function]]
[subs="specialcharacters,macros"]
----
<character substring function> ::=
       SUBSTRING <<left-paren, <left paren> >> <<character-value-expression, <character value expression> >> FROM <<start-position, <start position> >>
                   [ FOR <<string-length, <string length> >> ] <<right-paren, <right paren> >>
----

[[regular-expression-substring-function]]
[subs="specialcharacters,macros"]
----
<regular expression substring function> ::=
       SUBSTRING <<left-paren, <left paren> >> <<character-value-expression, <character value expression> >> FROM
                   <<character-value-expression, <character value expression> >> FOR <<escape-character, <escape character> >> <<right-paren, <right paren> >>
----

[[fold]]
[subs="specialcharacters,macros"]
----
<fold> ::= { UPPER | LOWER } <left paren> <character value expression> <right paren>
----

[[form-of-use-conversion]]
[subs="specialcharacters,macros"]
----
<form-of-use conversion> ::=
       CONVERT <<left-paren, <left paren> >> <<character-value-expression, <character value expression> >>
           USING <<form-of-use-conversion-name, <form-of-use conversion name> >> <<right-paren, <right paren> >>
----

[[character-translation]]
[subs="specialcharacters,macros"]
----
<character translation> ::=
       TRANSLATE <<left-paren, <left paren> >> <<character-value-expression, <character value expression> >>
           USING <<translation-name, <translation name> >> <<right-paren, <right paren> >>
----

[[trim-function]]
[subs="specialcharacters,macros"]
----
<trim function> ::=
       TRIM <<left-paren, <left paren> >> <<trim-operands, <trim operands> >> <<right-paren, <right paren> >>
----

[[trim-operands]]
[subs="specialcharacters,macros"]
----
<trim operands> ::=
       [ [ <<trim-specification, <trim specification> >> ] [ <<trim-character, <trim character> >> ] FROM ] <<trim-source, <trim source> >>
----

[[trim-source]]
[subs="specialcharacters,macros"]
----
<trim source> ::= <character value expression>
----

[[trim-specification]]
[subs="specialcharacters,macros"]
----
<trim specification> ::=
         LEADING
       | TRAILING
       | BOTH
----

[[trim-character]]
[subs="specialcharacters,macros"]
----
<trim character> ::= <character value expression>
----

[[character-overlay-function]]
[subs="specialcharacters,macros"]
----
<character overlay function> ::=
       OVERLAY <<left-paren, <left paren> >> <<character-value-expression, <character value expression> >>
         PLACING <<character-value-expression, <character value expression> >>
          FROM <<start-position, <start position> >>
          [ FOR <<string-length, <string length> >> ] <<right-paren, <right paren> >>
----

[[specific-type-method]]
[subs="specialcharacters,macros"]
----
<specific type method> ::=
       <<user-defined-type-value-expression, <user-defined type value expression> >> <<period, <period> >> SPECIFICTYPE
----

[[blob-value-function]]
[subs="specialcharacters,macros"]
----
<blob value function> ::=
         <<blob-substring-function, <blob substring function> >>
       | <<blob-trim-function, <blob trim function> >>
       | <<blob-overlay-function, <blob overlay function> >>
----

[[blob-substring-function]]
[subs="specialcharacters,macros"]
----
<blob substring function> ::=
       SUBSTRING <<left-paren, <left paren> >> <<blob-value-expression, <blob value expression> >> FROM <<start-position, <start position> >>
         [ FOR <<string-length, <string length> >> ] <<right-paren, <right paren> >>
----

[[blob-trim-function]]
[subs="specialcharacters,macros"]
----
<blob trim function> ::=
       TRIM <<left-paren, <left paren> >> <<blob-trim-operands, <blob trim operands> >> <<right-paren, <right paren> >>
----

[[blob-trim-operands]]
[subs="specialcharacters,macros"]
----
<blob trim operands> ::=
       [ [ <<trim-specification, <trim specification> >> ] [ <<trim-octet, <trim octet> >> ] FROM ] <<blob-trim-source, <blob trim source> >>
----

[[blob-trim-source]]
[subs="specialcharacters,macros"]
----
<blob trim source> ::= <blob value expression>
----

[[trim-octet]]
[subs="specialcharacters,macros"]
----
<trim octet> ::= <blob value expression>
----

[[blob-overlay-function]]
[subs="specialcharacters,macros"]
----
<blob overlay function> ::=
       OVERLAY <<left-paren, <left paren> >> <<blob-value-expression, <blob value expression> >>
         PLACING <<blob-value-expression, <blob value expression> >>
         FROM <<start-position, <start position> >>
         [ FOR <<string-length, <string length> >> ] <<right-paren, <right paren> >>
----

[[bit-value-function]]
[subs="specialcharacters,macros"]
----
<bit value function> ::=
       <<bit-substring-function, <bit substring function> >>
----

[[bit-substring-function]]
[subs="specialcharacters,macros"]
----
<bit substring function> ::=
       SUBSTRING <<left-paren, <left paren> >> <<bit-value-expression, <bit value expression> >> FROM <<start-position, <start position> >>
           [ FOR <<string-length, <string length> >> ] <<right-paren, <right paren> >>
----

[[start-position]]
[subs="specialcharacters,macros"]
----
<start position> ::= <numeric value expression>
----

[[string-length]]
[subs="specialcharacters,macros"]
----
<string length> ::= <numeric value expression>
----

=== 6.19 <datetime value function>

.Function

Specify a function yielding a value of type datetime.
Format

[[datetime-value-function]]
[subs="specialcharacters,macros"]
----
<datetime value function> ::=
         <<current-date-value-function, <current date value function> >>
       | <<current-time-value-function, <current time value function> >>
       | <<current-timestamp-value-function, <current timestamp value function> >>
       | <<current-local-time-value-function, <current local time value function> >>
       | <<current-local-timestamp-value-function, <current local timestamp value function> >>
----

[[current-date-value-function]]
[subs="specialcharacters,macros"]
----
<current date value function> ::=
       CURRENT_DATE
----

[[current-time-value-function]]
[subs="specialcharacters,macros"]
----
<current time value function> ::=
       CURRENT_TIME [ <<left-paren, <left paren> >> <<time-precision, <time precision> >> <<right-paren, <right paren> >> ]
----

[[current-local-time-value-function]]
[subs="specialcharacters,macros"]
----
<current local time value function> ::=
       LOCALTIME [ <<left-paren, <left paren> >> <<time-precision, <time precision> >> <<right-paren, <right paren> >> ]
----

[[current-timestamp-value-function]]
[subs="specialcharacters,macros"]
----
<current timestamp value function> ::=
       CURRENT_TIMESTAMP [ <<left-paren, <left paren> >> <<timestamp-precision, <timestamp precision> >> <<right-paren, <right paren> >> ]
----

[[current-local-timestamp-value-function]]
[subs="specialcharacters,macros"]
----
<current local timestamp value function> ::=
       LOCALTIMESTAMP [ <<left-paren, <left paren> >> <<timestamp-precision, <timestamp precision> >> <<right-paren, <right paren> >> ]
----

=== 6.20 <interval value function>

.Function

Specify a function yielding a value of type interval.
Format

[[interval-value-function]]
[subs="specialcharacters,macros"]
----
<interval value function> ::=
       <<interval-absolute-value-function, <interval absolute value function> >>
----

[[interval-absolute-value-function]]
[subs="specialcharacters,macros"]
----
<interval absolute value function> ::=
       ABS <<left-paren, <left paren> >> <<interval-value-expression, <interval value expression> >> <<right-paren, <right paren> >>
----


=== 6.21 <case expression>

.Function

Specify a conditional value.
Format

[[case-expression]]
[subs="specialcharacters,macros"]
----
<case expression> ::=
         <<case-abbreviation, <case abbreviation> >>
       | <<case-specification, <case specification> >>
----

[[case-abbreviation]]
[subs="specialcharacters,macros"]
----
<case abbreviation> ::=
         NULLIF <<left-paren, <left paren> >> <<value-expression, <value expression> >> <<comma, <comma> >>
               <<value-expression, <value expression> >> <<right-paren, <right paren> >>
       | COALESCE <<left-paren, <left paren> >> <<value-expression, <value expression> >>
               { <<comma, <comma> >> <<value-expression, <value expression> >> }... <<right-paren, <right paren> >>
----

[[case-specification]]
[subs="specialcharacters,macros"]
----
<case specification> ::=
         <<simple-case, <simple case> >>
       | <<searched-case, <searched case> >>
----

[[simple-case]]
[subs="specialcharacters,macros"]
----
<simple case> ::=
       CASE <<case-operand, <case operand> >>
         <<simple-when-clause, <simple when clause> >>...
         [ <<else-clause, <else clause> >> ]
       END
----

[[searched-case]]
[subs="specialcharacters,macros"]
----
<searched case> ::=
       CASE
         <<searched-when-clause, <searched when clause> >>...
         [ <<else-clause, <else clause> >> ]
       END
----

[[simple-when-clause]]
[subs="specialcharacters,macros"]
----
<simple when clause> ::= WHEN <when operand> THEN <result>
----

[[searched-when-clause]]
[subs="specialcharacters,macros"]
----
<searched when clause> ::= WHEN <search condition> THEN <result>
----

[[else-clause]]
[subs="specialcharacters,macros"]
----
<else clause> ::= ELSE <result>
----

[[case-operand]]
[subs="specialcharacters,macros"]
----
<case operand> ::= <value expression>
----

[[when-operand]]
[subs="specialcharacters,macros"]
----
<when operand> ::= <value expression>
----

[[result]]
[subs="specialcharacters,macros"]
----
<result> ::=
         <<result-expression, <result expression> >>
       | NULL
----

[[result-expression]]
[subs="specialcharacters,macros"]
----
<result expression> ::= <value expression>
----


=== 6.22 <cast specification>

.Function

Specify a data conversion.
Format

[[cast-specification]]
[subs="specialcharacters,macros"]
----
<cast specification> ::=
       CAST <<left-paren, <left paren> >> <<cast-operand, <cast operand> >> AS <<cast-target, <cast target> >> <<right-paren, <right paren> >>
----

[[cast-operand]]
[subs="specialcharacters,macros"]
----
<cast operand> ::=
         <<value-expression, <value expression> >> | <<implicitly-typed-value-specification, <implicitly typed value specification> >>
----

[[cast-target]]
[subs="specialcharacters,macros"]
----
<cast target> ::=
         <<domain-name, <domain name> >>
       | <<data-type, <data type> >>
----


=== 6.23 <value expression>

.Function

Specify a value.
Format

[[value-expression]]
[subs="specialcharacters,macros"]
----
<value expression> ::=
         <<numeric-value-expression, <numeric value expression> >>
       | <<string-value-expression, <string value expression> >>
       | <<datetime-value-expression, <datetime value expression> >>
       | <<interval-value-expression, <interval value expression> >>
       | <<boolean-value-expression, <boolean value expression> >>
       | <<user-defined-type-value-expression, <user-defined type value expression> >>
       | <<row-value-expression, <row value expression> >>
       | <<reference-value-expression, <reference value expression> >>
       | <<collection-value-expression, <collection value expression> >>
----

[[user-defined-type-value-expression]]
[subs="specialcharacters,macros"]
----
<user-defined type value expression> ::=
       <<value-expression-primary, <value expression primary> >>
----

[[reference-value-expression]]
[subs="specialcharacters,macros"]
----
<reference value expression> ::=
       <<value-expression-primary, <value expression primary> >>
----

[[collection-value-expression]]
[subs="specialcharacters,macros"]
----
<collection value expression> ::=
         <<value-expression-primary, <value expression primary> >>
----

[[value-expression-primary]]
[subs="specialcharacters,macros"]
----
<value expression primary> ::=
         <<parenthesized-value-expression, <parenthesized value expression> >>
       | <<nonparenthesized-value-expression-primary, <nonparenthesized value expression primary> >>
----

[[parenthesized-value-expression]]
[subs="specialcharacters,macros"]
----
<parenthesized value expression> ::=
       <<left-paren, <left paren> >> <<value-expression, <value expression> >> <<right-paren, <right paren> >>
----

[[nonparenthesized-value-expression-primary]]
[subs="specialcharacters,macros"]
----
<nonparenthesized value expression primary> ::=
         <<unsigned-value-specification, <unsigned value specification> >>
       | <<column-reference, <column reference> >>
       | <<set-function-specification, <set function specification> >>
       | <<scalar-subquery, <scalar subquery> >>
       | <<case-expression, <case expression> >>
       | <<cast-specification, <cast specification> >>
       | <<subtype-treatment, <subtype treatment> >>
       | <<attribute-or-method-reference, <attribute or method reference> >>
       | <<reference-resolution, <reference resolution> >>
       | <<collection-value-constructor, <collection value constructor> >>
       | <<routine-invocation, <routine invocation> >>
       | <<field-reference, <field reference> >>
       | <<element-reference, <element reference> >>
       | <<method-invocation, <method invocation> >>
       | <<static-method-invocation, <static method invocation> >>
       | <<new-specification, <new specification> >>
----

[[collection-value-constructor]]
[subs="specialcharacters,macros"]
----
<collection value constructor> ::=
         <<array-value-expression, <array value expression> >>
----


=== 6.24 <new specification>

.Function

Invoke a method on a newly-constructed value of a structured type.
Format

[[new-specification]]
[subs="specialcharacters,macros"]
----
<new specification> ::=
       NEW <<routine-invocation, <routine invocation> >>
----

[[new-invocation]]
[subs="specialcharacters,macros"]
----
<new invocation> ::=
       <<method-invocation, <method invocation> >>
----


=== 6.25 <subtype treatment>

.Function

Modify the declared type of an expression.
Format

[[subtype-treatment]]
[subs="specialcharacters,macros"]
----
<subtype treatment> ::=
       TREAT <<left-paren, <left paren> >> <<subtype-operand, <subtype operand> >> AS <<target-data-type, <target data type> >> <<right-paren, <right paren> >>
----

[[subtype-operand]]
[subs="specialcharacters,macros"]
----
<subtype operand> ::= <value expression>
----

[[target-data-type]]
[subs="specialcharacters,macros"]
----
<target data type> ::=
       <<user-defined-type, <user-defined type> >>
----


=== 6.26 <numeric value expression>

.Function

Specify a numeric value.
Format

[[numeric-value-expression]]
[subs="specialcharacters,macros"]
----
<numeric value expression> ::=
         <<term, <term> >>
       | <<numeric-value-expression, <numeric value expression> >> <<plus-sign, <plus sign> >> <<term, <term> >>
       | <<numeric-value-expression, <numeric value expression> >> <<minus-sign, <minus sign> >> <<term, <term> >>
----

[[term]]
[subs="specialcharacters,macros"]
----
<term> ::=
         <<factor, <factor> >>
       | <<term, <term> >> <<asterisk, <asterisk> >> <<factor, <factor> >>
       | <<term, <term> >> <<solidus, <solidus> >> <<factor, <factor> >>
----

[[factor]]
[subs="specialcharacters,macros"]
----
<factor> ::=
       [ <<sign, <sign> >> ] <<numeric-primary, <numeric primary> >>
----

[[numeric-primary]]
[subs="specialcharacters,macros"]
----
<numeric primary> ::=
         <<value-expression-primary, <value expression primary> >>
       | <<numeric-value-function, <numeric value function> >>
----


=== 6.27 <string value expression>

.Function

Specify a character string value or a bit string value.
Format

[[string-value-expression]]
[subs="specialcharacters,macros"]
----
<string value expression> ::=
         <<character-value-expression, <character value expression> >>
       | <<bit-value-expression, <bit value expression> >>
       | <<blob-value-expression, <blob value expression> >>
----

[[character-value-expression]]
[subs="specialcharacters,macros"]
----
<character value expression> ::=
         <<concatenation, <concatenation> >>
       | <<character-factor, <character factor> >>
----

[[concatenation]]
[subs="specialcharacters,macros"]
----
<concatenation> ::=
       <<character-value-expression, <character value expression> >> <<concatenation-operator, <concatenation operator> >> <<character-factor, <character factor> >>
----

[[character-factor]]
[subs="specialcharacters,macros"]
----
<character factor> ::=
       <<character-primary, <character primary> >> [ <<collate-clause, <collate clause> >> ]
----

[[character-primary]]
[subs="specialcharacters,macros"]
----
<character primary> ::=
         <<value-expression-primary, <value expression primary> >>
       | <<string-value-function, <string value function> >>
----

[[blob-value-expression]]
[subs="specialcharacters,macros"]
----
<blob value expression> ::=
         <<blob-concatenation, <blob concatenation> >>
       | <<blob-factor, <blob factor> >>
----

[[blob-factor]]
[subs="specialcharacters,macros"]
----
<blob factor> ::= <blob primary>
----

[[blob-primary]]
[subs="specialcharacters,macros"]
----
<blob primary> ::=
         <<value-expression-primary, <value expression primary> >>
       | <<string-value-function, <string value function> >>
----

[[blob-concatenation]]
[subs="specialcharacters,macros"]
----
<blob concatenation> ::=
       <<blob-value-expression, <blob value expression> >> <<concatenation-operator, <concatenation operator> >> <<blob-factor, <blob factor> >>
----

[[bit-value-expression]]
[subs="specialcharacters,macros"]
----
<bit value expression> ::=
         <<bit-concatenation, <bit concatenation> >>
       | <<bit-factor, <bit factor> >>
----

[[bit-concatenation]]
[subs="specialcharacters,macros"]
----
<bit concatenation> ::=
       <<bit-value-expression, <bit value expression> >> <<concatenation-operator, <concatenation operator> >> <<bit-factor, <bit factor> >>
----

[[bit-factor]]
[subs="specialcharacters,macros"]
----
<bit factor> ::= <bit primary>
----

[[bit-primary]]
[subs="specialcharacters,macros"]
----
<bit primary> ::=
         <<value-expression-primary, <value expression primary> >>
       | <<string-value-function, <string value function> >>
----


=== 6.28 <datetime value expression>

.Function

Specify a datetime value.
Format

[[datetime-value-expression]]
[subs="specialcharacters,macros"]
----
<datetime value expression> ::=
         <<datetime-term, <datetime term> >>
       | <<interval-value-expression, <interval value expression> >> <<plus-sign, <plus sign> >> <<datetime-term, <datetime term> >>
       | <<datetime-value-expression, <datetime value expression> >> <<plus-sign, <plus sign> >> <<interval-term, <interval term> >>
       | <<datetime-value-expression, <datetime value expression> >> <<minus-sign, <minus sign> >> <<interval-term, <interval term> >>
----

[[datetime-term]]
[subs="specialcharacters,macros"]
----
<datetime term> ::=
         <<datetime-factor, <datetime factor> >>
----

[[datetime-factor]]
[subs="specialcharacters,macros"]
----
<datetime factor> ::=
         <<datetime-primary, <datetime primary> >> [ <<time-zone, <time zone> >> ]
----

[[datetime-primary]]
[subs="specialcharacters,macros"]
----
<datetime primary> ::=
         <<value-expression-primary, <value expression primary> >>
       | <<datetime-value-function, <datetime value function> >>
----

[[time-zone]]
[subs="specialcharacters,macros"]
----
<time zone> ::=
       AT <<time-zone-specifier, <time zone specifier> >>
----

[[time-zone-specifier]]
[subs="specialcharacters,macros"]
----
<time zone specifier> ::=
         LOCAL
       | TIME ZONE <<interval-primary, <interval primary> >>
----


=== 6.29 <interval value expression>

.Function

Specify an interval value.
Format

[[interval-value-expression]]
[subs="specialcharacters,macros"]
----
<interval value expression> ::=
         <<interval-term, <interval term> >>
       | <<interval-value-expression-1, <interval value expression 1> >> <<plus-sign, <plus sign> >> <<interval-term-1, <interval term 1> >>
       | <<interval-value-expression-1, <interval value expression 1> >> <<minus-sign, <minus sign> >> <<interval-term-1, <interval term 1> >>
       | <<left-paren, <left paren> >> <<datetime-value-expression, <datetime value expression> >> <<minus-sign, <minus sign> >>
             <<datetime-term, <datetime term> >> <<right-paren, <right paren> >> <<interval-qualifier, <interval qualifier> >>
----

[[interval-term]]
[subs="specialcharacters,macros"]
----
<interval term> ::=
         <<interval-factor, <interval factor> >>
       | <<interval-term-2, <interval term 2> >> <<asterisk, <asterisk> >> <<factor, <factor> >>
       | <<interval-term-2, <interval term 2> >> <<solidus, <solidus> >> <<factor, <factor> >>
       | <<term, <term> >> <<asterisk, <asterisk> >> <<interval-factor, <interval factor> >>
----

[[interval-factor]]
[subs="specialcharacters,macros"]
----
<interval factor> ::=
       [ <<sign, <sign> >> ] <<interval-primary, <interval primary> >>
----

[[interval-primary]]
[subs="specialcharacters,macros"]
----
<interval primary> ::=
         <<value-expression-primary, <value expression primary> >>
       | <<interval-value-function, <interval value function> >>
----

[[interval-value-expression-1]]
[subs="specialcharacters,macros"]
----
<interval value expression 1> ::= <interval value expression>
----

[[interval-term-1]]
[subs="specialcharacters,macros"]
----
<interval term 1> ::= <interval term>
----

[[interval-term-2]]
[subs="specialcharacters,macros"]
----
<interval term 2> ::= <interval term>
----


=== 6.30 <boolean value expression>

.Function

Specify a boolean value.
Format

[[boolean-value-expression]]
[subs="specialcharacters,macros"]
----
<boolean value expression> ::=
         <<boolean-term, <boolean term> >>
       | <<boolean-value-expression, <boolean value expression> >> OR <<boolean-term, <boolean term> >>
----

[[boolean-term]]
[subs="specialcharacters,macros"]
----
<boolean term> ::=
         <<boolean-factor, <boolean factor> >>
       | <<boolean-term, <boolean term> >> AND <<boolean-factor, <boolean factor> >>
----

[[boolean-factor]]
[subs="specialcharacters,macros"]
----
<boolean factor> ::=
       [ NOT ] <<boolean-test, <boolean test> >>
----

[[boolean-test]]
[subs="specialcharacters,macros"]
----
<boolean test> ::=
       <<boolean-primary, <boolean primary> >> [ IS [ NOT ] <<truth-value, <truth value> >> ]
----

[[truth-value]]
[subs="specialcharacters,macros"]
----
<truth value> ::=
         TRUE
       | FALSE
       | UNKNOWN
----

[[boolean-primary]]
[subs="specialcharacters,macros"]
----
<boolean primary> ::=
         <<predicate, <predicate> >>
       | <<parenthesized-boolean-value-expression, <parenthesized boolean value expression> >>
       | <<nonparenthesized-value-expression-primary, <nonparenthesized value expression primary> >>
----

[[parenthesized-boolean-value-expression]]
[subs="specialcharacters,macros"]
----
<parenthesized boolean value expression> ::=
       <<left-paren, <left paren> >> <<boolean-value-expression, <boolean value expression> >> <<right-paren, <right paren> >>
----


=== 6.31 <array value expression>

.Function

Specify an array value.
Format

[[array-value-expression]]
[subs="specialcharacters,macros"]
----
<array value expression> ::=
         <<array-value-constructor, <array value constructor> >>
       | <<array-concatenation, <array concatenation> >>
       | <<value-expression-primary, <value expression primary> >>
----

[[array-concatenation]]
[subs="specialcharacters,macros"]
----
<array concatenation> ::=
       <<array-value-expression-1, <array value expression 1> >> <<concatenation-operator, <concatenation operator> >> <<array-value-expression-2, <array value expression 2> >>
----

[[array-value-expression-1]]
[subs="specialcharacters,macros"]
----
<array value expression 1> ::= <array value expression>
----

[[array-value-expression-2]]
[subs="specialcharacters,macros"]
----
<array value expression 2> ::= <array value expression>
----


=== 6.32 <array value constructor>

.Function

Specify construction of an array.
Format

[[array-value-constructor]]
[subs="specialcharacters,macros"]
----
<array value constructor> ::=
       <<array-value-list-constructor, <array value list constructor> >>
----

[[array-value-list-constructor]]
[subs="specialcharacters,macros"]
----
<array value list constructor> ::=
       ARRAY <<left-bracket-or-trigraph, <left bracket or trigraph> >> <<array-element-list, <array element list> >> <<right-bracket-or-trigraph, <right bracket or trigraph> >>
----


[[array-element-list]]
[subs="specialcharacters,macros"]
----
<array element list> ::=
       <<array-element, <array element> >> [ { <<comma, <comma> >> <<array-element, <array element> >> }... ]
----

[[array-element]]
[subs="specialcharacters,macros"]
----
<array element> ::=
       <<value-expression, <value expression> >>
----


== 7 Query expressions


=== 7.1 <row value constructor>

.Function

Specify a value or list of values to be constructed into a row or partial row.
Format

[[row-value-constructor]]
[subs="specialcharacters,macros"]
----
<row value constructor> ::=
         <<row-value-constructor-element, <row value constructor element> >>
       | [ ROW ] <<left-paren, <left paren> >> <<row-value-constructor-element-list, <row value constructor element list> >> <<right-paren, <right paren> >>
       | <<row-subquery, <row subquery> >>
----

[[row-value-constructor-element-list]]
[subs="specialcharacters,macros"]
----
<row value constructor element list> ::=
       <<row-value-constructor-element, <row value constructor element> >>
           [ { <<comma, <comma> >> <<row-value-constructor-element, <row value constructor element> >> }... ]
----

[[row-value-constructor-element]]
[subs="specialcharacters,macros"]
----
<row value constructor element> ::=
         <<value-expression, <value expression> >>
----

[[contextually-typed-row-value-constructor]]
[subs="specialcharacters,macros"]
----
<contextually typed row value constructor> ::=
         <<contextually-typed-row-value-constructor-element, <contextually typed row value constructor element> >>
       | [ ROW ]
             <<left-paren, <left paren> >>
               <<contextually-typed-row-value-constructor-element-list, <contextually typed row value constructor element list> >>
             <<right-paren, <right paren> >>
----

[[contextually-typed-row-value-constructor-element-list]]
[subs="specialcharacters,macros"]
----
<contextually typed row value constructor element list> ::=
       <<contextually-typed-row-value-constructor-element, <contextually typed row value constructor element> >>
           [ { <<comma, <comma> >> <<contextually-typed-row-value-constructor-element, <contextually typed row value constructor element> >> }... ]
----

[[contextually-typed-row-value-constructor-element]]
[subs="specialcharacters,macros"]
----
<contextually typed row value constructor element> ::=
         <<value-expression, <value expression> >>
       | <<contextually-typed-value-specification, <contextually typed value specification> >>
----


=== 7.2 <row value expression>

.Function

Specify a row value.
Format

[[row-value-expression]]
[subs="specialcharacters,macros"]
----
<row value expression> ::=
         <<row-value-special-case, <row value special case> >>
       | <<row-value-constructor, <row value constructor> >>
----

[[contextually-typed-row-value-expression]]
[subs="specialcharacters,macros"]
----
<contextually typed row value expression> ::=
         <<row-value-special-case, <row value special case> >>
       | <<contextually-typed-row-value-constructor, <contextually typed row value constructor> >>
----

[[row-value-special-case]]
[subs="specialcharacters,macros"]
----
<row value special case> ::=
         <<value-specification, <value specification> >>
       | <<value-expression, <value expression> >>
----


=== 7.3 <table value constructor>

.Function

Specify a set of <row value expression>s to be constructed into a table.
Format

[[table-value-constructor]]
[subs="specialcharacters,macros"]
----
<table value constructor> ::=
       VALUES <<row-value-expression-list, <row value expression list> >>
----

[[row-value-expression-list]]
[subs="specialcharacters,macros"]
----
<row value expression list> ::=
       <<row-value-expression, <row value expression> >> [ { <<comma, <comma> >> <<row-value-expression, <row value expression> >> }... ]
----

[[contextually-typed-table-value-constructor]]
[subs="specialcharacters,macros"]
----
<contextually typed table value constructor> ::=
       VALUES <<contextually-typed-row-value-expression-list, <contextually typed row value expression list> >>
----

[[contextually-typed-row-value-expression-list]]
[subs="specialcharacters,macros"]
----
<contextually typed row value expression list> ::=
       <<contextually-typed-row-value-expression, <contextually typed row value expression> >>
           [ { <<comma, <comma> >> <<contextually-typed-row-value-expression, <contextually typed row value expression> >> }... ]
----


=== 7.4 <table expression>

.Function

Specify a table or a grouped table.
Format

[[table-expression]]
[subs="specialcharacters,macros"]
----
<table expression> ::=
       <<from-clause, <from clause> >>
       [ <<where-clause, <where clause> >> ]
       [ <<group-by-clause, <group by clause> >> ]
       [ <<having-clause, <having clause> >> ]
----


=== 7.5 <from clause>

.Function

Specify a table derived from one or more tables.
Format

[[from-clause]]
[subs="specialcharacters,macros"]
----
<from clause> ::=
       FROM <<table-reference-list, <table reference list> >>
----

[[table-reference-list]]
[subs="specialcharacters,macros"]
----
<table reference list> ::=
       <<table-reference, <table reference> >> [ { <<comma, <comma> >> <<table-reference, <table reference> >> }... ]
----


=== 7.6 <table reference>

.Function

Reference a table.
Format

[[table-reference]]
[subs="specialcharacters,macros"]
----
<table reference> ::=
         <<table-primary, <table primary> >>
       | <<joined-table, <joined table> >>
----

[[table-primary]]
[subs="specialcharacters,macros"]
----
<table primary> ::=
         <<table-or-query-name, <table or query name> >> [ [ AS ] <<correlation-name, <correlation name> >>
             [ <<left-paren, <left paren> >> <<derived-column-list, <derived column list> >> <<right-paren, <right paren> >>       ] ]
       | <<derived-table, <derived table> >> [ AS ] <<correlation-name, <correlation name> >>
             [ <<left-paren, <left paren> >> <<derived-column-list, <derived column list> >> <<right-paren, <right paren> >>       ]
       | <<lateral-derived-table, <lateral derived table> >> [ AS ] <<correlation-name, <correlation name> >>
             [ <<left-paren, <left paren> >> <<derived-column-list, <derived column list> >> <<right-paren, <right paren> >>       ]
       | <<collection-derived-table, <collection derived table> >> [ AS ] <<correlation-name, <correlation name> >>
             [ <<left-paren, <left paren> >> <<derived-column-list, <derived column list> >> <<right-paren, <right paren> >>       ]
       | <<only-spec, <only spec> >>
           [ [ AS ] <<correlation-name, <correlation name> >>
             [ <<left-paren, <left paren> >> <<derived-column-list, <derived column list> >> <<right-paren, <right paren> >>       ] ]
       | <<left-paren, <left paren> >> <<joined-table, <joined table> >> <<right-paren, <right paren> >>
----

[[only-spec]]
[subs="specialcharacters,macros"]
----
<only spec> ::=
       ONLY <<left-paren, <left paren> >> <<table-or-query-name, <table or query name> >> <<right-paren, <right paren> >>
----

[[lateral-derived-table]]
[subs="specialcharacters,macros"]
----
<lateral derived table> ::=
       LATERAL <<left-paren, <left paren> >> <<query-expression, <query expression> >> <<right-paren, <right paren> >>
----

[[collection-derived-table]]
[subs="specialcharacters,macros"]
----
<collection derived table> ::=
       UNNEST <<left-paren, <left paren> >> <<collection-value-expression, <collection value expression> >> <<right-paren, <right paren> >>
           [ WITH ORDINALITY ]
----

[[derived-table]]
[subs="specialcharacters,macros"]
----
<derived table> ::= <table subquery>
----

[[table-or-query-name]]
[subs="specialcharacters,macros"]
----
<table or query name> ::=
         <<table-name, <table name> >>
       | <<query-name, <query name> >>
----

[[derived-column-list]]
[subs="specialcharacters,macros"]
----
<derived column list> ::= <column name list>
----

[[column-name-list]]
[subs="specialcharacters,macros"]
----
<column name list> ::=
       <<column-name, <column name> >> [ { <<comma, <comma> >> <<column-name, <column name> >> }... ]
----


=== 7.7 <joined table>

.Function

Specify a table derived from a Cartesian product, inner or outer join, or union join.
Format

[[joined-table]]
[subs="specialcharacters,macros"]
----
<joined table> ::=
         <<cross-join, <cross join> >>
       | <<qualified-join, <qualified join> >>
       | <<natural-join, <natural join> >>
       | <<union-join, <union join> >>
----

[[cross-join]]
[subs="specialcharacters,macros"]
----
<cross join> ::=
       <<table-reference, <table reference> >> CROSS JOIN <<table-primary, <table primary> >>
----

[[qualified-join]]
[subs="specialcharacters,macros"]
----
<qualified join> ::=
       <<table-reference, <table reference> >> [ <<join-type, <join type> >> ] JOIN <<table-reference, <table reference> >>
           <<join-specification, <join specification> >>
----

[[natural-join]]
[subs="specialcharacters,macros"]
----
<natural join> ::=
       <<table-reference, <table reference> >> NATURAL [ <<join-type, <join type> >> ] JOIN <<table-primary, <table primary> >>
----

[[union-join]]
[subs="specialcharacters,macros"]
----
<union join> ::=
       <<table-reference, <table reference> >> UNION JOIN <<table-primary, <table primary> >>
----

[[join-specification]]
[subs="specialcharacters,macros"]
----
<join specification> ::=
         <<join-condition, <join condition> >>
       | <<named-columns-join, <named columns join> >>
----

[[join-condition]]
[subs="specialcharacters,macros"]
----
<join condition> ::= ON <search condition>
----

[[named-columns-join]]
[subs="specialcharacters,macros"]
----
<named columns join> ::=
       USING <<left-paren, <left paren> >> <<join-column-list, <join column list> >> <<right-paren, <right paren> >>
----

[[join-type]]
[subs="specialcharacters,macros"]
----
<join type> ::=
         INNER
       | <<outer-join-type, <outer join type> >> [ OUTER ]
----

[[outer-join-type]]
[subs="specialcharacters,macros"]
----
<outer join type> ::=
         LEFT
       | RIGHT
       | FULL
----

[[join-column-list]]
[subs="specialcharacters,macros"]
----
<join column list> ::= <column name list>
----


=== 7.8 <where clause>

.Function

Specify a table derived by the application of a <search condition> to the result of the preceding
[[from-clause]]
[subs="specialcharacters,macros"]
----
<from clause>.
Format
----

[[where-clause]]
[subs="specialcharacters,macros"]
----
<where clause> ::= WHERE <search condition>
----


=== 7.9 <group by clause>

.Function

Specify a grouped table derived by the application of the <group by clause> to the result of the
previously specified clause.
Format

[[group-by-clause]]
[subs="specialcharacters,macros"]
----
<group by clause> ::=
       GROUP BY <<grouping-specification, <grouping specification> >>
----

[[grouping-specification]]
[subs="specialcharacters,macros"]
----
<grouping specification> ::=
         <<grouping-column-reference, <grouping column reference> >>
       | <<rollup-list, <rollup list> >>
       | <<cube-list, <cube list> >>
       | <<grouping-sets-list, <grouping sets list> >>
       | <<grand-total, <grand total> >>
       | <<concatenated-grouping, <concatenated grouping> >>
----

[[rollup-list]]
[subs="specialcharacters,macros"]
----
<rollup list> ::=
       ROLLUP <<left-paren, <left paren> >> <<grouping-column-reference-list, <grouping column reference list> >> <<right-paren, <right paren> >>
----

[[cube-list]]
[subs="specialcharacters,macros"]
----
<cube list> ::=
       CUBE <<left-paren, <left paren> >> <<grouping-column-reference-list, <grouping column reference list> >> <<right-paren, <right paren> >>
----

[[grouping-sets-list]]
[subs="specialcharacters,macros"]
----
<grouping sets list> ::=
       GROUPING SETS <<left-paren, <left paren> >> <<grouping-set-list, <grouping set list> >> <<right-paren, <right paren> >>
----

[[grouping-set-list]]
[subs="specialcharacters,macros"]
----
<grouping set list> ::=
       <<grouping-set, <grouping set> >> [ { <<comma, <comma> >> <<grouping-set, <grouping set> >> }... ]
----

[[concatenated-grouping]]
[subs="specialcharacters,macros"]
----
<concatenated grouping> ::=
       <<grouping-set, <grouping set> >> <<comma, <comma> >> <<grouping-set-list, <grouping set list> >>
----

[[grouping-set]]
[subs="specialcharacters,macros"]
----
<grouping set> ::=
         <<ordinary-grouping-set, <ordinary grouping set> >>
       | <<rollup-list, <rollup list> >>
       | <<cube-list, <cube list> >>
       | <<grand-total, <grand total> >>
----

[[ordinary-grouping-set]]
[subs="specialcharacters,macros"]
----
<ordinary grouping set> ::=
         <<grouping-column-reference, <grouping column reference> >>
       | <<left-paren, <left paren> >> <<grouping-column-reference-list, <grouping column reference list> >> <<right-paren, <right paren> >>
----

[[grand-total]]
[subs="specialcharacters,macros"]
----
<grand total> ::= <left paren> <right paren>
----

[[grouping-column-reference-list]]
[subs="specialcharacters,macros"]
----
<grouping column reference list> ::=
       <<grouping-column-reference, <grouping column reference> >> [ { <<comma, <comma> >> <<grouping-column-reference, <grouping column reference> >> }... ]
----

[[grouping-column-reference]]
[subs="specialcharacters,macros"]
----
<grouping column reference> ::=
       <<column-reference, <column reference> >> [ <<collate-clause, <collate clause> >> ]
----


=== 7.10 <having clause>

.Function

Specify a grouped table derived by the elimination of groups that do not satisfy a <search condi-
tion>.
Format

[[having-clause]]
[subs="specialcharacters,macros"]
----
<having clause> ::= HAVING <search condition>
----


=== 7.11 <query specification>

.Function

Specify a table derived from the result of a <table expression>.
Format

[[query-specification]]
[subs="specialcharacters,macros"]
----
<query specification> ::=
       SELECT [ <<set-quantifier, <set quantifier> >> ] <<select-list, <select list> >>
         <<table-expression, <table expression> >>
----

[[select-list]]
[subs="specialcharacters,macros"]
----
<select list> ::=
         <<asterisk, <asterisk> >>
       | <<select-sublist, <select sublist> >> [ { <<comma, <comma> >> <<select-sublist, <select sublist> >> }... ]
----

[[select-sublist]]
[subs="specialcharacters,macros"]
----
<select sublist> ::=
         <<derived-column, <derived column> >>
       | <<qualified-asterisk, <qualified asterisk> >>
----

[[qualified-asterisk]]
[subs="specialcharacters,macros"]
----
<qualified asterisk> ::=
         <<asterisked-identifier-chain, <asterisked identifier chain> >> <<period, <period> >> <<asterisk, <asterisk> >>
       | <<all-fields-reference, <all fields reference> >>
----

[[asterisked-identifier-chain]]
[subs="specialcharacters,macros"]
----
<asterisked identifier chain> ::=
       <<asterisked-identifier, <asterisked identifier> >> [ { <<period, <period> >> <<asterisked-identifier, <asterisked identifier> >> }... ]
----

[[asterisked-identifier]]
[subs="specialcharacters,macros"]
----
<asterisked identifier> ::= <identifier>
----

[[derived-column]]
[subs="specialcharacters,macros"]
----
<derived column> ::=
       <<value-expression, <value expression> >> [ <<as-clause, <as clause> >> ]
----

[[as-clause]]
[subs="specialcharacters,macros"]
----
<as clause> ::= [ AS ] <column name>
----

[[all-fields-reference]]
[subs="specialcharacters,macros"]
----
<all fields reference> ::=
       <<value-expression-primary, <value expression primary> >> <<period, <period> >> <<asterisk, <asterisk> >>
----


=== 7.12 <query expression>

.Function

Specify a table.
Format



[[query-expression]]
[subs="specialcharacters,macros"]
----
<query expression> ::=
       [ <<with-clause, <with clause> >> ] <<query-expression-body, <query expression body> >>
----

[[with-clause]]
[subs="specialcharacters,macros"]
----
<with clause> ::= WITH [ RECURSIVE ] <with list>
----

[[with-list]]
[subs="specialcharacters,macros"]
----
<with list> ::=
       <<with-list-element, <with list element> >> [ { <<comma, <comma> >> <<with-list-element, <with list element> >> }... ]
----

[[with-list-element]]
[subs="specialcharacters,macros"]
----
<with list element> ::=
       <<query-name, <query name> >>
         [ <<left-paren, <left paren> >> <<with-column-list, <with column list> >> <<right-paren, <right paren> >> ]
         AS <<left-paren, <left paren> >> <<query-expression, <query expression> >> <<right-paren, <right paren> >>
         [ <<search-or-cycle-clause, <search or cycle clause> >> ]
----

[[with-column-list]]
[subs="specialcharacters,macros"]
----
<with column list> ::= <column name list>
----

[[query-expression-body]]
[subs="specialcharacters,macros"]
----
<query expression body> ::=
         <<non-join-query-expression, <non-join query expression> >>
       | <<joined-table, <joined table> >>
----

[[non-join-query-expression]]
[subs="specialcharacters,macros"]
----
<non-join query expression> ::=
         <<non-join-query-term, <non-join query term> >>
       | <<query-expression-body, <query expression body> >> UNION [ ALL | DISTINCT ]
           [ <<corresponding-spec, <corresponding spec> >> ] <<query-term, <query term> >>
       | <<query-expression-body, <query expression body> >> EXCEPT [ ALL | DISTINCT ]
           [ <<corresponding-spec, <corresponding spec> >> ] <<query-term, <query term> >>
----

[[query-term]]
[subs="specialcharacters,macros"]
----
<query term> ::=
         <<non-join-query-term, <non-join query term> >>
       | <<joined-table, <joined table> >>
----

[[non-join-query-term]]
[subs="specialcharacters,macros"]
----
<non-join query term> ::=
         <<non-join-query-primary, <non-join query primary> >>
       | <<query-term, <query term> >> INTERSECT [ ALL | DISTINCT ]
           [ <<corresponding-spec, <corresponding spec> >> ] <<query-primary, <query primary> >>
----

[[query-primary]]
[subs="specialcharacters,macros"]
----
<query primary> ::=
         <<non-join-query-primary, <non-join query primary> >>
       | <<joined-table, <joined table> >>
----

[[non-join-query-primary]]
[subs="specialcharacters,macros"]
----
<non-join query primary> ::=
         <<simple-table, <simple table> >>
       | <<left-paren, <left paren> >> <<non-join-query-expression, <non-join query expression> >> <<right-paren, <right paren> >>
----

[[simple-table]]
[subs="specialcharacters,macros"]
----
<simple table> ::=
         <<query-specification, <query specification> >>
       | <<table-value-constructor, <table value constructor> >>
       | <<explicit-table, <explicit table> >>
----

[[explicit-table]]
[subs="specialcharacters,macros"]
----
<explicit table> ::= TABLE <table name>
----

[[corresponding-spec]]
[subs="specialcharacters,macros"]
----
<corresponding spec> ::=
       CORRESPONDING [ BY <<left-paren, <left paren> >> <<corresponding-column-list, <corresponding column list> >> <<right-paren, <right paren> >> ]
----

[[corresponding-column-list]]
[subs="specialcharacters,macros"]
----
<corresponding column list> ::= <column name list>
----


=== 7.13 <search or cycle clause>

.Function

Specify the generation of ordering and cycle detection information in the result of recursive query
expressions.
Format

[[search-or-cycle-clause]]
[subs="specialcharacters,macros"]
----
<search or cycle clause> ::=
         <<search-clause, <search clause> >>
       | <<cycle-clause, <cycle clause> >>
       | <<search-clause, <search clause> >> <<cycle-clause, <cycle clause> >>
----

[[search-clause]]
[subs="specialcharacters,macros"]
----
<search clause> ::=
       SEARCH <<recursive-search-order, <recursive search order> >> SET <<sequence-column, <sequence column> >>
----

[[recursive-search-order]]
[subs="specialcharacters,macros"]
----
<recursive search order> ::=
         DEPTH FIRST BY <<sort-specification-list, <sort specification list> >>
       | BREADTH FIRST BY <<sort-specification-list, <sort specification list> >>
----

[[sequence-column]]
[subs="specialcharacters,macros"]
----
<sequence column> ::= <column name>
----

[[cycle-clause]]
[subs="specialcharacters,macros"]
----
<cycle clause> ::=
       CYCLE <<cycle-column-list, <cycle column list> >>
       SET <<cycle-mark-column, <cycle mark column> >> TO <<cycle-mark-value, <cycle mark value> >>
       DEFAULT <<non-cycle-mark-value, <non-cycle mark value> >>
       USING <<path-column, <path column> >>
----

[[cycle-column-list]]
[subs="specialcharacters,macros"]
----
<cycle column list> ::=
       <<cycle-column, <cycle column> >> [ { <<comma, <comma> >> <<cycle-column, <cycle column> >> }... ]
----

[[cycle-column]]
[subs="specialcharacters,macros"]
----
<cycle column> ::= <column name>
----

[[cycle-mark-column]]
[subs="specialcharacters,macros"]
----
<cycle mark column> ::= <column name>
----

[[path-column]]
[subs="specialcharacters,macros"]
----
<path column> ::= <column name>
----

[[cycle-mark-value]]
[subs="specialcharacters,macros"]
----
<cycle mark value> ::= <value expression>
----

[[non-cycle-mark-value]]
[subs="specialcharacters,macros"]
----
<non-cycle mark value> ::= <value expression>
----


=== 7.14 <subquery>

.Function

Specify a scalar value, a row, or a table derived from a <query expression>.
Format

[[scalar-subquery]]
[subs="specialcharacters,macros"]
----
<scalar subquery> ::= <subquery>
----

[[row-subquery]]
[subs="specialcharacters,macros"]
----
<row subquery> ::= <subquery>
----

[[table-subquery]]
[subs="specialcharacters,macros"]
----
<table subquery> ::= <subquery>
----

[[subquery]]
[subs="specialcharacters,macros"]
----
<subquery> ::=
       <<left-paren, <left paren> >> <<query-expression, <query expression> >> <<right-paren, <right paren> >>
----


== 8 Predicates


=== 8.1 <predicate>

.Function

Specify a condition that can be evaluated to give a boolean value.
Format

[[predicate]]
[subs="specialcharacters,macros"]
----
<predicate> ::=
         <<comparison-predicate, <comparison predicate> >>
       | <<between-predicate, <between predicate> >>
       | <<in-predicate, <in predicate> >>
       | <<like-predicate, <like predicate> >>
       | <<null-predicate, <null predicate> >>
       | <<quantified-comparison-predicate, <quantified comparison predicate> >>
       | <<exists-predicate, <exists predicate> >>
       | <<unique-predicate, <unique predicate> >>
       | <<match-predicate, <match predicate> >>
       | <<overlaps-predicate, <overlaps predicate> >>
       | <<similar-predicate, <similar predicate> >>
       | <<distinct-predicate, <distinct predicate> >>
       | <<type-predicate, <type predicate> >>
----


=== 8.2 <comparison predicate>

.Function

Specify a comparison of two row values.
Format

[[comparison-predicate]]
[subs="specialcharacters,macros"]
----
<comparison predicate> ::=
       <<row-value-expression, <row value expression> >> <<comp-op, <comp op> >> <<row-value-expression, <row value expression> >>
----

[[comp-op]]
[subs="specialcharacters,macros"]
----
<comp op> ::=
         <<equals-operator, <equals operator> >>
       | <<not-equals-operator, <not equals operator> >>
       | <<less-than-operator, <less than operator> >>
       | <<greater-than-operator, <greater than operator> >>
       | <<less-than-or-equals-operator, <less than or equals operator> >>
       | <<greater-than-or-equals-operator, <greater than or equals operator> >>
----


=== 8.3 <between predicate>

.Function

Specify a range comparison.
Format

[[between-predicate]]
[subs="specialcharacters,macros"]
----
<between predicate> ::=
       <<row-value-expression, <row value expression> >> [ NOT ] BETWEEN
         [ ASYMMETRIC | SYMMETRIC ]
         <<row-value-expression, <row value expression> >> AND <<row-value-expression, <row value expression> >>
----


=== 8.4 <in predicate>

.Function

Specify a quantified comparison.
Format

[[in-predicate]]
[subs="specialcharacters,macros"]
----
<in predicate> ::=
       <<row-value-expression, <row value expression> >>
         [ NOT ] IN <<in-predicate-value, <in predicate value> >>
----

[[in-predicate-value]]
[subs="specialcharacters,macros"]
----
<in predicate value> ::=
         <<table-subquery, <table subquery> >>
       | <<left-paren, <left paren> >> <<in-value-list, <in value list> >> <<right-paren, <right paren> >>
----

[[in-value-list]]
[subs="specialcharacters,macros"]
----
<in value list> ::=
       <<row-value-expression, <row value expression> >> { <<comma, <comma> >> <<row-value-expression, <row value expression> >> }...
----


=== 8.5 <like predicate>

.Function

Specify a pattern-match comparison.
Format

[[like-predicate]]
[subs="specialcharacters,macros"]
----
<like predicate> ::=
         <<character-like-predicate, <character like predicate> >>
       | <<octet-like-predicate, <octet like predicate> >>
----

[[character-like-predicate]]
[subs="specialcharacters,macros"]
----
<character like predicate> ::=
       <<character-match-value, <character match value> >> [ NOT ] LIKE <<character-pattern, <character pattern> >>
         [ ESCAPE <<escape-character, <escape character> >> ]
----

[[character-match-value]]
[subs="specialcharacters,macros"]
----
<character match value> ::= <character value expression>
----

[[character-pattern]]
[subs="specialcharacters,macros"]
----
<character pattern> ::= <character value expression>
----

[[escape-character]]
[subs="specialcharacters,macros"]
----
<escape character> ::= <character value expression>
----

[[octet-like-predicate]]
[subs="specialcharacters,macros"]
----
<octet like predicate> ::=
       <<octet-match-value, <octet match value> >> [ NOT ] LIKE <<octet-pattern, <octet pattern> >>
         [ ESCAPE <<escape-octet, <escape octet> >> ]
----

[[octet-match-value]]
[subs="specialcharacters,macros"]
----
<octet match value> ::= <blob value expression>
----

[[octet-pattern]]
[subs="specialcharacters,macros"]
----
<octet pattern> ::= <blob value expression>
----

[[escape-octet]]
[subs="specialcharacters,macros"]
----
<escape octet> ::= <blob value expression>
----


=== 8.6 <similar predicate>

.Function

Specify a character string similarity by means of a regular expression.
Format

[[similar-predicate]]
[subs="specialcharacters,macros"]
----
<similar predicate> ::=
       <<character-match-value, <character match value> >> [ NOT ] SIMILAR TO <<similar-pattern, <similar pattern> >>
         [ ESCAPE <<escape-character, <escape character> >> ]
----

[[similar-pattern]]
[subs="specialcharacters,macros"]
----
<similar pattern> ::= <character value expression>
----

[[regular-expression]]
[subs="specialcharacters,macros"]
----
<regular expression> ::=
         <<regular-term, <regular term> >>
       | <<regular-expression, <regular expression> >> <<vertical-bar, <vertical bar> >> <<regular-term, <regular term> >>
----

[[regular-term]]
[subs="specialcharacters,macros"]
----
<regular term> ::=
         <<regular-factor, <regular factor> >>
       | <<regular-term, <regular term> >> <<regular-factor, <regular factor> >>
----

[[regular-factor]]
[subs="specialcharacters,macros"]
----
<regular factor> ::=
         <<regular-primary, <regular primary> >>
       | <<regular-primary, <regular primary> >> <<asterisk, <asterisk> >>
       | <<regular-primary, <regular primary> >> <<plus-sign, <plus sign> >>
----

[[regular-primary]]
[subs="specialcharacters,macros"]
----
<regular primary> ::=
         <<character-specifier, <character specifier> >>
       | <<percent, <percent> >>
       | <<regular-character-set, <regular character set> >>
       | <<left-paren, <left paren> >> <<regular-expression, <regular expression> >> <<right-paren, <right paren> >>
----

[[character-specifier]]
[subs="specialcharacters,macros"]
----
<character specifier> ::=
         <<non-escaped-character, <non-escaped character> >>
       | <<escaped-character, <escaped character> >>
----

[[non-escaped-character]]
[subs="specialcharacters,macros"]
----
<non-escaped character> ::= !! See the Syntax Rules
----

[[escaped-character]]
[subs="specialcharacters,macros"]
----
<escaped character> ::= !! See the Syntax Rules
----

[[regular-character-set]]
[subs="specialcharacters,macros"]
----
<regular character set>    ::=
         <<underscore, <underscore> >>
       | <<left-bracket, <left bracket> >>    <<character-enumeration, <character enumeration> >>... <<right-bracket, <right bracket> >>
       | <<left-bracket, <left bracket> >>    <<circumflex, <circumflex> >> <<character-enumeration, <character enumeration> >>... <<right-bracket, <right bracket> >>
       | <<left-bracket, <left bracket> >>    <<colon, <colon> >> <<regular-character-set-identifier, <regular character set identifier> >> <<colon, <colon> >> <<right-bracket, <right bracket> >>
----


[[character-enumeration]]
[subs="specialcharacters,macros"]
----
<character enumeration> ::=
         <<character-specifier, <character specifier> >>
       | <<character-specifier, <character specifier> >> <<minus-sign, <minus sign> >> <<character-specifier, <character specifier> >>
----

[[regular-character-set-identifier]]
[subs="specialcharacters,macros"]
----
<regular character set identifier> ::= <identifier>
----


=== 8.7 <null predicate>

.Function

Specify a test for a null value.
Format

[[null-predicate]]
[subs="specialcharacters,macros"]
----
<null predicate> ::=
       <<row-value-expression, <row value expression> >> IS [ NOT ] NULL
----


=== 8.8 <quantified comparison predicate>

.Function

Specify a quantified comparison.
Format

[[quantified-comparison-predicate]]
[subs="specialcharacters,macros"]
----
<quantified comparison predicate> ::=
       <<row-value-expression, <row value expression> >> <<comp-op, <comp op> >> <<quantifier, <quantifier> >>          <<table-subquery, <table subquery> >>
----

[[quantifier]]
[subs="specialcharacters,macros"]
----
<quantifier> ::= <all> | <some>
----

[[all]]
[subs="specialcharacters,macros"]
----
<all> ::= ALL
----

[[some]]
[subs="specialcharacters,macros"]
----
<some> ::= SOME | ANY
----


=== 8.9 <exists predicate>

.Function

Specify a test for a non-empty set.
Format

[[exists-predicate]]
[subs="specialcharacters,macros"]
----
<exists predicate> ::=
       EXISTS <<table-subquery, <table subquery> >>
----


=== 8.10 <unique predicate>

.Function

Specify a test for the absence of duplicate rows.
Format

[[unique-predicate]]
[subs="specialcharacters,macros"]
----
<unique predicate> ::=
       UNIQUE <<table-subquery, <table subquery> >>
----


=== 8.11 <match predicate>

.Function

Specify a test for matching rows.
Format

[[match-predicate]]
[subs="specialcharacters,macros"]
----
<match predicate> ::=
       <<row-value-expression, <row value expression> >> MATCH [ UNIQUE ] [ SIMPLE | PARTIAL | FULL ]
           <<table-subquery, <table subquery> >>
----


=== 8.12 <overlaps predicate>

.Function

Specify a test for an overlap between two datetime periods.
Format

[[overlaps-predicate]]
[subs="specialcharacters,macros"]
----
<overlaps predicate> ::=
       <<row-value-expression-1, <row value expression 1> >> OVERLAPS <<row-value-expression-2, <row value expression 2> >>
----

[[row-value-expression-1]]
[subs="specialcharacters,macros"]
----
<row value expression 1> ::= <row value expression>
----

[[row-value-expression-2]]
[subs="specialcharacters,macros"]
----
<row value expression 2> ::= <row value expression>
----


=== 8.13 <distinct predicate>

.Function

Specify a test of whether two row values are distinct
Format

[[distinct-predicate]]
[subs="specialcharacters,macros"]
----
<distinct predicate> ::=
       <<row-value-expression-3, <row value expression 3> >> IS DISTINCT FROM <<row-value-expression-4, <row value expression 4> >>
----

[[row-value-expression-3]]
[subs="specialcharacters,macros"]
----
<row value expression 3> ::= <row value expression>
----

[[row-value-expression-4]]
[subs="specialcharacters,macros"]
----
<row value expression 4> ::= <row value expression>
----


=== 8.14 <type predicate>

.Function

Specify a type test.
Format

[[type-predicate]]
[subs="specialcharacters,macros"]
----
<type predicate> ::=
       <<user-defined-type-value-expression, <user-defined type value expression> >> IS [ NOT ] OF
         <<left-paren, <left paren> >> <<type-list, <type list> >> <<right-paren, <right paren> >>
----

[[type-list]]
[subs="specialcharacters,macros"]
----
<type list> ::=
       <<user-defined-type-specification, <user-defined type specification> >>
           [ { <<comma, <comma> >> <<user-defined-type-specification, <user-defined type specification> >> }... ]
----

[[user-defined-type-specification]]
[subs="specialcharacters,macros"]
----
<user-defined type specification> ::=
         <<inclusive-user-defined-type-specification, <inclusive user-defined type specification> >>
       | <<exclusive-user-defined-type-specification, <exclusive user-defined type specification> >>
----

[[inclusive-user-defined-type-specification]]
[subs="specialcharacters,macros"]
----
<inclusive user-defined type specification> ::=
       <<user-defined-type, <user-defined type> >>
----

[[exclusive-user-defined-type-specification]]
[subs="specialcharacters,macros"]
----
<exclusive user-defined type specification> ::=
       ONLY <<user-defined-type, <user-defined type> >>
----


=== 8.15 <search condition>

.Function

Specify a condition that is true, false, or unknown, depending on the value of a <boolean value
expression>.
Format

[[search-condition]]
[subs="specialcharacters,macros"]
----
<search condition> ::=
       <<boolean-value-expression, <boolean value expression> >>
----


== 10 Additional common elements


=== 10.1 <interval qualifier>

.Function

Specify the precision of an interval data type.
Format

[[interval-qualifier]]
[subs="specialcharacters,macros"]
----
<interval qualifier> ::=
         <<start-field, <start field> >> TO <<end-field, <end field> >>
       | <<single-datetime-field, <single datetime field> >>
----

[[start-field]]
[subs="specialcharacters,macros"]
----
<start field> ::=
       <<non-second-primary-datetime-field, <non-second primary datetime field> >>
           [ <<left-paren, <left paren> >> <<interval-leading-field-precision, <interval leading field precision> >> <<right-paren, <right paren> >> ]
----

[[end-field]]
[subs="specialcharacters,macros"]
----
<end field> ::=
         <<non-second-primary-datetime-field, <non-second primary datetime field> >>
       | SECOND [ <<left-paren, <left paren> >> <<interval-fractional-seconds-precision, <interval fractional seconds precision> >> <<right-paren, <right paren> >> ]
----

[[single-datetime-field]]
[subs="specialcharacters,macros"]
----
<single datetime field> ::=
         <<non-second-primary-datetime-field, <non-second primary datetime field> >>
             [ <<left-paren, <left paren> >> <<interval-leading-field-precision, <interval leading field precision> >> <<right-paren, <right paren> >> ]
       | SECOND [ <<left-paren, <left paren> >> <<interval-leading-field-precision, <interval leading field precision> >>
             [ <<comma, <comma> >> <<interval-fractional-seconds-precision, <interval fractional seconds precision> >> ] <<right-paren, <right paren> >> ]
----

[[primary-datetime-field]]
[subs="specialcharacters,macros"]
----
<primary datetime field> ::=
         <<non-second-primary-datetime-field, <non-second primary datetime field> >>
       | SECOND
----

[[non-second-primary-datetime-field]]
[subs="specialcharacters,macros"]
----
<non-second primary datetime field> ::= YEAR | MONTH | DAY | HOUR | MINUTE
----

[[interval-fractional-seconds-precision]]
[subs="specialcharacters,macros"]
----
<interval fractional seconds precision> ::= <unsigned integer>
----

[[interval-leading-field-precision]]
[subs="specialcharacters,macros"]
----
<interval leading field precision> ::= <unsigned integer>
----


=== 10.2 <language clause>

.Function

Specify a standard programming language.
Format

[[language-clause]]
[subs="specialcharacters,macros"]
----
<language clause> ::=
       LANGUAGE <<language-name, <language name> >>
----

[[language-name]]
[subs="specialcharacters,macros"]
----
<language name> ::=
       ADA | C | COBOL | FORTRAN | MUMPS | PASCAL | PLI | SQL
----


=== 10.3 <path specification>

.Function

Specify an order for searching for an SQL-invoked routine.
Format

[[path-specification]]
[subs="specialcharacters,macros"]
----
<path specification> ::=
       PATH <<schema-name-list, <schema name list> >>
----

[[schema-name-list]]
[subs="specialcharacters,macros"]
----
<schema name list> ::=
       <<schema-name, <schema name> >> [ { <<comma, <comma> >> <<schema-name, <schema name> >> }... ]
----


=== 10.4 <routine invocation>

.Function

Invoke an SQL-invoked routine.
Format

[[routine-invocation]]
[subs="specialcharacters,macros"]
----
<routine invocation> ::=
       <<routine-name, <routine name> >> <<SQL-argument-list, <SQL argument list> >>
----

[[routine-name]]
[subs="specialcharacters,macros"]
----
<routine name> ::=
       [ <<schema-name, <schema name> >> <<period, <period> >> ] <<qualified-identifier, <qualified identifier> >>
----

[[SQL-argument-list]]
[subs="specialcharacters,macros"]
----
<SQL argument list> ::=
       <<left-paren, <left paren> >> [ <<SQL-argument, <SQL argument> >> [ { <<comma, <comma> >> <<SQL-argument, <SQL argument> >> }... ] ] <<right-paren, <right paren> >>
----

[[SQL-argument]]
[subs="specialcharacters,macros"]
----
<SQL argument> ::=
         <<value-expression, <value expression> >>
       | <<generalized-expression, <generalized expression> >>
       | <<target-specification, <target specification> >>
----

[[generalized-expression]]
[subs="specialcharacters,macros"]
----
<generalized expression> ::=
       <<value-expression, <value expression> >> AS <<user-defined-type, <user-defined type> >>
----


=== 10.5 <privileges>

.Function

Specify privileges.
Format

[[privileges]]
[subs="specialcharacters,macros"]
----
<privileges> ::=
       <<object-privileges, <object privileges> >> ON <<object-name, <object name> >>
----

[[object-name]]
[subs="specialcharacters,macros"]
----
<object name> ::=
         [ TABLE ] <<table-name, <table name> >>
       | DOMAIN <<domain-name, <domain name> >>
       | COLLATION <<collation-name, <collation name> >>
       | CHARACTER SET <<character-set-name, <character set name> >>
       | TRANSLATION <<translation-name, <translation name> >>
       | TYPE <<user-defined-type-name, <user-defined type name> >>
       | <<specific-routine-designator, <specific routine designator> >>
----

[[object-privileges]]
[subs="specialcharacters,macros"]
----
<object privileges> ::=
         ALL PRIVILEGES
       | <<action, <action> >> [ { <<comma, <comma> >> <<action, <action> >> }... ]
----

[[action]]
[subs="specialcharacters,macros"]
----
<action> ::=
         SELECT
       | SELECT <<left-paren, <left paren> >> <<privilege-column-list, <privilege column list> >> <<right-paren, <right paren> >>
       | SELECT <<left-paren, <left paren> >> <<privilege-method-list, <privilege method list> >> <<right-paren, <right paren> >>
       | DELETE
       | INSERT [ <<left-paren, <left paren> >> <<privilege-column-list, <privilege column list> >> <<right-paren, <right paren> >> ]
       | UPDATE [ <<left-paren, <left paren> >> <<privilege-column-list, <privilege column list> >> <<right-paren, <right paren> >> ]
       | REFERENCES [ <<left-paren, <left paren> >> <<privilege-column-list, <privilege column list> >> <<right-paren, <right paren> >> ]
       | USAGE
       | TRIGGER
       | UNDER
       | EXECUTE
----

[[privilege-method-list]]
[subs="specialcharacters,macros"]
----
<privilege method list> ::=
       <<specific-routine-designator, <specific routine designator> >> [ { <<comma, <comma> >> <<specific-routine-designator, <specific routine designator> >> }... ]
----

[[privilege-column-list]]
[subs="specialcharacters,macros"]
----
<privilege column list> ::= <column name list>
----

[[grantee]]
[subs="specialcharacters,macros"]
----
<grantee> ::=
         PUBLIC
       | <<authorization-identifier, <authorization identifier> >>
----

[[grantor]]
[subs="specialcharacters,macros"]
----
<grantor> ::=
         CURRENT_USER
       | CURRENT_ROLE
----


=== 10.6 <character set specification>

.Function

Identify a character set.
Format

[[character-set-specification]]
[subs="specialcharacters,macros"]
----
<character set specification> ::=
         <<standard-character-set-name, <standard character set name> >>
       | <<implementation-defined-character-set-name, <implementation-defined character set name> >>
       | <<user-defined-character-set-name, <user-defined character set name> >>
----

[[standard-character-set-name]]
[subs="specialcharacters,macros"]
----
<standard character set name> ::= <character set name>
----

[[implementation-defined-character-set-name]]
[subs="specialcharacters,macros"]
----
<implementation-defined character set name> ::= <character set name>
----

[[user-defined-character-set-name]]
[subs="specialcharacters,macros"]
----
<user-defined character set name> ::= <character set name>
----


=== 10.7 <specific routine designator>

.Function

Specify an SQL-invoked routine.
Format

[[specific-routine-designator]]
[subs="specialcharacters,macros"]
----
<specific routine designator> ::=
         SPECIFIC <<routine-type, <routine type> >> <<specific-name, <specific name> >>
       | <<routine-type, <routine type> >> <<member-name, <member name> >> [ FOR user-defined type> ]
----

[[routine-type]]
[subs="specialcharacters,macros"]
----
<routine type> ::=
         ROUTINE
       | FUNCTION
       | PROCEDURE
       | [ INSTANCE | STATIC ] METHOD
----

[[member-name]]
[subs="specialcharacters,macros"]
----
<member name> ::= <schema qualified routine name> [ <data type list> ]
----

[[data-type-list]]
[subs="specialcharacters,macros"]
----
<data type list> ::=
       <<left-paren, <left paren> >> [ <<data-type, <data type> >> [ { <<comma, <comma> >> <<data-type, <data type> >> }... ] ] <<right-paren, <right paren> >>
----


=== 10.8 <collate clause>

.Function

Specify a default collating sequence.
Format

[[collate-clause]]
[subs="specialcharacters,macros"]
----
<collate clause> ::= COLLATE <collation name>
----


=== 10.9 <constraint name definition> and <constraint
     characteristics>

.Function

Specify the name of a constraint and its characteristics.
Format

[[constraint-name-definition]]
[subs="specialcharacters,macros"]
----
<constraint name definition> ::=
       CONSTRAINT <<constraint-name, <constraint name> >>
----

[[constraint-characteristics]]
[subs="specialcharacters,macros"]
----
<constraint characteristics> ::=
         <<constraint-check-time, <constraint check time> >> [ [ NOT ] DEFERRABLE ]
       | [ NOT ] DEFERRABLE [ <<constraint-check-time, <constraint check time> >> ]
----

[[constraint-check-time]]
[subs="specialcharacters,macros"]
----
<constraint check time> ::=       INITIALLY DEFERRED | INITIALLY IMMEDIATE
----


== 11 Schema definition and manipulation

=== 11.1 <schema definition>

.Function

Define a schema.
Format

[[schema-definition]]
[subs="specialcharacters,macros"]
----
<schema definition> ::=
       CREATE SCHEMA <<schema-name-clause, <schema name clause> >>
         [ <<schema-character-set-or-path, <schema character set or path> >> ]
         [ <<schema-element, <schema element> >>... ]
----

[[schema-character-set-or-path]]
[subs="specialcharacters,macros"]
----
<schema character set or path> ::=
         <<schema-character-set-specification, <schema character set specification> >>
       | <<schema-path-specification, <schema path specification> >>
       | <<schema-character-set-specification, <schema character set specification> >> <<schema-path-specification, <schema path specification> >>
       | <<schema-path-specification, <schema path specification> >> <<schema-character-set-specification, <schema character set specification> >>
----

[[schema-name-clause]]
[subs="specialcharacters,macros"]
----
<schema name clause> ::=
         <<schema-name, <schema name> >>
       | AUTHORIZATION <<schema-authorization-identifier, <schema authorization identifier> >>
       | <<schema-name, <schema name> >> AUTHORIZATION <<schema-authorization-identifier, <schema authorization identifier> >>
----

[[schema-authorization-identifier]]
[subs="specialcharacters,macros"]
----
<schema authorization identifier> ::=
       <<authorization-identifier, <authorization identifier> >>
----

[[schema-character-set-specification]]
[subs="specialcharacters,macros"]
----
<schema character set specification> ::=
       DEFAULT CHARACTER SET <<character-set-specification, <character set specification> >>
----

[[schema-path-specification]]
[subs="specialcharacters,macros"]
----
<schema path specification> ::=
       <<path-specification, <path specification> >>
----

[[schema-element]]
[subs="specialcharacters,macros"]
----
<schema element> ::=
         <<table-definition, <table definition> >>
       | <<view-definition, <view definition> >>
       | <<domain-definition, <domain definition> >>
       | <<character-set-definition, <character set definition> >>
       | <<collation-definition, <collation definition> >>
       | <<translation-definition, <translation definition> >>
       | <<assertion-definition, <assertion definition> >>
       | <<trigger-definition, <trigger definition> >>
       | <<user-defined-type-definition, <user-defined type definition> >>
       | <<schema-routine, <schema routine> >>
       | <<grant-statement, <grant statement> >>
       | <<role-definition, <role definition> >>
       | <<grant-role-statement, <grant role statement> >>
----


=== 11.2 <drop schema statement>

.Function

Destroy a schema.
Format

[[drop-schema-statement]]
[subs="specialcharacters,macros"]
----
<drop schema statement> ::=
       DROP SCHEMA <<schema-name, <schema name> >> <<drop-behavior, <drop behavior> >>
----

[[drop-behavior]]
[subs="specialcharacters,macros"]
----
<drop behavior> ::= CASCADE | RESTRICT
----


=== 11.3 <table definition>

.Function

Define a persistent base table, a created local temporary table, or a global temporary table.
Format

[[table-definition]]
[subs="specialcharacters,macros"]
----
<table definition> ::=
       CREATE [ <<table-scope, <table scope> >> ] TABLE <<table-name, <table name> >>
         <<table-contents-source, <table contents source> >>
         [ ON COMMIT <<table-commit-action, <table commit action> >> ROWS ]
----

[[table-contents-source]]
[subs="specialcharacters,macros"]
----
<table contents source> ::=
         <<table-element-list, <table element list> >>
       | OF <<user-defined-type, <user-defined type> >>
           [ <<subtable-clause, <subtable clause> >> ]
           [ <<table-element-list, <table element list> >> ]
----

[[table-scope]]
[subs="specialcharacters,macros"]
----
<table scope> ::=
       <<global-or-local, <global or local> >> TEMPORARY
----

[[global-or-local]]
[subs="specialcharacters,macros"]
----
<global or local> ::=
         GLOBAL
       | LOCAL
----

[[table-commit-action]]
[subs="specialcharacters,macros"]
----
<table commit action> ::=
         PRESERVE
       | DELETE
----

[[table-element-list]]
[subs="specialcharacters,macros"]
----
<table element list> ::=
       <<left-paren, <left paren> >> <<table-element, <table element> >> [ { <<comma, <comma> >> <<table-element, <table element> >> }... ] <<right-paren, <right paren> >>
----

[[table-element]]
[subs="specialcharacters,macros"]
----
<table element> ::=
         <<column-definition, <column definition> >>
       | <<table-constraint-definition, <table constraint definition> >>
       | <<like-clause, <like clause> >>
       | <<self-referencing-column-specification, <self-referencing column specification> >>
       | <<column-options, <column options> >>
----

[[self-referencing-column-specification]]
[subs="specialcharacters,macros"]
----
<self-referencing column specification> ::=
       REF IS <<self-referencing-column-name, <self-referencing column name> >> <<reference-generation, <reference generation> >>
----

[[reference-generation]]
[subs="specialcharacters,macros"]
----
<reference generation> ::=
         SYSTEM GENERATED
       | USER GENERATED
       | DERIVED
----

[[self-referencing-column-name]]
[subs="specialcharacters,macros"]
----
<self-referencing column name> ::= <column name>
----

[[column-options]]
[subs="specialcharacters,macros"]
----
<column options> ::=
       <<column-name, <column name> >> WITH OPTIONS <<column-option-list, <column option list> >>
----

[[column-option-list]]
[subs="specialcharacters,macros"]
----
<column option list> ::=
       [ <<scope-clause, <scope clause> >> ]
       [ <<default-clause, <default clause> >> ]
       [ <<column-constraint-definition, <column constraint definition> >>... ]
       [ <<collate-clause, <collate clause> >> ]
----

[[subtable-clause]]
[subs="specialcharacters,macros"]
----
<subtable clause> ::=
       UNDER <<supertable-clause, <supertable clause> >>
----

[[supertable-clause]]
[subs="specialcharacters,macros"]
----
<supertable clause> ::= <supertable name>
----

[[supertable-name]]
[subs="specialcharacters,macros"]
----
<supertable name> ::= <table name>
----

[[like-clause]]
[subs="specialcharacters,macros"]
----
<like clause> ::= LIKE <table name>
----


=== 11.4 <column definition>

.Function

Define a column of a base table.
Format

[[column-definition]]
[subs="specialcharacters,macros"]
----
<column definition> ::=
       <<column-name, <column name> >>
       { <<data-type, <data type> >> | <<domain-name, <domain name> >> }
       [ <<reference-scope-check, <reference scope check> >> ]
       [ <<default-clause, <default clause> >> ]
       [ <<column-constraint-definition, <column constraint definition> >>... ]
       [ <<collate-clause, <collate clause> >> ]
----

[[column-constraint-definition]]
[subs="specialcharacters,macros"]
----
<column constraint definition> ::=
       [ <<constraint-name-definition, <constraint name definition> >> ]
       <<column-constraint, <column constraint> >> [ <<constraint-characteristics, <constraint characteristics> >> ]
----

[[column-constraint]]
[subs="specialcharacters,macros"]
----
<column constraint> ::=
         NOT NULL
       | <<unique-specification, <unique specification> >>
       | <<references-specification, <references specification> >>
       | <<check-constraint-definition, <check constraint definition> >>
----

[[reference-scope-check]]
[subs="specialcharacters,macros"]
----
<reference scope check> ::=
       REFERENCES ARE [ NOT ] CHECKED
         [ ON DELETE <<reference-scope-check-action, <reference scope check action> >> ]
----

[[reference-scope-check-action]]
[subs="specialcharacters,macros"]
----
<reference scope check action> ::=
       <<referential-action, <referential action> >>
----


=== 11.5 <default clause>

.Function

Specify the default for a column, domain, or attribute.
Format

[[default-clause]]
[subs="specialcharacters,macros"]
----
<default clause> ::=
       DEFAULT <<default-option, <default option> >>
----

[[default-option]]
[subs="specialcharacters,macros"]
----
<default option> ::=
         <<literal, <literal> >>
       | <<datetime-value-function, <datetime value function> >>
       | USER
       | CURRENT_USER
       | CURRENT_ROLE
       | SESSION_USER
       | SYSTEM_USER
       | CURRENT_PATH
       | <<implicitly-typed-value-specification, <implicitly typed value specification> >>
----


=== 11.6 <table constraint definition>

.Function

Specify an integrity constraint.
Format

[[table-constraint-definition]]
[subs="specialcharacters,macros"]
----
<table constraint definition> ::=
       [ <<constraint-name-definition, <constraint name definition> >> ]
       <<table-constraint, <table constraint> >> [ <<constraint-characteristics, <constraint characteristics> >> ]
----

[[table-constraint]]
[subs="specialcharacters,macros"]
----
<table constraint> ::=
         <<unique-constraint-definition, <unique constraint definition> >>
       | <<referential-constraint-definition, <referential constraint definition> >>
       | <<check-constraint-definition, <check constraint definition> >>
----


=== 11.7 <unique constraint definition>

.Function

Specify a uniqueness constraint for a table.
Format

[[unique-constraint-definition]]
[subs="specialcharacters,macros"]
----
<unique constraint definition> ::=
         <<unique-specification, <unique specification> >> <<left-paren, <left paren> >> <<unique-column-list, <unique column list> >> <<right-paren, <right paren> >>
       | UNIQUE ( VALUE )
----

[[unique-specification]]
[subs="specialcharacters,macros"]
----
<unique specification> ::=
         UNIQUE
       | PRIMARY KEY
----

[[unique-column-list]]
[subs="specialcharacters,macros"]
----
<unique column list> ::= <column name list>
----


=== 11.8 <referential constraint definition>

.Function

Specify a referential constraint.
Format

[[referential-constraint-definition]]
[subs="specialcharacters,macros"]
----
<referential constraint definition> ::=
       FOREIGN KEY <<left-paren, <left paren> >> <<referencing-columns, <referencing columns> >> <<right-paren, <right paren> >>
         <<references-specification, <references specification> >>
----

[[references-specification]]
[subs="specialcharacters,macros"]
----
<references specification> ::=
       REFERENCES <<referenced-table-and-columns, <referenced table and columns> >>
         [ MATCH <<match-type, <match type> >> ]
         [ <<referential-triggered-action, <referential triggered action> >> ]
----

[[match-type]]
[subs="specialcharacters,macros"]
----
<match type> ::=
         FULL
       | PARTIAL
       | SIMPLE
----

[[referencing-columns]]
[subs="specialcharacters,macros"]
----
<referencing columns> ::=
       <<reference-column-list, <reference column list> >>
----

[[referenced-table-and-columns]]
[subs="specialcharacters,macros"]
----
<referenced table and columns> ::=
       <<table-name, <table name> >> [ <<left-paren, <left paren> >> <<reference-column-list, <reference column list> >> <<right-paren, <right paren> >> ]
----

[[reference-column-list]]
[subs="specialcharacters,macros"]
----
<reference column list> ::= <column name list>
----

[[referential-triggered-action]]
[subs="specialcharacters,macros"]
----
<referential triggered action> ::=
         <<update-rule, <update rule> >> [ <<delete-rule, <delete rule> >> ]
       | <<delete-rule, <delete rule> >> [ <<update-rule, <update rule> >> ]
----

[[update-rule]]
[subs="specialcharacters,macros"]
----
<update rule> ::= ON UPDATE <referential action>
----

[[delete-rule]]
[subs="specialcharacters,macros"]
----
<delete rule> ::= ON DELETE <referential action>
----

[[referential-action]]
[subs="specialcharacters,macros"]
----
<referential action> ::=
         CASCADE
       | SET NULL
       | SET DEFAULT
       | RESTRICT
       | NO ACTION
----


=== 11.9 <check constraint definition>

.Function

Specify a condition for the SQL-data.
Format

[[check-constraint-definition]]
[subs="specialcharacters,macros"]
----
<check constraint definition> ::=
       CHECK <<left-paren, <left paren> >> <<search-condition, <search condition> >> <<right-paren, <right paren> >>
----


=== 11.10 <alter table statement>

.Function

Change the definition of a table.
Format

[[alter-table-statement]]
[subs="specialcharacters,macros"]
----
<alter table statement> ::=
       ALTER TABLE <<table-name, <table name> >> <<alter-table-action, <alter table action> >>
----

[[alter-table-action]]
[subs="specialcharacters,macros"]
----
<alter table action> ::=
         <<add-column-definition, <add column definition> >>
       | <<alter-column-definition, <alter column definition> >>
       | <<drop-column-definition, <drop column definition> >>
       | <<add-table-constraint-definition, <add table constraint definition> >>
       | <<drop-table-constraint-definition, <drop table constraint definition> >>
----


=== 11.11 <add column definition>

.Function

Add a column to a table.
Format

[[add-column-definition]]
[subs="specialcharacters,macros"]
----
<add column definition> ::=
       ADD [ COLUMN ] <<column-definition, <column definition> >>
----


=== 11.12 <alter column definition>

.Function

Change a column and its definition.
Format

[[alter-column-definition]]
[subs="specialcharacters,macros"]
----
<alter column definition> ::=
       ALTER [ COLUMN ] <<column-name, <column name> >> <<alter-column-action, <alter column action> >>
----

[[alter-column-action]]
[subs="specialcharacters,macros"]
----
<alter column action> ::=
         <<set-column-default-clause, <set column default clause> >>
       | <<drop-column-default-clause, <drop column default clause> >>
       | <<add-column-scope-clause, <add column scope clause> >>
       | <<drop-column-scope-clause, <drop column scope clause> >>
----


=== 11.13 <set column default clause>

.Function

Set the default clause for a column.
Format

[[set-column-default-clause]]
[subs="specialcharacters,macros"]
----
<set column default clause> ::=
       SET <<default-clause, <default clause> >>
----


=== 11.14 <drop column default clause>

.Function

Drop the default clause from a column.
Format

[[drop-column-default-clause]]
[subs="specialcharacters,macros"]
----
<drop column default clause> ::=
       DROP DEFAULT
----


=== 11.15 <add column scope clause>

.Function

Add a non-empty scope for an existing column of data type REF in a base table.
Format

[[add-column-scope-clause]]
[subs="specialcharacters,macros"]
----
<add column scope clause> ::=
       ADD <<scope-clause, <scope clause> >>
----


=== 11.16 <drop column scope clause>

.Function

Drop the scope from an existing column of data type REF in a base table.
Format

[[drop-column-scope-clause]]
[subs="specialcharacters,macros"]
----
<drop column scope clause> ::=
       DROP SCOPE <<drop-behavior, <drop behavior> >>
----


=== 11.17 <drop column definition>

.Function

Destroy a column of a base table.
Format

[[drop-column-definition]]
[subs="specialcharacters,macros"]
----
<drop column definition> ::=
       DROP [ COLUMN ] <<column-name, <column name> >> <<drop-behavior, <drop behavior> >>
----


=== 11.18 <add table constraint definition>

.Function

Add a constraint to a table.
Format

[[add-table-constraint-definition]]
[subs="specialcharacters,macros"]
----
<add table constraint definition> ::=
       ADD <<table-constraint-definition, <table constraint definition> >>
----


=== 11.19 <drop table constraint definition>

.Function

Destroy a constraint on a table.
Format

[[drop-table-constraint-definition]]
[subs="specialcharacters,macros"]
----
<drop table constraint definition> ::=
       DROP CONSTRAINT <<constraint-name, <constraint name> >> <<drop-behavior, <drop behavior> >>
----


=== 11.20 <drop table statement>

.Function

Destroy a table.
Format

[[drop-table-statement]]
[subs="specialcharacters,macros"]
----
<drop table statement> ::=
       DROP TABLE <<table-name, <table name> >> <<drop-behavior, <drop behavior> >>
----


=== 11.21 <view definition>

.Function

Define a viewed table.
Format

[[view-definition]]
[subs="specialcharacters,macros"]
----
<view definition> ::=
       CREATE [ RECURSIVE ] VIEW <<table-name, <table name> >>
         <<view-specification, <view specification> >>
         AS <<query-expression, <query expression> >>
         [ WITH [ <<levels-clause, <levels clause> >> ] CHECK OPTION ]
----

[[view-specification]]
[subs="specialcharacters,macros"]
----
<view specification> ::=
         <<regular-view-specification, <regular view specification> >>
       | <<referenceable-view-specification, <referenceable view specification> >>
----

[[regular-view-specification]]
[subs="specialcharacters,macros"]
----
<regular view specification> ::=
       [ <<left-paren, <left paren> >> <<view-column-list, <view column list> >> <<right-paren, <right paren> >> ]
----

[[referenceable-view-specification]]
[subs="specialcharacters,macros"]
----
<referenceable view specification> ::=
       OF <<user-defined-type, <user-defined type> >>
       [ <<subview-clause, <subview clause> >> ]
       [ <<view-element-list, <view element list> >> ]
----

[[subview-clause]]
[subs="specialcharacters,macros"]
----
<subview clause> ::= UNDER <table name>
----

[[view-element-list]]
[subs="specialcharacters,macros"]
----
<view element list> ::=
       <<left-paren, <left paren> >>
           [ <<self-referencing-column-specification, <self-referencing column specification> >> <<comma, <comma> >> ]
           <<view-element, <view element> >> [ { <<comma, <comma> >> <<view-element, <view element> >> }... ]
       <<right-paren, <right paren> >>
----

[[view-element]]
[subs="specialcharacters,macros"]
----
<view element> ::= <view column option>
----

[[view-column-option]]
[subs="specialcharacters,macros"]
----
<view column option> ::= <column name> WITH OPTIONS <scope clause>
----

[[levels-clause]]
[subs="specialcharacters,macros"]
----
<levels clause> ::=
         CASCADED
       | LOCAL
----

[[view-column-list]]
[subs="specialcharacters,macros"]
----
<view column list> ::= <column name list>
----


=== 11.22 <drop view statement>

.Function

Destroy a view.
Format

[[drop-view-statement]]
[subs="specialcharacters,macros"]
----
<drop view statement> ::=
       DROP VIEW <<table-name, <table name> >> <<drop-behavior, <drop behavior> >>
----


=== 11.23 <domain definition>

.Function

Define a domain.
Format

[[domain-definition]]
[subs="specialcharacters,macros"]
----
<domain definition> ::=
       CREATE DOMAIN <<domain-name, <domain name> >> [ AS ] <<data-type, <data type> >>
         [ <<default-clause, <default clause> >> ]
         [ <<domain-constraint, <domain constraint> >>... ]
         [ <<collate-clause, <collate clause> >> ]
----

[[domain-constraint]]
[subs="specialcharacters,macros"]
----
<domain constraint> ::=
       [ <<constraint-name-definition, <constraint name definition> >> ]
       <<check-constraint-definition, <check constraint definition> >> [ <<constraint-characteristics, <constraint characteristics> >> ]
----


=== 11.24 <alter domain statement>

.Function

Change a domain and its definition.
Format

[[alter-domain-statement]]
[subs="specialcharacters,macros"]
----
<alter domain statement> ::=
       ALTER DOMAIN <<domain-name, <domain name> >> <<alter-domain-action, <alter domain action> >>
----

[[alter-domain-action]]
[subs="specialcharacters,macros"]
----
<alter domain action> ::=
         <<set-domain-default-clause, <set domain default clause> >>
       | <<drop-domain-default-clause, <drop domain default clause> >>
       | <<add-domain-constraint-definition, <add domain constraint definition> >>
       | <<drop-domain-constraint-definition, <drop domain constraint definition> >>
----


=== 11.25 <set domain default clause>

.Function

Set the default value in a domain.
Format

[[set-domain-default-clause]]
[subs="specialcharacters,macros"]
----
<set domain default clause> ::= SET <default clause>
----


=== 11.26 <drop domain default clause>

.Function

Remove the default clause of a domain.
Format

[[drop-domain-default-clause]]
[subs="specialcharacters,macros"]
----
<drop domain default clause> ::= DROP DEFAULT
----


=== 11.27 <add domain constraint definition>

.Function

Add a constraint to a domain.
Format

[[add-domain-constraint-definition]]
[subs="specialcharacters,macros"]
----
<add domain constraint definition> ::=
       ADD <<domain-constraint, <domain constraint> >>
----


=== 11.28 <drop domain constraint definition>

.Function

Destroy a constraint on a domain.
Format

[[drop-domain-constraint-definition]]
[subs="specialcharacters,macros"]
----
<drop domain constraint definition> ::=
       DROP CONSTRAINT <<constraint-name, <constraint name> >>
----


=== 11.29 <drop domain statement>

.Function

Destroy a domain.
Format

[[drop-domain-statement]]
[subs="specialcharacters,macros"]
----
<drop domain statement> ::=
       DROP DOMAIN <<domain-name, <domain name> >> <<drop-behavior, <drop behavior> >>
----


=== 11.30 <character set definition>

.Function

Define a character set.
Format

[[character-set-definition]]
[subs="specialcharacters,macros"]
----
<character set definition> ::=
       CREATE CHARACTER SET <<character-set-name, <character set name> >> [ AS ]
         <<character-set-source, <character set source> >>
         [ <<collate-clause, <collate clause> >> ]
----

[[character-set-source]]
[subs="specialcharacters,macros"]
----
<character set source> ::=
         GET <<character-set-specification, <character set specification> >>
----


=== 11.31 <drop character set statement>

.Function

Destroy a character set.
Format

[[drop-character-set-statement]]
[subs="specialcharacters,macros"]
----
<drop character set statement> ::=
       DROP CHARACTER SET <<character-set-name, <character set name> >>
----


=== 11.32 <collation definition>

.Function

Define a collating sequence.
Format

[[collation-definition]]
[subs="specialcharacters,macros"]
----
<collation definition> ::=
       CREATE COLLATION <<collation-name, <collation name> >> FOR <<character-set-specification, <character set specification> >>
         FROM <<existing-collation-name, <existing collation name> >>
           [ <<pad-characteristic, <pad characteristic> >> ]
----

[[existing-collation-name]]
[subs="specialcharacters,macros"]
----
<existing collation name> ::= <collation name>
----

[[pad-characteristic]]
[subs="specialcharacters,macros"]
----
<pad characteristic> ::=
         NO PAD
       | PAD SPACE
----


=== 11.33 <drop collation statement>

.Function

Destroy a collating sequence.
Format

[[drop-collation-statement]]
[subs="specialcharacters,macros"]
----
<drop collation statement> ::=
       DROP COLLATION <<collation-name, <collation name> >>
         <<drop-behavior, <drop behavior> >>
----


=== 11.34 <translation definition>

.Function

Define a character translation.
Format

[[translation-definition]]
[subs="specialcharacters,macros"]
----
<translation definition> ::=
       CREATE TRANSLATION <<translation-name, <translation name> >>
         FOR <<source-character-set-specification, <source character set specification> >>
           TO <<target-character-set-specification, <target character set specification> >>
         FROM <<translation-source, <translation source> >>
----

[[source-character-set-specification]]
[subs="specialcharacters,macros"]
----
<source character set specification> ::= <character set specification>
----

[[target-character-set-specification]]
[subs="specialcharacters,macros"]
----
<target character set specification> ::= <character set specification>
----

[[translation-source]]
[subs="specialcharacters,macros"]
----
<translation source> ::=
         <<existing-translation-name, <existing translation name> >>
       | <<translation-routine, <translation routine> >>
----

[[existing-translation-name]]
[subs="specialcharacters,macros"]
----
<existing translation name> ::= <translation name>
----

[[translation-routine]]
[subs="specialcharacters,macros"]
----
<translation routine> ::= <specific routine designator>
----


=== 11.35 <drop translation statement>

.Function

Destroy a character translation.
Format

[[drop-translation-statement]]
[subs="specialcharacters,macros"]
----
<drop translation statement> ::=
       DROP TRANSLATION <<translation-name, <translation name> >>
----


=== 11.37 <drop assertion statement>

.Function

Destroy an assertion.
Format

[[drop-assertion-statement]]
[subs="specialcharacters,macros"]
----
<drop assertion statement> ::=
       DROP ASSERTION <<constraint-name, <constraint name> >>
----


=== 11.38 <trigger definition>

.Function

Define triggered SQL-statements.
Format

[[trigger-definition]]
[subs="specialcharacters,macros"]
----
<trigger definition> ::=
       CREATE TRIGGER <<trigger-name, <trigger name> >>
         <<trigger-action-time, <trigger action time> >> <<trigger-event, <trigger event> >>
         ON <<table-name, <table name> >>
           [ REFERENCING <<old-or-new-values-alias-list, <old or new values alias list> >> ]
         <<triggered-action, <triggered action> >>
----

[[trigger-action-time]]
[subs="specialcharacters,macros"]
----
<trigger action time> ::=
         BEFORE
       | AFTER
----

[[trigger-event]]
[subs="specialcharacters,macros"]
----
<trigger event> ::=
         INSERT
       | DELETE
       | UPDATE [ OF <<trigger-column-list, <trigger column list> >> ]
----

[[trigger-column-list]]
[subs="specialcharacters,macros"]
----
<trigger column list> ::= <column name list>
----

[[triggered-action]]
[subs="specialcharacters,macros"]
----
<triggered action> ::=
       [ FOR EACH { ROW | STATEMENT } ]
         [ WHEN <<left-paren, <left paren> >> <<search-condition, <search condition> >> <<right-paren, <right paren> >> ]
         <<triggered-SQL-statement, <triggered SQL statement> >>
----

[[triggered-SQL-statement]]
[subs="specialcharacters,macros"]
----
<triggered SQL statement> ::=
         <<SQL-procedure-statement, <SQL procedure statement> >>
       | BEGIN ATOMIC
           { <<SQL-procedure-statement, <SQL procedure statement> >> <<semicolon, <semicolon> >> }...
         END
----

[[old-or-new-values-alias-list]]
[subs="specialcharacters,macros"]
----
<old or new values alias list> ::=
       <<old-or-new-values-alias, <old or new values alias> >>...
----

[[old-or-new-values---alias]]
[subs="specialcharacters,macros"]
----
<old or new values   alias> ::=
         OLD [ ROW   ] [ AS ] <<old-values-correlation-name, <old values correlation name> >>
       | NEW [ ROW   ] [ AS ] <<new-values-correlation-name, <new values correlation name> >>
       | OLD TABLE   [ AS ] <<old-values-table-alias, <old values table alias> >>
       | NEW TABLE   [ AS ] <<new-values-table-alias, <new values table alias> >>
----

[[old-values-table-alias]]
[subs="specialcharacters,macros"]
----
<old values table alias> ::= <identifier>
----

[[new-values-table-alias]]
[subs="specialcharacters,macros"]
----
<new values table alias> ::= <identifier>
----

[[old-values-correlation-name]]
[subs="specialcharacters,macros"]
----
<old values correlation name> ::= <correlation name>
----

[[new-values-correlation-name]]
[subs="specialcharacters,macros"]
----
<new values correlation name> ::= <correlation name>
----


=== 11.39 <drop trigger statement>

.Function

Destroy a trigger.
Format

[[drop-trigger-statement]]
[subs="specialcharacters,macros"]
----
<drop trigger statement> ::= DROP TRIGGER <trigger name>
----


=== 11.40 <user-defined type definition>

.Function

Define a user-defined type.
Format

[[user-defined-type-definition]]
[subs="specialcharacters,macros"]
----
<user-defined type definition> ::= CREATE TYPE <user-defined type body>
----

[[user-defined-type-body]]
[subs="specialcharacters,macros"]
----
<user-defined type body> ::=
       <<user-defined-type-name, <user-defined type name> >>
       [ <<subtype-clause, <subtype clause> >> ]
       [ AS <<representation, <representation> >> ]
       [ <<instantiable-clause, <instantiable clause> >> ]
       <<finality, <finality> >>
       [ <<reference-type-specification, <reference type specification> >> ]
       [ <<cast-option, <cast option> >> ]
       [ <<method-specification-list, <method specification list> >> ]
----

[[subtype-clause]]
[subs="specialcharacters,macros"]
----
<subtype clause> ::=
       UNDER <<supertype-name, <supertype name> >>
----

[[supertype-name]]
[subs="specialcharacters,macros"]
----
<supertype name> ::=
       <<user-defined-type, <user-defined type> >>
----

[[representation]]
[subs="specialcharacters,macros"]
----
<representation> ::=
         <<predefined-type, <predefined type> >>
       | <<member-list, <member list> >>
----

[[member-list]]
[subs="specialcharacters,macros"]
----
<member list> ::=
       <<left-paren, <left paren> >> <<member, <member> >> [ { <<comma, <comma> >> <<member, <member> >> }... ] <<right-paren, <right paren> >>
----

[[member]]
[subs="specialcharacters,macros"]
----
<member> ::=
         <<attribute-definition, <attribute definition> >>
----

[[instantiable-clause]]
[subs="specialcharacters,macros"]
----
<instantiable clause> ::=
         INSTANTIABLE
       | NOT INSTANTIABLE
----

[[finality]]
[subs="specialcharacters,macros"]
----
<finality> ::=
         FINAL
       | NOT FINAL
----

[[reference-type-specification]]
[subs="specialcharacters,macros"]
----
<reference type specification> ::=
         <<user-defined-representation, <user-defined representation> >>
       | <<derived-representation, <derived representation> >>
       | <<system-generated-representation, <system-generated representation> >>
----

[[user-defined-representation]]
[subs="specialcharacters,macros"]
----
<user-defined representation> ::= REF USING <predefined type> [ <ref cast option> ]
----

[[derived-representation]]
[subs="specialcharacters,macros"]
----
<derived representation> ::= REF FROM <list of attributes>
----

[[system-generated-representation]]
[subs="specialcharacters,macros"]
----
<system-generated representation> ::= REF IS SYSTEM GENERATED
----

[[ref-cast-option]]
[subs="specialcharacters,macros"]
----
<ref cast option> ::=
       [ <<cast-to-ref, <cast to ref> >> ]
       [ <<cast-to-type, <cast to type> >> ]
----

[[cast-to-ref]]
[subs="specialcharacters,macros"]
----
<cast to ref> ::=
       CAST <<left-paren, <left paren> >> SOURCE AS REF <<right-paren, <right paren> >>
         WITH <<cast-to-ref-identifier, <cast to ref identifier> >>
----

[[cast-to-ref-identifier]]
[subs="specialcharacters,macros"]
----
<cast to ref identifier> ::= <identifier>
----

[[cast-to-type]]
[subs="specialcharacters,macros"]
----
<cast to type> ::=
       CAST <<left-paren, <left paren> >> REF AS SOURCE <<right-paren, <right paren> >>
         WITH <<cast-to-type-identifier, <cast to type identifier> >>
----

[[cast-to-type-identifier]]
[subs="specialcharacters,macros"]
----
<cast to type identifier> ::= <identifier>
----

[[list-of-attributes]]
[subs="specialcharacters,macros"]
----
<list of attributes> ::=
       <<left-paren, <left paren> >> <<attribute-name, <attribute name> >> [ { <<comma, <comma> >> <<attribute-name, <attribute name> >> }...] <<right-paren, <right paren> >>
----

[[cast-option]]
[subs="specialcharacters,macros"]
----
<cast option> ::=
       [ <<cast-to-distinct, <cast to distinct> >> ]
       [ <<cast-to-source, <cast to source> >> ]
----

[[cast-to-distinct]]
[subs="specialcharacters,macros"]
----
<cast to distinct> ::=
       CAST <<left-paren, <left paren> >> SOURCE AS DISTINCT <<right-paren, <right paren> >>
       WITH <<cast-to-distinct-identifier, <cast to distinct identifier> >>
----

[[cast-to-distinct-identifier]]
[subs="specialcharacters,macros"]
----
<cast to distinct identifier> ::= <identifier>
----

[[cast-to-source]]
[subs="specialcharacters,macros"]
----
<cast to source> ::=
       CAST <<left-paren, <left paren> >> DISTINCT AS SOURCE <<right-paren, <right paren> >>
       WITH <<cast-to-source-identifier, <cast to source identifier> >>
----

[[cast-to-source-identifier]]
[subs="specialcharacters,macros"]
----
<cast to source identifier> ::= <identifier>
----

[[method-specification-list]]
[subs="specialcharacters,macros"]
----
<method specification list> ::=
       <<method-specification, <method specification> >> [ { <<comma, <comma> >> <<method-specification, <method specification> >> }... ]
----

[[method-specification]]
[subs="specialcharacters,macros"]
----
<method specification> ::=
         <<original-method-specification, <original method specification> >>
       | <<overriding-method-specification, <overriding method specification> >>
----

[[original-method-specification]]
[subs="specialcharacters,macros"]
----
<original method specification> ::=
       <<partial-method-specification, <partial method specification> >>
       [ SELF AS RESULT ]
       [ SELF AS LOCATOR ]
       [ <<method-characteristics, <method characteristics> >> ]
----

[[overriding-method-specification]]
[subs="specialcharacters,macros"]
----
<overriding method specification> ::=
       OVERRIDING <<partial-method-specification, <partial method specification> >>
----

[[partial-method-specification]]
[subs="specialcharacters,macros"]
----
<partial method specification> ::=
       [ INSTANCE | STATIC ] METHOD <<method-name, <method name> >> <<SQL-parameter-declaration-list, <SQL parameter declaration list> >>
         <<returns-clause, <returns clause> >>
         [ SPECIFIC <<specific-name, <specific name> >> ]
----

[[method-characteristics]]
[subs="specialcharacters,macros"]
----
<method characteristics> ::=
       <<method-characteristic, <method characteristic> >>...
----

[[method-characteristic]]
[subs="specialcharacters,macros"]
----
<method characteristic> ::=
         <<language-clause, <language clause> >>
       | <<parameter-style-clause, <parameter style clause> >>
       | <<deterministic-characteristic, <deterministic characteristic> >>
       | <<SQL-data-access-indication, <SQL-data access indication> >>
       | <<null-call-clause, <null-call clause> >>
       | <<transform-group-specification, <transform group specification> >>
----


=== 11.42 <alter type statement>

.Function

Change the definition of a user-defined type.
Format

[[alter-type-statement]]
[subs="specialcharacters,macros"]
----
<alter type statement> ::=
       ALTER TYPE <<user-defined-type-name, <user-defined type name> >> <<alter-type-action, <alter type action> >>
----

[[alter-type-action]]
[subs="specialcharacters,macros"]
----
<alter type action> ::=
         <<add-attribute-definition, <add attribute definition> >>
       | <<drop-attribute-definition, <drop attribute definition> >>
       | <<add-original-method-specification, <add original method specification> >>
       | <<add-overriding-method-specification, <add overriding method specification> >>
       | <<drop-method-specification, <drop method specification> >>
----


=== 11.43 <add attribute definition>

.Function

Add an attribute to a user-defined type.
Format

[[add-attribute-definition]]
[subs="specialcharacters,macros"]
----
<add attribute definition> ::=
       ADD ATTRIBUTE <<attribute-definition, <attribute definition> >>
----

=== 11.44 <drop attribute definition>

.Function

Destroy an attribute of a user-defined type.
Format

[[drop-attribute-definition]]
[subs="specialcharacters,macros"]
----
<drop attribute definition> ::=
       DROP ATTRIBUTE <<attribute-name, <attribute name> >> RESTRICT
----


=== 11.45 <add original method specification>

.Function

Add an original method specification to a user-defined type.
Format

[[add-original-method-specification]]
[subs="specialcharacters,macros"]
----
<add original method specification> ::=
       ADD <<original-method-specification, <original method specification> >>
----


=== 11.46 <add overriding method specification>

.Function

Add an overriding method specification to a user-defined type.
Format

[[add-overriding-method-specification]]
[subs="specialcharacters,macros"]
----
<add overriding method specification> ::=
       ADD <<overriding-method-specification, <overriding method specification> >>
----


=== 11.47 <drop method specification>

.Function

Remove a method specification from a user-defined type.
Format

[[drop-method-specification]]
[subs="specialcharacters,macros"]
----
<drop method specification> ::=
       DROP <<specific-routine-designator, <specific routine designator> >> RESTRICT
----


=== 11.48 <drop data type statement>

.Function

Destroy a user-defined type.
Format

[[drop-data-type-statement]]
[subs="specialcharacters,macros"]
----
<drop data type statement> ::=
       DROP TYPE <<user-defined-type-name, <user-defined type name> >> <<drop-behavior, <drop behavior> >>
----


=== 11.49 <SQL-invoked routine>

.Function

Define an SQL-invoked routine.
Format

[[SQL-invoked-routine]]
[subs="specialcharacters,macros"]
----
<SQL-invoked routine> ::=
         <<schema-routine, <schema routine> >>
----

[[schema-routine]]
[subs="specialcharacters,macros"]
----
<schema routine> ::=
         <<schema-procedure, <schema procedure> >>
       | <<schema-function, <schema function> >>
----

[[schema-procedure]]
[subs="specialcharacters,macros"]
----
<schema procedure> ::=
       CREATE <<SQL-invoked-procedure, <SQL-invoked procedure> >>
----

[[schema-function]]
[subs="specialcharacters,macros"]
----
<schema function> ::=
       CREATE <<SQL-invoked-function, <SQL-invoked function> >>
----

[[SQL-invoked-procedure]]
[subs="specialcharacters,macros"]
----
<SQL-invoked procedure> ::=
       PROCEDURE <<schema-qualified-routine-name, <schema qualified routine name> >>
         <<SQL-parameter-declaration-list, <SQL parameter declaration list> >>
       <<routine-characteristics, <routine characteristics> >>
         <<routine-body, <routine body> >>
----

[[SQL-invoked-function]]
[subs="specialcharacters,macros"]
----
<SQL-invoked function> ::=
       { <<function-specification, <function specification> >> | <<method-specification-designator, <method specification designator> >> }
         <<routine-body, <routine body> >>
----

[[SQL-parameter-declaration-list]]
[subs="specialcharacters,macros"]
----
<SQL parameter declaration list> ::=
       <<left-paren, <left paren> >>
         [ <<SQL-parameter-declaration, <SQL parameter declaration> >> [ { <<comma, <comma> >> <<SQL-parameter-declaration, <SQL parameter declaration> >> }... ] ]
----

       <right paren>

[[SQL-parameter-declaration]]
[subs="specialcharacters,macros"]
----
<SQL parameter declaration> ::=
         [ <<parameter-mode, <parameter mode> >> ] [ <<SQL-parameter-name, <SQL parameter name> >> ]
         <<parameter-type, <parameter type> >>
         [ RESULT ]
----

[[parameter-mode]]
[subs="specialcharacters,macros"]
----
<parameter mode> ::=
         IN
       | OUT
       | INOUT
----

[[parameter-type]]
[subs="specialcharacters,macros"]
----
<parameter type> ::=
       <<data-type, <data type> >> [ <<locator-indication, <locator indication> >> ]
----

[[locator-indication]]
[subs="specialcharacters,macros"]
----
<locator indication> ::=
       AS LOCATOR
----

[[function-specification]]
[subs="specialcharacters,macros"]
----
<function specification> ::=
       FUNCTION <<schema-qualified-routine-name, <schema qualified routine name> >>
         <<SQL-parameter-declaration-list, <SQL parameter declaration list> >>
         <<returns-clause, <returns clause> >>
         <<routine-characteristics, <routine characteristics> >>
         [ <<dispatch-clause, <dispatch clause> >> ]
----

[[method-specification-designator]]
[subs="specialcharacters,macros"]
----
<method specification designator> ::=
       [ INSTANCE | STATIC ] METHOD <<method-name, <method name> >> <<SQL-parameter-declaration-list, <SQL parameter declaration list> >>
       [ <<returns-clause, <returns clause> >> ]
       FOR <<user-defined-type, <user-defined type> >>
----

[[routine-characteristics]]
[subs="specialcharacters,macros"]
----
<routine characteristics> ::=
       [ <<routine-characteristic, <routine characteristic> >>... ]
----

[[routine-characteristic]]
[subs="specialcharacters,macros"]
----
<routine characteristic> ::=
         <<language-clause, <language clause> >>
       | <<parameter-style-clause, <parameter style clause> >>
       | SPECIFIC <<specific-name, <specific name> >>
       | <<deterministic-characteristic, <deterministic characteristic> >>
       | <<SQL-data-access-indication, <SQL-data access indication> >>
       | <<null-call-clause, <null-call clause> >>
       | <<transform-group-specification, <transform group specification> >>
       | <<dynamic-result-sets-characteristic, <dynamic result sets characteristic> >>
----

[[dynamic-result-sets-characteristic]]
[subs="specialcharacters,macros"]
----
<dynamic result sets characteristic> ::=
       DYNAMIC RESULT SETS <<maximum-dynamic-result-sets, <maximum dynamic result sets> >>
----

[[parameter-style-clause]]
[subs="specialcharacters,macros"]
----
<parameter style clause> ::=
       PARAMETER STYLE <<parameter-style, <parameter style> >>
----

[[dispatch-clause]]
[subs="specialcharacters,macros"]
----
<dispatch clause> ::= STATIC DISPATCH
----

[[returns-clause]]
[subs="specialcharacters,macros"]
----
<returns clause> ::= RETURNS <returns data type> [ <result cast> ]
----

[[result-cast]]
[subs="specialcharacters,macros"]
----
<result cast> ::= CAST FROM <result cast from type>
----

[[result-cast-from-type]]
[subs="specialcharacters,macros"]
----
<result cast from type> ::=
         <<data-type, <data type> >> [ <<locator-indication, <locator indication> >> ]
----

[[returns-data-type]]
[subs="specialcharacters,macros"]
----
<returns data type> ::= <data type> [ <locator indication> ]
----

[[routine-body]]
[subs="specialcharacters,macros"]
----
<routine body> ::=
         <<SQL-routine-body, <SQL routine body> >>
       | <<external-body-reference, <external body reference> >>
----

[[SQL-routine-body]]
[subs="specialcharacters,macros"]
----
<SQL routine body> ::= <SQL procedure statement>
----

[[external-body-reference]]
[subs="specialcharacters,macros"]
----
<external body reference> ::=
       EXTERNAL [ NAME <<external-routine-name, <external routine name> >> ]
       [ <<parameter-style-clause, <parameter style clause> >> ]
       [ <<external-security-clause, <external security clause> >> ]
----

[[external-security-clause]]
[subs="specialcharacters,macros"]
----
<external security clause>   ::=
         EXTERNAL SECURITY   DEFINER
       | EXTERNAL SECURITY   INVOKER
       | EXTERNAL SECURITY   IMPLEMENTATION DEFINED
----

[[parameter-style]]
[subs="specialcharacters,macros"]
----
<parameter style> ::=
         SQL
       | GENERAL
----

[[deterministic-characteristic]]
[subs="specialcharacters,macros"]
----
<deterministic characteristic> ::=
         DETERMINISTIC
       | NOT DETERMINISTIC
----

[[SQL-data-access-indication]]
[subs="specialcharacters,macros"]
----
<SQL-data access indication> ::=
         NO SQL
       | CONTAINS SQL
       | READS SQL DATA
       | MODIFIES SQL DATA
----

[[null-call-clause]]
[subs="specialcharacters,macros"]
----
<null-call clause> ::=
         RETURNS NULL ON NULL INPUT
       | CALLED ON NULL INPUT
----

[[maximum-dynamic-result-sets]]
[subs="specialcharacters,macros"]
----
<maximum dynamic result sets> ::= <unsigned integer>
----

[[transform-group-specification]]
[subs="specialcharacters,macros"]
----
<transform group specification> ::=
       TRANSFORM GROUP
           { <<single-group-specification, <single group specification> >> | <<multiple-group-specification, <multiple group specification> >> }
----

[[single-group-specification]]
[subs="specialcharacters,macros"]
----
<single group specification> ::=
       <<group-name, <group name> >>
----

[[multiple-group-specification]]
[subs="specialcharacters,macros"]
----
<multiple group specification> ::=
       <<group-specification, <group specification> >> [ { <<comma, <comma> >> <<group-specification, <group specification> >> }... ]
----

[[group-specification]]
[subs="specialcharacters,macros"]
----
<group specification> ::=
       <<group-name, <group name> >> FOR TYPE <<user-defined-type, <user-defined type> >>
----


=== 11.50 <alter routine statement>

.Function

Alter a characteristic of an SQL-invoked routine.
Format

[[alter-routine-statement]]
[subs="specialcharacters,macros"]
----
<alter routine statement> ::=
       ALTER <<specific-routine-designator, <specific routine designator> >>
         <<alter-routine-characteristics, <alter routine characteristics> >> <<alter-routine-behaviour, <alter routine behaviour> >>
----

[[alter-routine-characteristics]]
[subs="specialcharacters,macros"]
----
<alter routine characteristics> ::=
       <<alter-routine-characteristic, <alter routine characteristic> >>...
----

[[alter-routine-characteristic]]
[subs="specialcharacters,macros"]
----
<alter routine characteristic> ::=
         <<language-clause, <language clause> >>
       | <<parameter-style-clause, <parameter style clause> >>
       | <<SQL-data-access-indication, <SQL-data access indication> >>
       | <<null-call-clause, <null-call clause> >>
       | <<dynamic-result-sets-characteristic, <dynamic result sets characteristic> >>
       | NAME <<external-routine-name, <external routine name> >>
----

[[alter-routine-behaviour]]
[subs="specialcharacters,macros"]
----
<alter routine behaviour> ::=
       RESTRICT
----


=== 11.51 <drop routine statement>

.Function

Destroy an SQL-invoked routine.
Format

[[drop-routine-statement]]
[subs="specialcharacters,macros"]
----
<drop routine statement> ::=
       DROP <<specific-routine-designator, <specific routine designator> >> <<drop-behavior, <drop behavior> >>
----


=== 11.53 <drop user-defined cast statement>

.Function

Destroy a user-defined cast.
Format

[[drop-user-defined-cast-statement]]
[subs="specialcharacters,macros"]
----
<drop user-defined cast statement> ::=
       DROP CAST <<left-paren, <left paren> >> <<source-data-type, <source data type> >> AS <<target-data-type, <target data type> >> <<right-paren, <right paren> >>
           <<drop-behavior, <drop behavior> >>
----


=== 11.54 <user-defined ordering definition>

.Function

Define a user-defined ordering for a user-defined type.
Format

[[user-defined-ordering-definition]]
[subs="specialcharacters,macros"]
----
<user-defined ordering definition> ::=
       CREATE ORDERING FOR <<user-defined-type, <user-defined type> >> <<ordering-form, <ordering form> >>
----

[[ordering-form]]
[subs="specialcharacters,macros"]
----
<ordering form> ::=
         <<equals-ordering-form, <equals ordering form> >>
       | <<full-ordering-form, <full ordering form> >>
----

[[equals-ordering-form]]
[subs="specialcharacters,macros"]
----
<equals ordering form> ::=
       EQUALS ONLY BY <<ordering-category, <ordering category> >>
----

[[full-ordering-form]]
[subs="specialcharacters,macros"]
----
<full ordering form> ::=
       ORDER FULL BY <<ordering-category, <ordering category> >>
----

[[ordering-category]]
[subs="specialcharacters,macros"]
----
<ordering category> ::=
         <<relative-category, <relative category> >>
       | <<map-category, <map category> >>
       | <<state-category, <state category> >>
----

[[relative-category]]
[subs="specialcharacters,macros"]
----
<relative category> ::=
       RELATIVE WITH <<relative-function-specification, <relative function specification> >>
----

[[map-category]]
[subs="specialcharacters,macros"]
----
<map category> ::=
       MAP WITH <<map-function-specification, <map function specification> >>
----

[[state-category]]
[subs="specialcharacters,macros"]
----
<state category> ::=
       STATE [ <<specific-name, <specific name> >> ]
----

[[relative-function-specification]]
[subs="specialcharacters,macros"]
----
<relative function specification> ::= <specific routine designator>
----

[[map-function-specification]]
[subs="specialcharacters,macros"]
----
<map function specification> ::= <specific routine designator>
----


=== 11.55 <drop user-defined ordering statement>

.Function

Destroy a user-defined ordering method.
Format

[[drop-user-defined-ordering-statement]]
[subs="specialcharacters,macros"]
----
<drop user-defined ordering statement> ::=
       DROP ORDERING FOR <<user-defined-type, <user-defined type> >> <<drop-behavior, <drop behavior> >>
----


=== 11.56 <transform definition>

.Function

Define one or more transform functions for a user-defined type.
Format

[[transform-definition]]
[subs="specialcharacters,macros"]
----
<transform definition> ::=
       CREATE { TRANSFORM | TRANSFORMS } FOR <<user-defined-type, <user-defined type> >> <<transform-group, <transform group> >>...
----

[[transform-group]]
[subs="specialcharacters,macros"]
----
<transform group> ::=
       <<group-name, <group name> >> <<left-paren, <left paren> >> <<transform-element-list, <transform element list> >> <<right-paren, <right paren> >>
----

[[group-name]]
[subs="specialcharacters,macros"]
----
<group name> ::=
         <<identifier, <identifier> >>
----

[[transform-element-list]]
[subs="specialcharacters,macros"]
----
<transform element list> ::=
       <<transform-element, <transform element> >> [ <<comma, <comma> >> <<transform-element, <transform element> >> ]
----

[[transform-element]]
[subs="specialcharacters,macros"]
----
<transform element> ::=
         <<to-sql, <to sql> >>
       | <<from-sql, <from sql> >>
----

[[to-sql]]
[subs="specialcharacters,macros"]
----
<to sql> ::=
       TO SQL WITH <<to-sql-function, <to sql function> >>
----

[[from-sql]]
[subs="specialcharacters,macros"]
----
<from sql> ::=
       FROM SQL WITH <<from-sql-function, <from sql function> >>
----

[[to-sql-function]]
[subs="specialcharacters,macros"]
----
<to sql function> ::=
       <<specific-routine-designator, <specific routine designator> >>
----

[[from-sql-function]]
[subs="specialcharacters,macros"]
----
<from sql function> ::=
       <<specific-routine-designator, <specific routine designator> >>
----


=== 11.57 <drop transform statement>

.Function

Remove one or more transform functions associated with a transform.
Format

[[drop-transform-statement]]
[subs="specialcharacters,macros"]
----
<drop transform statement> ::=
       DROP { TRANSFORM | TRANSFORMS } <<transforms-to-be-dropped, <transforms to be dropped> >>
         FOR <<user-defined-type, <user-defined type> >> <<drop-behavior, <drop behavior> >>
----

[[transforms-to-be-dropped]]
[subs="specialcharacters,macros"]
----
<transforms to be dropped> ::=
         ALL
       | <<transform-group-element, <transform group element> >>
----

[[transform-group-element]]
[subs="specialcharacters,macros"]
----
<transform group element> ::=
       <<group-name, <group name> >>
----


== 12 Access control


=== 12.1 <grant statement>

.Function

Define privileges and role authorizations.
Format

[[grant-statement]]
[subs="specialcharacters,macros"]
----
<grant statement> ::=
         <<grant-privilege-statement, <grant privilege statement> >>
       | <<grant-role-statement, <grant role statement> >>
----


=== 12.2 <grant privilege statement>

.Function

Define privileges.
Format

[[grant-privilege-statement]]
[subs="specialcharacters,macros"]
----
<grant privilege statement> ::=
       GRANT <<privileges, <privileges> >>
         TO <<grantee, <grantee> >> [ { <<comma, <comma> >> <<grantee, <grantee> >> }... ]
           [ WITH HIERARCHY OPTION ]
           [ WITH GRANT OPTION ]
           [ GRANTED BY <<grantor, <grantor> >> ]
----


=== 12.3 <role definition>

.Function

Define a role.
Format

[[role-definition]]
[subs="specialcharacters,macros"]
----
<role definition> ::=
       CREATE ROLE <<role-name, <role name> >>
         [ WITH ADMIN <<grantor, <grantor> >> ]
----


=== 12.4 <grant role statement>

.Function

Define role authorizations.
Format

[[grant-role-statement]]
[subs="specialcharacters,macros"]
----
<grant role statement> ::=
       GRANT <<role-granted, <role granted> >> [ { <<comma, <comma> >> <<role-granted, <role granted> >> }... ]
         TO <<grantee, <grantee> >> [ { <<comma, <comma> >> <<grantee, <grantee> >> }... ]
           [ WITH ADMIN OPTION ]
           [ GRANTED BY <<grantor, <grantor> >> ]
----

[[role-granted]]
[subs="specialcharacters,macros"]
----
<role granted> ::= <role name>
----


=== 12.5 <drop role statement>

.Function

Destroy a role.
Format

[[drop-role-statement]]
[subs="specialcharacters,macros"]
----
<drop role statement> ::= DROP ROLE <role name>
----


=== 12.6 <revoke statement>

.Function

Destroy privileges and role authorizations.
Format

[[revoke-statement]]
[subs="specialcharacters,macros"]
----
<revoke statement> ::=
         <<revoke-privilege-statement, <revoke privilege statement> >>
       | <<revoke-role-statement, <revoke role statement> >>
----

[[revoke-privilege-statement]]
[subs="specialcharacters,macros"]
----
<revoke privilege statement> ::=
       REVOKE [ <<revoke-option-extension, <revoke option extension> >> ] <<privileges, <privileges> >>
         FROM <<grantee, <grantee> >> [ { <<comma, <comma> >> <<grantee, <grantee> >> }... ]
           [ GRANTED BY <<grantor, <grantor> >> ]
           <<drop-behavior, <drop behavior> >>
----

[[revoke-option-extension]]
[subs="specialcharacters,macros"]
----
<revoke option extension> ::=
         GRANT OPTION FOR
       | HIERARCHY OPTION FOR
----

[[revoke-role-statement]]
[subs="specialcharacters,macros"]
----
<revoke role statement> ::=
       REVOKE [ ADMIN OPTION FOR ]
         <<role-revoked, <role revoked> >> [ { <<comma, <comma> >> <<role-revoked, <role revoked> >> }... ]
         FROM <<grantee, <grantee> >> [ { <<comma, <comma> >> <<grantee, <grantee> >> }... ]
           [ GRANTED BY <<grantor, <grantor> >> ]
           <<drop-behavior, <drop behavior> >>
----

[[role-revoked]]
[subs="specialcharacters,macros"]
----
<role revoked> ::= <role name>
----


== 13 SQL-client modules


=== 13.1 <SQL-client module definition>

.Function

Define an SQL-client module.
Format

[[SQL-client-module-definition]]
[subs="specialcharacters,macros"]
----
<SQL-client module definition> ::=
       <<module-name-clause, <module name clause> >>
       <<language-clause, <language clause> >>
       <<module-authorization-clause, <module authorization clause> >>
       [ <<module-path-specification, <module path specification> >> ]
       [ <<module-transform-group-specification, <module transform group specification> >> ]
       [ <<temporary-table-declaration, <temporary table declaration> >> ]
       <<module-contents, <module contents> >>...
----

[[module-authorization-clause]]
[subs="specialcharacters,macros"]
----
<module authorization clause> ::=
         SCHEMA <<schema-name, <schema name> >>
       | AUTHORIZATION <<module-authorization-identifier, <module authorization identifier> >>
       | SCHEMA <<schema-name, <schema name> >> AUTHORIZATION <<module-authorization-identifier, <module authorization identifier> >>
----

[[module-authorization-identifier]]
[subs="specialcharacters,macros"]
----
<module authorization identifier> ::=
       <<authorization-identifier, <authorization identifier> >>
----

[[module-path-specification]]
[subs="specialcharacters,macros"]
----
<module path specification> ::=
       <<path-specification, <path specification> >>
----

[[module-transform-group-specification]]
[subs="specialcharacters,macros"]
----
<module transform group specification> ::=
       <<transform-group-specification, <transform group specification> >>
----

[[module-contents]]
[subs="specialcharacters,macros"]
----
<module contents> ::=
         <<declare-cursor, <declare cursor> >>
       | <<externally-invoked-procedure, <externally-invoked procedure> >>
----


=== 13.2 <module name clause>

.Function

Name an SQL-client module.
Format

[[module-name-clause]]
[subs="specialcharacters,macros"]
----
<module name clause> ::=
       MODULE [ <<SQL-client-module-name, <SQL-client module name> >> ]
       [ <<module-character-set-specification, <module character set specification> >> ]
----

[[module-character-set-specification]]
[subs="specialcharacters,macros"]
----
<module character set specification> ::=
       NAMES ARE <<character-set-specification, <character set specification> >>
----


=== 13.3 <externally-invoked procedure>

.Function

Define an externally-invoked procedure.
Format

[[externally-invoked-procedure]]
[subs="specialcharacters,macros"]
----
<externally-invoked procedure> ::=
       PROCEDURE <<procedure-name, <procedure name> >> <<host-parameter-declaration-setup, <host parameter declaration setup> >> <<semicolon, <semicolon> >>
         <<SQL-procedure-statement, <SQL procedure statement> >> <<semicolon, <semicolon> >>
----

[[host-parameter-declaration-setup]]
[subs="specialcharacters,macros"]
----
<host parameter declaration setup> ::=
         <<host-parameter-declaration-list, <host parameter declaration list> >>
       | <<host-parameter-declaration, <host parameter declaration> >>...
----

[[host-parameter-declaration-list]]
[subs="specialcharacters,macros"]
----
<host parameter declaration list> ::=
         <<left-paren, <left paren> >> <<host-parameter-declaration, <host parameter declaration> >>
             [ { <<comma, <comma> >> <<host-parameter-declaration, <host parameter declaration> >> }... ] <<right-paren, <right paren> >>
----

[[host-parameter-declaration]]
[subs="specialcharacters,macros"]
----
<host parameter declaration> ::=
         <<host-parameter-name, <host parameter name> >> <<host-parameter-data-type, <host parameter data type> >>
       | <<status-parameter, <status parameter> >>
----

[[host-parameter-data-type]]
[subs="specialcharacters,macros"]
----
<host parameter data type> ::=
       <<data-type, <data type> >> [ <<locator-indication, <locator indication> >> ]
----

[[status-parameter]]
[subs="specialcharacters,macros"]
----
<status parameter> ::=
         SQLSTATE
----


=== 13.5 <SQL procedure statement>

.Function

Define all of the SQL-statements that are <SQL procedure statement>s.
Format

[[SQL-procedure-statement]]
[subs="specialcharacters,macros"]
----
<SQL procedure statement> ::=
         <<SQL-executable-statement, <SQL executable statement> >>
----

[[SQL-executable-statement]]
[subs="specialcharacters,macros"]
----
<SQL executable statement> ::=
         <<SQL-schema-statement, <SQL schema statement> >>
       | <<SQL-data-statement, <SQL data statement> >>
       | <<SQL-control-statement, <SQL control statement> >>
       | <<SQL-transaction-statement, <SQL transaction statement> >>
       | <<SQL-connection-statement, <SQL connection statement> >>
       | <<SQL-session-statement, <SQL session statement> >>
       | <<SQL-diagnostics-statement, <SQL diagnostics statement> >>
----

[[SQL-schema-statement]]
[subs="specialcharacters,macros"]
----
<SQL schema statement> ::=
         <<SQL-schema-definition-statement, <SQL schema definition statement> >>
       | <<SQL-schema-manipulation-statement, <SQL schema manipulation statement> >>
----

[[SQL-schema-definition-statement]]
[subs="specialcharacters,macros"]
----
<SQL schema definition statement> ::=
         <<schema-definition, <schema definition> >>
       | <<table-definition, <table definition> >>
       | <<view-definition, <view definition> >>
       | <<SQL-invoked-routine, <SQL-invoked routine> >>
       | <<grant-statement, <grant statement> >>
       | <<role-definition, <role definition> >>
       | <<grant-role-statement, <grant role statement> >>
       | <<domain-definition, <domain definition> >>
       | <<character-set-definition, <character set definition> >>
       | <<collation-definition, <collation definition> >>
       | <<translation-definition, <translation definition> >>
       | <<assertion-definition, <assertion definition> >>
       | <<trigger-definition, <trigger definition> >>
       | <<user-defined-type-definition, <user-defined type definition> >>
       | <<user-defined-cast-definition, <user-defined cast definition> >>
       | <<user-defined-ordering-definition, <user-defined ordering definition> >>
       | <<transform-definition, <transform definition> >>
----

[[SQL-schema-manipulation-statement]]
[subs="specialcharacters,macros"]
----
<SQL schema manipulation statement> ::=
         <<drop-schema-statement, <drop schema statement> >>
       | <<alter-table-statement, <alter table statement> >>
       | <<drop-table-statement, <drop table statement> >>
       | <<drop-view-statement, <drop view statement> >>
       | <<alter-routine-statement, <alter routine statement> >>
       | <<drop-routine-statement, <drop routine statement> >>
       | <<drop-user-defined-cast-statement, <drop user-defined cast statement> >>
       | <<revoke-statement, <revoke statement> >>
       | <<drop-role-statement, <drop role statement> >>
       | <<alter-domain-statement, <alter domain statement> >>
       | <<drop-domain-statement, <drop domain statement> >>
       | <<drop-character-set-statement, <drop character set statement> >>
       | <<drop-collation-statement, <drop collation statement> >>
       | <<drop-translation-statement, <drop translation statement> >>
       | <<drop-assertion-statement, <drop assertion statement> >>
       | <<drop-trigger-statement, <drop trigger statement> >>
       | <<alter-type-statement, <alter type statement> >>
       | <<drop-data-type-statement, <drop data type statement> >>
       | <<drop-user-defined-ordering-statement, <drop user-defined ordering statement> >> | <<drop-transform-statement, <drop transform statement> >>
----

[[SQL-data-statement]]
[subs="specialcharacters,macros"]
----
<SQL data statement> ::=
         <<open-statement, <open statement> >>
       | <<fetch-statement, <fetch statement> >>
       | <<close-statement, <close statement> >>
       | <<select-statement:-single-row, <select statement: single row> >>
       | <<free-locator-statement, <free locator statement> >>
       | <<hold-locator-statement, <hold locator statement> >>
       | <<SQL-data-change-statement, <SQL data change statement> >>
----

[[SQL-data-change---statement]]
[subs="specialcharacters,macros"]
----
<SQL data change   statement>   ::=
         <<delete---statement:---positioned, <delete   statement:   positioned> >>
       | <<delete---statement:---searched, <delete   statement:   searched> >>
       | <<insert---statement, <insert   statement> >>
       | <<update---statement:---positioned, <update   statement:   positioned> >>
       | <<update---statement:---searched, <update   statement:   searched> >>
----

[[SQL-control-statement]]
[subs="specialcharacters,macros"]
----
<SQL control statement> ::=
         <<call-statement, <call statement> >>
       | <<return-statement, <return statement> >>
----

[[SQL-transaction-statement]]
[subs="specialcharacters,macros"]
----
<SQL transaction statement> ::=
         <<start-transaction-statement, <start transaction statement> >>
       | <<set-transaction-statement, <set transaction statement> >>
       | <<set-constraints-mode-statement, <set constraints mode statement> >>
       | <<savepoint-statement, <savepoint statement> >>
       | <<release-savepoint-statement, <release savepoint statement> >>
       | <<commit-statement, <commit statement> >>
       | <<rollback-statement, <rollback statement> >>
----

[[SQL-connection-statement]]
[subs="specialcharacters,macros"]
----
<SQL connection statement> ::=
         <<connect-statement, <connect statement> >>
       | <<set-connection-statement, <set connection statement> >>
       | <<disconnect-statement, <disconnect statement> >>
----

[[SQL-session-statement]]
[subs="specialcharacters,macros"]
----
<SQL session statement> ::=
         <<set-session-user-identifier-statement, <set session user identifier statement> >>
       | <<set-role-statement, <set role statement> >>
       | <<set-local-time-zone-statement, <set local time zone statement> >>
       | <<set-session-characteristics-statement, <set session characteristics statement> >>
----

[[SQL-diagnostics-statement]]
[subs="specialcharacters,macros"]
----
<SQL diagnostics statement> ::=
       <<get-diagnostics-statement, <get diagnostics statement> >>
----


== 14 Data manipulation


=== 14.1 <declare cursor>

.Function

Define a cursor.
Format

[[declare-cursor]]
[subs="specialcharacters,macros"]
----
<declare cursor> ::=
       DECLARE <<cursor-name, <cursor name> >> [ <<cursor-sensitivity, <cursor sensitivity> >> ]
         [ <<cursor-scrollability, <cursor scrollability> >> ] CURSOR
         [ <<cursor-holdability, <cursor holdability> >> ]
         [ <<cursor-returnability, <cursor returnability> >> ]
         FOR <<cursor-specification, <cursor specification> >>
----

[[cursor-sensitivity]]
[subs="specialcharacters,macros"]
----
<cursor sensitivity> ::=
         SENSITIVE
       | INSENSITIVE
       | ASENSITIVE
----

[[cursor-scrollability]]
[subs="specialcharacters,macros"]
----
<cursor scrollability> ::=
         SCROLL
       | NO SCROLL
----

[[cursor-holdability]]
[subs="specialcharacters,macros"]
----
<cursor holdability> ::=
         WITH HOLD
       | WITHOUT HOLD
----

[[cursor-returnability]]
[subs="specialcharacters,macros"]
----
<cursor returnability> ::=
         WITH RETURN
       | WITHOUT RETURN
----

[[cursor-specification]]
[subs="specialcharacters,macros"]
----
<cursor specification> ::=
       <<query-expression, <query expression> >> [ <<order-by-clause, <order by clause> >> ]
         [ <<updatability-clause, <updatability clause> >> ]
----

[[updatability-clause]]
[subs="specialcharacters,macros"]
----
<updatability clause> ::=
       FOR { READ ONLY | UPDATE [ OF <<column-name-list, <column name list> >> ] }
----

[[order-by-clause]]
[subs="specialcharacters,macros"]
----
<order by clause> ::=
       ORDER BY <<sort-specification-list, <sort specification list> >>
----

[[sort-specification-list]]
[subs="specialcharacters,macros"]
----
<sort specification list> ::=
       <<sort-specification, <sort specification> >> [ { <<comma, <comma> >> <<sort-specification, <sort specification> >> }... ]
----

[[sort-specification]]
[subs="specialcharacters,macros"]
----
<sort specification> ::=
       <<sort-key, <sort key> >> [ <<collate-clause, <collate clause> >> ] [ <<ordering-specification, <ordering specification> >> ]
----

[[sort-key]]
[subs="specialcharacters,macros"]
----
<sort key> ::=
       <<value-expression, <value expression> >>
----

[[ordering-specification]]
[subs="specialcharacters,macros"]
----
<ordering specification> ::= ASC | DESC
----


=== 14.2 <open statement>

.Function

Open a cursor.
Format

[[open-statement]]
[subs="specialcharacters,macros"]
----
<open statement> ::=
       OPEN <<cursor-name, <cursor name> >>
----


=== 14.3 <fetch statement>

.Function

Position a cursor on a specified row of a table and retrieve values from that row.
Format

[[fetch-statement]]
[subs="specialcharacters,macros"]
----
<fetch statement> ::=
       FETCH [ [ <<fetch-orientation, <fetch orientation> >> ] FROM ]
         <<cursor-name, <cursor name> >> INTO <<fetch-target-list, <fetch target list> >>
----

[[fetch-orientation]]
[subs="specialcharacters,macros"]
----
<fetch orientation> ::=
         NEXT
       | PRIOR
       | FIRST
       | LAST
       | { ABSOLUTE | RELATIVE } <<simple-value-specification, <simple value specification> >>
----

[[fetch-target-list]]
[subs="specialcharacters,macros"]
----
<fetch target list> ::=
       <<target-specification, <target specification> >> [ { <<comma, <comma> >> <<target-specification, <target specification> >> }... ]
----


=== 14.4 <close statement>

.Function

Close a cursor.
Format

[[close-statement]]
[subs="specialcharacters,macros"]
----
<close statement> ::=
       CLOSE <<cursor-name, <cursor name> >>
----


=== 14.5 <select statement: single row>

.Function

Retrieve values from a specified row of a table.
Format

[[select-statement:-single-row]]
[subs="specialcharacters,macros"]
----
<select statement: single row> ::=
       SELECT [ <<set-quantifier, <set quantifier> >> ] <<select-list, <select list> >>
         INTO <<select-target-list, <select target list> >>
           <<table-expression, <table expression> >>
----

[[select-target-list]]
[subs="specialcharacters,macros"]
----
<select target list> ::=
       <<target-specification, <target specification> >> [ { <<comma, <comma> >> <<target-specification, <target specification> >> }... ]
----


=== 14.7 <delete statement: searched>

.Function

Delete rows of a table.
Format

[[delete-statement:-searched]]
[subs="specialcharacters,macros"]
----
<delete statement: searched> ::=
       DELETE FROM <<target-table, <target table> >>
         [ WHERE <<search-condition, <search condition> >> ]
----


=== 14.8 <insert statement>

.Function

Create new rows in a table.
Format

[[insert-statement]]
[subs="specialcharacters,macros"]
----
<insert statement> ::=
       INSERT INTO <<insertion-target, <insertion target> >>
         <<insert-columns-and-source, <insert columns and source> >>
----

[[insertion-target]]
[subs="specialcharacters,macros"]
----
<insertion target> ::=
       <<table-name, <table name> >>
----

[[insert-columns-and-source]]
[subs="specialcharacters,macros"]
----
<insert columns and source> ::=
         <<from-subquery, <from subquery> >>
       | <<from-constructor, <from constructor> >>
       | <<from-default, <from default> >>
----

[[from-subquery]]
[subs="specialcharacters,macros"]
----
<from subquery> ::=
       [ <<left-paren, <left paren> >> <<insert-column-list, <insert column list> >> <<right-paren, <right paren> >> ]
         [ override clause> ]
         <<query-expression, <query expression> >>
----

[[from-constructor]]
[subs="specialcharacters,macros"]
----
<from constructor> ::=
       [ <<left-paren, <left paren> >> <<insert-column-list, <insert column list> >> <<right-paren, <right paren> >> ]
         [ <<override-clause, <override clause> >> ]
         <<contextually-typed-table-value-constructor, <contextually typed table value constructor> >>
----

[[override-clause]]
[subs="specialcharacters,macros"]
----
<override clause> ::=
         OVERRIDING USER VALUE
       | OVERRIDING SYSTEM VALUE
----

[[from-default]]
[subs="specialcharacters,macros"]
----
<from default> ::=
       DEFAULT VALUES
----

[[insert-column-list]]
[subs="specialcharacters,macros"]
----
<insert column list> ::= <column name list>
----


=== 14.9 <update statement: positioned>

.Function

Update a row of a table.
Format

[[update-statement:-positioned]]
[subs="specialcharacters,macros"]
----
<update statement: positioned> ::=
       UPDATE <<target-table, <target table> >>
         SET <<set-clause-list, <set clause list> >>
           WHERE CURRENT OF <<cursor-name, <cursor name> >>
----

[[set-clause-list]]
[subs="specialcharacters,macros"]
----
<set clause list> ::=
       <<set-clause, <set clause> >> [ { <<comma, <comma> >> <<set-clause, <set clause> >> }... ]
----

[[set-clause]]
[subs="specialcharacters,macros"]
----
<set clause> ::=
         <<update-target, <update target> >> <<equals-operator, <equals operator> >> <<update-source, <update source> >>
       | <<mutated-set-clause, <mutated set clause> >> <<equals-operator, <equals operator> >> <<update-source, <update source> >>
----

[[update-target]]
[subs="specialcharacters,macros"]
----
<update target> ::=
         <<object-column, <object column> >>
       | ROW
       | <<object-column, <object column> >>
           <<left-bracket-or-trigraph, <left bracket or trigraph> >> <<simple-value-specification, <simple value specification> >> <<right-bracket-or-trigraph, <right bracket or trigraph> >>
----


[[object-column]]
[subs="specialcharacters,macros"]
----
<object column> ::= <column name>
----

[[mutated-set-clause]]
[subs="specialcharacters,macros"]
----
<mutated set clause> ::=
       <<mutated-target, <mutated target> >> <<period, <period> >> <<method-name, <method name> >>
----

[[mutated-target]]
[subs="specialcharacters,macros"]
----
<mutated target> ::=
         <<object-column, <object column> >>
       | <<mutated-set-clause, <mutated set clause> >>
----

[[update-source]]
[subs="specialcharacters,macros"]
----
<update source> ::=
         <<value-expression, <value expression> >>
       | <<contextually-typed-value-specification, <contextually typed value specification> >>
----


=== 14.10 <update statement: searched>

.Function

Update rows of a table.
Format

[[update-statement:-searched]]
[subs="specialcharacters,macros"]
----
<update statement: searched> ::=
       UPDATE <<target-table, <target table> >>
         SET <<set-clause-list, <set clause list> >>
         [ WHERE <<search-condition, <search condition> >> ]
----


=== 14.11 <temporary table declaration>

.Function

Declare a declared local temporary table.
Format

[[temporary-table-declaration]]
[subs="specialcharacters,macros"]
----
<temporary table declaration> ::=
       DECLARE LOCAL TEMPORARY TABLE <<table-name, <table name> >>
         <<table-element-list, <table element list> >>
         [ ON COMMIT <<table-commit-action, <table commit action> >> ROWS ]
----


=== 14.12 <free locator statement>

.Function

Remove the association between a locator variable and the value that is represented by that locator.

Format

[[free-locator-statement]]
[subs="specialcharacters,macros"]
----
<free locator statement> ::=
       FREE LOCATOR <<locator-reference, <locator reference> >> [ { <<comma, <comma> >> <<locator-reference, <locator reference> >> }... ]
----

[[locator-reference]]
[subs="specialcharacters,macros"]
----
<locator reference> ::= <host parameter name>
----


=== 14.13 <hold locator statement>

.Function

Mark a locator variable as being holdable.
Format

[[hold-locator-statement]]
[subs="specialcharacters,macros"]
----
<hold locator statement> ::=
       HOLD LOCATOR <<locator-reference, <locator reference> >> [ { <<comma, <comma> >> <<locator-reference, <locator reference> >> }... ]
----


== 15 Control statements


=== 15.1 <call statement>

.Function

Invoke an SQL-invoked routine.
Format

[[call-statement]]
[subs="specialcharacters,macros"]
----
<call statement> ::=
       CALL <<routine-invocation, <routine invocation> >>
----


=== 15.2 <return statement>

.Function

Return a value from an SQL function.
Format

[[return-statement]]
[subs="specialcharacters,macros"]
----
<return statement> ::=
       RETURN <<return-value, <return value> >>
----

[[return-value]]
[subs="specialcharacters,macros"]
----
<return value> ::=
         <<value-expression, <value expression> >>
       | NULL
----


== 16 Transaction management


=== 16.1 <start transaction statement>

.Function

Start an SQL-transaction and set its characteristics.
Format

[[start-transaction-statement]]
[subs="specialcharacters,macros"]
----
<start transaction statement> ::=
       START TRANSACTION <<transaction-mode, <transaction mode> >> [ { <<comma, <comma> >> <<transaction-mode, <transaction mode> >> }...]
----

[[transaction-mode]]
[subs="specialcharacters,macros"]
----
<transaction mode> ::=
         <<isolation-level, <isolation level> >>
       | <<transaction-access-mode, <transaction access mode> >>
       | <<diagnostics-size, <diagnostics size> >>
----

[[transaction-access-mode]]
[subs="specialcharacters,macros"]
----
<transaction access mode> ::=
         READ ONLY
       | READ WRITE
----

[[isolation-level]]
[subs="specialcharacters,macros"]
----
<isolation level> ::=
       ISOLATION LEVEL <<level-of-isolation, <level of isolation> >>
----

[[level-of-isolation]]
[subs="specialcharacters,macros"]
----
<level of isolation> ::=
         READ UNCOMMITTED
       | READ COMMITTED
       | REPEATABLE READ
       | SERIALIZABLE
----

[[diagnostics-size]]
[subs="specialcharacters,macros"]
----
<diagnostics size> ::=
       DIAGNOSTICS SIZE <<number-of-conditions, <number of conditions> >>
----

[[number-of-conditions]]
[subs="specialcharacters,macros"]
----
<number of conditions> ::= <simple value specification>
----


=== 16.2 <set transaction statement>

.Function

Set the characteristics of the next SQL-transaction for the SQL-agent.
NOTE 328 â€“ This statement has no effect on any SQL-transactions subsequent to the next SQL-transaction.

Format

[[set-transaction-statement]]
[subs="specialcharacters,macros"]
----
<set transaction statement> ::=
       SET [ LOCAL ] <<transaction-characteristics, <transaction characteristics> >>
----

[[transaction-characteristics]]
[subs="specialcharacters,macros"]
----
<transaction characteristics> ::=
       TRANSACTION <<transaction-mode, <transaction mode> >> [ { <<comma, <comma> >> <<transaction-mode, <transaction mode> >> }... ]
----


=== 16.3 <set constraints mode statement>

.Function

If an SQL-transaction is currently active, then set the constraint mode for that SQL-transaction in
the current SQL-session. If no SQL-transaction is currently active, then set the constraint mode for
the next SQL-transaction in the current SQL-session for the SQL-agent.
NOTE 330 â€“ This statement has no effect on any SQL-transactions subsequent to this SQL-transaction.
Format

[[set-constraints-mode-statement]]
[subs="specialcharacters,macros"]
----
<set constraints mode statement> ::=
       SET CONSTRAINTS <<constraint-name-list, <constraint name list> >> { DEFERRED | IMMEDIATE }
----

[[constraint-name-list]]
[subs="specialcharacters,macros"]
----
<constraint name list> ::=
         ALL
       | <<constraint-name, <constraint name> >> [ { <<comma, <comma> >> <<constraint-name, <constraint name> >> }... ]
----


=== 16.4 <savepoint statement>

.Function

Establish a savepoint.
Format

[[savepoint-statement]]
[subs="specialcharacters,macros"]
----
<savepoint statement> ::= SAVEPOINT <savepoint specifier>
----

[[savepoint-specifier]]
[subs="specialcharacters,macros"]
----
<savepoint specifier> ::=
         <<savepoint-name, <savepoint name> >>
       | <<simple-target-specification, <simple target specification> >>
----


=== 16.5 <release savepoint statement>

.Function

Destroy a savepoint.
Format

[[release-savepoint-statement]]
[subs="specialcharacters,macros"]
----
<release savepoint statement> ::=
       RELEASE SAVEPOINT <<savepoint-specifier, <savepoint specifier> >>
----


=== 16.6 <commit statement>

.Function

Terminate the current SQL-transaction with commit.
Format

[[commit-statement]]
[subs="specialcharacters,macros"]
----
<commit statement> ::=
       COMMIT [ WORK ] [ AND [ NO ] CHAIN ]
----


=== 16.7 <rollback statement>

.Function

Terminate the current SQL-transaction with rollback, or rollback all actions affecting SQL-data
and/or schemas since the establishment of a savepoint.
Format

[[rollback-statement]]
[subs="specialcharacters,macros"]
----
<rollback statement> ::=
       ROLLBACK [ WORK ] [ AND [ NO ]        CHAIN ]
         [ <<savepoint-clause, <savepoint clause> >> ]
----

[[savepoint-clause]]
[subs="specialcharacters,macros"]
----
<savepoint clause> ::=
       TO SAVEPOINT <<savepoint-specifier, <savepoint specifier> >>
----


== 17 Connection management


=== 17.1 <connect statement>

.Function

Establish an SQL-session.
Format

[[connect-statement]]
[subs="specialcharacters,macros"]
----
<connect statement> ::=
       CONNECT TO <<connection-target, <connection target> >>
----

[[connection-target]]
[subs="specialcharacters,macros"]
----
<connection target> ::=
         <<SQL-server-name, <SQL-server name> >>
           [ AS <<connection-name, <connection name> >> ]
           [ USER <<connection-user-name, <connection user name> >> ]
       | DEFAULT
----


=== 17.2 <set connection statement>

.Function

Select an SQL-connection from the available SQL-connections.
Format

[[set-connection-statement]]
[subs="specialcharacters,macros"]
----
<set connection statement> ::=
       SET CONNECTION <<connection-object, <connection object> >>
----

[[connection-object]]
[subs="specialcharacters,macros"]
----
<connection object> ::=
         DEFAULT
       | <<connection-name, <connection name> >>
----


=== 17.3 <disconnect statement>

.Function

Terminate an SQL-connection.
Format

[[disconnect-statement]]
[subs="specialcharacters,macros"]
----
<disconnect statement> ::=
       DISCONNECT <<disconnect-object, <disconnect object> >>
----

[[disconnect-object]]
[subs="specialcharacters,macros"]
----
<disconnect object> ::=
         <<connection-object, <connection object> >>
       | ALL
       | CURRENT
----


== 18 Session management


=== 18.1 <set session characteristics statement>

.Function

Set one or more characteristics for the current SQL-session.
Format

[[set-session-characteristics-statement]]
[subs="specialcharacters,macros"]
----
<set session characteristics statement> ::=
       SET SESSION CHARACTERISTICS AS
         <<session-characteristic-list, <session characteristic list> >>
----

[[session-characteristic-list]]
[subs="specialcharacters,macros"]
----
<session characteristic list> ::=
       <<session-characteristic, <session characteristic> >> [ { <<comma, <comma> >> <<session-characteristic, <session characteristic> >> }... ]
----

[[session-characteristic]]
[subs="specialcharacters,macros"]
----
<session characteristic> ::=
         <<transaction-characteristics, <transaction characteristics> >>
----


=== 18.2 <set session user identifier statement>

.Function

Set the SQL-session user identifier and the current user identifier of the current SQL-session
context.
Format

[[set-session-user-identifier-statement]]
[subs="specialcharacters,macros"]
----
<set session user identifier statement> ::=
       SET SESSION AUTHORIZATION <<value-specification, <value specification> >>
----


=== 18.3 <set role statement>

.Function

Set the current role name for the current SQL-session context.
Format

[[set-role-statement]]
[subs="specialcharacters,macros"]
----
<set role statement> ::=
       SET ROLE <<role-specification, <role specification> >>
----

[[role-specification]]
[subs="specialcharacters,macros"]
----
<role specification> ::=
         <<value-specification, <value specification> >>
       | NONE
----


=== 18.4 <set local time zone statement>

.Function

Set the default local time zone displacement for the current SQL-session.
Format

[[set-local-time-zone-statement]]
[subs="specialcharacters,macros"]
----
<set local time zone statement> ::=
       SET TIME ZONE <<set-time-zone-value, <set time zone value> >>
----

[[set-time-zone-value]]
[subs="specialcharacters,macros"]
----
<set time zone value> ::=
         <<interval-value-expression, <interval value expression> >>
       | LOCAL
----


== 19 Diagnostics management


=== 19.1 <get diagnostics statement>

.Function

Get exception or completion condition information from the diagnostics area.
Format

[[get-diagnostics-statement]]
[subs="specialcharacters,macros"]
----
<get diagnostics statement> ::=
       GET DIAGNOSTICS <<SQL-diagnostics-information, <SQL diagnostics information> >>
----

[[SQL-diagnostics-information]]
[subs="specialcharacters,macros"]
----
<SQL diagnostics information> ::=
         <<statement-information, <statement information> >>
       | <<condition-information, <condition information> >>
----

[[statement-information]]
[subs="specialcharacters,macros"]
----
<statement information> ::=
       <<statement-information-item, <statement information item> >> [ { <<comma, <comma> >> <<statement-information-item, <statement information item> >> }... ]
----

[[statement-information-item]]
[subs="specialcharacters,macros"]
----
<statement information item> ::=
       <<simple-target-specification, <simple target specification> >> <<equals-operator, <equals operator> >> <<statement-information-item-name, <statement information item name> >>
----


[[statement-information-item-name]]
[subs="specialcharacters,macros"]
----
<statement information item name> ::=
         NUMBER
       | MORE
       | COMMAND_FUNCTION
       | COMMAND_FUNCTION_CODE
       | ROW_COUNT
       | TRANSACTIONS_COMMITTED
       | TRANSACTIONS_ROLLED_BACK
       | TRANSACTION_ACTIVE
----

[[condition-information]]
[subs="specialcharacters,macros"]
----
<condition information> ::=
       EXCEPTION <<condition-number, <condition number> >>
         <<condition-information-item, <condition information item> >> [ { <<comma, <comma> >> <<condition-information-item, <condition information item> >> }... ]
----

[[condition-information-item]]
[subs="specialcharacters,macros"]
----
<condition information item> ::=
       <<simple-target-specification, <simple target specification> >> <<equals-operator, <equals operator> >> <<condition-information-item-name, <condition information item name> >>
----


[[condition-information-item-name]]
[subs="specialcharacters,macros"]
----
<condition information item name> ::=
         CATALOG_NAME
       | CLASS_ORIGIN
       | COLUMN_NAME
       | CONDITION_NUMBER
       | CONNECTION_NAME
       | CONSTRAINT_CATALOG
       | CONSTRAINT_NAME
       | CONSTRAINT_SCHEMA
       | CURSOR_NAME
       | MESSAGE_LENGTH
       | MESSAGE_OCTET_LENGTH
       | MESSAGE_TEXT
       |   PARAMETER_MODE
       |   PARAMETER_NAME
       |   PARAMETER_ORDINAL_POSITION
       |   RETURNED_SQLSTATE
       |   ROUTINE_CATALOG
       |   ROUTINE_NAME
       |   ROUTINE_SCHEMA
       |   SCHEMA_NAME
       |   SERVER_NAME
       |   SPECIFIC_NAME
       |   SUBCLASS_ORIGIN
       |   TABLE_NAME
       |   TRIGGER_CATALOG
       |   TRIGGER_NAME
       |   TRIGGER_SCHEMA
----

[[condition-number]]
[subs="specialcharacters,macros"]
----
<condition number> ::= <simple value specification>
----

