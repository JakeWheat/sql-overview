:toc: right

= Document

== 5 Lexical elements


=== 5.1      <SQL terminal character>

.Function

Define the terminal symbols of the SQL language and the elements of strings.


Format
[[SQL-terminal-character]]
[subs="specialcharacters,macros"]
----
<SQL terminal character> ::= <SQL language character>
----

[[SQL-language-character]]
[subs="specialcharacters,macros"]
----
<SQL language character> ::=
    <<simple-Latin-letter, <simple Latin letter> >>
  | <<digit, <digit> >>
  | <<SQL-special-character, <SQL special character> >>
----

[[simple-Latin-letter]]
[subs="specialcharacters,macros"]
----
<simple Latin letter> ::=
    <<simple-Latin-upper-case-letter, <simple Latin upper case letter> >>
  | <<simple-Latin-lower-case-letter, <simple Latin lower case letter> >>
----

[[simple-Latin-upper-case-letter]]
[subs="specialcharacters,macros"]
----
<simple Latin upper case letter> ::=
    A | B | C | D | E | F | G | H | I | J | K | L | M | N | O
  | P | Q | R | S | T | U | V | W | X | Y | Z
----

[[simple-Latin-lower-case-letter]]
[subs="specialcharacters,macros"]
----
<simple Latin lower case letter> ::=
    a | b | c | d | e | f | g | h | i | j | k | l | m | n | o
  | p | q | r | s | t | u | v | w | x | y | z
----

[[digit]]
[subs="specialcharacters,macros"]
----
<digit> ::=
    0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
----

[[SQL-special-character]]
[subs="specialcharacters,macros"]
----
<SQL special character> ::=
    <<space, <space> >>
  | <<double-quote, <double quote> >>
  | <<percent, <percent> >>
  | <<ampersand, <ampersand> >>
  | <<quote, <quote> >>
  | <<left-paren, <left paren> >>
  | <<right-paren, <right paren> >>
  | <<asterisk, <asterisk> >>
  | <<plus-sign, <plus sign> >>
  | <<comma, <comma> >>
  | <<minus-sign, <minus sign> >>
  | <<period, <period> >>
  | <<solidus, <solidus> >>
  | <<colon, <colon> >>
  | <<semicolon, <semicolon> >>
  |   <<less-than-operator, <less than operator> >>
  |   <<equals-operator, <equals operator> >>
  |   <<greater-than-operator, <greater than operator> >>
  |   <<question-mark, <question mark> >>
  |   <<left-bracket, <left bracket> >>
  |   <<right-bracket, <right bracket> >>
  |   <<circumflex, <circumflex> >>
  |   <<underscore, <underscore> >>
  |   <<vertical-bar, <vertical bar> >>
  |   <<left-brace, <left brace> >>
  |   <<right-brace, <right brace> >>
----

[[space]]
[subs="specialcharacters,macros"]
----
<space> ::= !! See the Syntax Rules
----

[[double-quote]]
[subs="specialcharacters,macros"]
----
<double quote> ::= "
----

[[percent]]
[subs="specialcharacters,macros"]
----
<percent> ::= %
----

[[ampersand]]
[subs="specialcharacters,macros"]
----
<ampersand> ::= &
----

[[quote]]
[subs="specialcharacters,macros"]
----
<quote> ::= '
----

[[left-paren]]
[subs="specialcharacters,macros"]
----
<left paren> ::= (
----

[[right-paren]]
[subs="specialcharacters,macros"]
----
<right paren> ::= )
----

[[asterisk]]
[subs="specialcharacters,macros"]
----
<asterisk> ::= *
----

[[plus-sign]]
[subs="specialcharacters,macros"]
----
<plus sign> ::= +
----

[[comma]]
[subs="specialcharacters,macros"]
----
<comma> ::= ,
----

[[minus-sign]]
[subs="specialcharacters,macros"]
----
<minus sign> ::= -
----

[[period]]
[subs="specialcharacters,macros"]
----
<period> ::= .
----

[[solidus]]
[subs="specialcharacters,macros"]
----
<solidus> ::= /
----

[[reverse-solidus]]
[subs="specialcharacters,macros"]
----
<reverse solidus> ::= \
----

[[colon]]
[subs="specialcharacters,macros"]
----
<colon> ::= :
----

[[semicolon]]
[subs="specialcharacters,macros"]
----
<semicolon> ::= ;
----

[[less-than-operator]]
[subs="specialcharacters,macros"]
----
<less than operator> ::= <
----

[[equals-operator]]
[subs="specialcharacters,macros"]
----
<equals operator> ::= =
----

[[greater-than-operator]]
[subs="specialcharacters,macros"]
----
<greater than operator> ::= >
----

[[question-mark]]
[subs="specialcharacters,macros"]
----
<question mark> ::= ?
----

[[left-bracket-or-trigraph]]
[subs="specialcharacters,macros"]
----
<left bracket or trigraph> ::=
    <<left-bracket, <left bracket> >>
  | <<left-bracket-trigraph, <left bracket trigraph> >>
----

[[right-bracket-or-trigraph]]
[subs="specialcharacters,macros"]
----
<right bracket or trigraph> ::=
    <<right-bracket, <right bracket> >>
  | <<right-bracket-trigraph, <right bracket trigraph> >>
----

[[left-bracket]]
[subs="specialcharacters,macros"]
----
<left bracket> ::= [
----

[[left-bracket-trigraph]]
[subs="specialcharacters,macros"]
----
<left bracket trigraph> ::= ??(
----

[[right-bracket]]
[subs="specialcharacters,macros"]
----
<right bracket> ::= [
----

[[right-bracket-trigraph]]
[subs="specialcharacters,macros"]
----
<right bracket trigraph> ::= ??)
----

[[circumflex]]
[subs="specialcharacters,macros"]
----
<circumflex> ::= ^
----

[[underscore]]
[subs="specialcharacters,macros"]
----
<underscore> ::= _
----

[[vertical-bar]]
[subs="specialcharacters,macros"]
----
<vertical bar> ::= |
----

[[left-brace]]
[subs="specialcharacters,macros"]
----
<left brace> ::= {
----

[[right-brace]]
[subs="specialcharacters,macros"]
----
<right brace> ::= }
----

=== 5.2     <token> and <separator>

.Function

Specify lexical units (tokens and separators) that participate in SQL language.


Format
[[token]]
[subs="specialcharacters,macros"]
----
<token> ::=
    <<nondelimiter-token, <nondelimiter token> >>
  | <<delimiter-token, <delimiter token> >>
----

[[nondelimiter-token]]
[subs="specialcharacters,macros"]
----
<nondelimiter token> ::=
    <<regular-identifier, <regular identifier> >>
  | <<key-word, <key word> >>
  | <<unsigned-numeric-literal, <unsigned numeric literal> >>
  | <<national-character-string-literal, <national character string literal> >>
  | <<binary-string-literal, <binary string literal> >>
  | <<large-object-length-token, <large object length token> >>
  | <<Unicode-delimited-identifier, <Unicode delimited identifier> >>
  | <<Unicode-character-string-literal, <Unicode character string literal> >>
  | <<SQL-language-identifier, <SQL language identifier> >>
----

[[regular-identifier]]
[subs="specialcharacters,macros"]
----
<regular identifier> ::= <identifier body>
----

[[identifier-body]]
[subs="specialcharacters,macros"]
----
<identifier body> ::= <identifier start> [ <identifier part>... ]
----

[[identifier-part]]
[subs="specialcharacters,macros"]
----
<identifier part> ::=
    <<identifier-start, <identifier start> >>
  | <<identifier-extend, <identifier extend> >>
----

[[identifier-start]]
[subs="specialcharacters,macros"]
----
<identifier start> ::= !! See the Syntax Rules
----

[[identifier-extend]]
[subs="specialcharacters,macros"]
----
<identifier extend> ::= !! See the Syntax Rules
----

[[large-object-length-token]]
[subs="specialcharacters,macros"]
----
<large object length token> ::= <digit>... <multiplier>
----

[[multiplier]]
[subs="specialcharacters,macros"]
----
<multiplier> ::=
    K
  | M
  | G
----

[[delimited-identifier]]
[subs="specialcharacters,macros"]
----
<delimited identifier> ::= <double quote> <delimited identifier body> <double quote>
----

[[delimited-identifier-body]]
[subs="specialcharacters,macros"]
----
<delimited identifier body> ::= <delimited identifier part>...
----

[[delimited-identifier-part]]
[subs="specialcharacters,macros"]
----
<delimited identifier part> ::=
    <<nondoublequote-character, <nondoublequote character> >>
  | <<doublequote-symbol, <doublequote symbol> >>
----

[[Unicode-delimited-identifier]]
[subs="specialcharacters,macros"]
----
<Unicode delimited identifier> ::=
    U<<ampersand, <ampersand> >><<double-quote, <double quote> >> <<Unicode-delimiter-body, <Unicode delimiter body> >> <<double-quote, <double quote> >>
    <<Unicode-escape-specifier, <Unicode escape specifier> >>
----

[[Unicode-escape-specifier]]
[subs="specialcharacters,macros"]
----
<Unicode escape specifier> ::= [ UESCAPE <quote><Unicode escape character><quote> ]
----

[[Unicode-delimiter-body]]
[subs="specialcharacters,macros"]
----
<Unicode delimiter body> ::= <Unicode identifier part>...
----

[[Unicode-identifier-part]]
[subs="specialcharacters,macros"]
----
<Unicode identifier part> ::=
    <<delimited-identifier-part, <delimited identifier part> >>
  | <<Unicode-escape-value, <Unicode escape value> >>
----

[[Unicode-escape-value]]
[subs="specialcharacters,macros"]
----
<Unicode escape value> ::=
    <<Unicode-4-digit-escape-value, <Unicode 4 digit escape value> >>
  | <<Unicode-6-digit-escape-value, <Unicode 6 digit escape value> >>
  | <<Unicode-character-escape-value, <Unicode character escape value> >>
----

[[Unicode-4-digit-escape-value]]
[subs="specialcharacters,macros"]
----
<Unicode 4 digit escape value> ::= <Unicode escape character><hexit><hexit><hexit><hexit>
----

[[Unicode-6-digit-escape-value]]
[subs="specialcharacters,macros"]
----
<Unicode 6 digit escape value> ::=
    <<Unicode-escape-character, <Unicode escape character> >><<plus-sign, <plus sign> >>
    <<hexit, <hexit> >><<hexit, <hexit> >><<hexit, <hexit> >><<hexit, <hexit> >><<hexit, <hexit> >><<hexit, <hexit> >>
----

[[Unicode-character-escape-value]]
[subs="specialcharacters,macros"]
----
<Unicode character escape value> ::= <Unicode escape character><Unicode escape character>
----

[[Unicode-escape-character]]
[subs="specialcharacters,macros"]
----
<Unicode escape character> ::= !! See the Syntax Rules
----

[[nondoublequote-character]]
[subs="specialcharacters,macros"]
----
<nondoublequote character> ::= !! See the Syntax Rules
----

[[doublequote-symbol]]
[subs="specialcharacters,macros"]
----
<doublequote symbol> ::= "" !! two consecutive double quote characters
----

[[delimiter-token]]
[subs="specialcharacters,macros"]
----
<delimiter token> ::=
    <<character-string-literal, <character string literal> >>
  | <<date-string, <date string> >>
  | <<time-string, <time string> >>
  | <<timestamp-string, <timestamp string> >>
  | <<interval-string, <interval string> >>
  | <<delimited-identifier, <delimited identifier> >>
  | <<SQL-special-character, <SQL special character> >>
  | <<not-equals-operator, <not equals operator> >>
  | <<greater-than-or-equals-operator, <greater than or equals operator> >>
  | <<less-than-or-equals-operator, <less than or equals operator> >>
  | <<concatenation-operator, <concatenation operator> >>
  | <<right-arrow, <right arrow> >>
  | <<left-bracket-trigraph, <left bracket trigraph> >>
  | <<right-bracket-trigraph, <right bracket trigraph> >>
  | <<double-colon, <double colon> >>
  | <<double-period, <double period> >>
----

[[not-equals-operator]]
[subs="specialcharacters,macros"]
----
<not equals operator> ::= <>
----

[[greater-than-or-equals-operator]]
[subs="specialcharacters,macros"]
----
<greater than or equals operator> ::= >=
----

[[less-than-or-equals-operator]]
[subs="specialcharacters,macros"]
----
<less than or equals operator> ::= <=
----

[[concatenation-operator]]
[subs="specialcharacters,macros"]
----
<concatenation operator> ::= ||
----

[[right-arrow]]
[subs="specialcharacters,macros"]
----
<right arrow> ::= ->
----

[[double-colon]]
[subs="specialcharacters,macros"]
----
<double colon> ::= ::
----

[[double-period]]
[subs="specialcharacters,macros"]
----
<double period> ::= ..
----

[[separator]]
[subs="specialcharacters,macros"]
----
<separator> ::= { <comment> | <white space> }...
----

[[white-space]]
[subs="specialcharacters,macros"]
----
<white space> ::= !! See the Syntax Rules
----

[[comment]]
[subs="specialcharacters,macros"]
----
<comment> ::=
    <<simple-comment, <simple comment> >>
  | <<bracketed-comment, <bracketed comment> >>
----

[[simple-comment]]
[subs="specialcharacters,macros"]
----
<simple comment> ::= <simple comment introducer> [ <comment character>... ] <newline>
----

[[simple-comment-introducer]]
[subs="specialcharacters,macros"]
----
<simple comment introducer> ::= <minus sign><minus sign>
----

[[bracketed-comment]]
[subs="specialcharacters,macros"]
----
<bracketed comment> ::=
    <<bracketed-comment-introducer, <bracketed comment introducer> >>
    <<bracketed-comment-contents, <bracketed comment contents> >>
    <<bracketed-comment-terminator, <bracketed comment terminator> >>
----

[[bracketed-comment-introducer]]
[subs="specialcharacters,macros"]
----
<bracketed comment introducer> ::= /*
----

[[bracketed-comment-terminator]]
[subs="specialcharacters,macros"]
----
<bracketed comment terminator> ::= */
----

[[bracketed-comment-contents]]
[subs="specialcharacters,macros"]
----
<bracketed comment contents> ::= !! See the Syntax Rules
    [ { <<comment-character, <comment character> >> | <<separator, <separator> >> }... ]
----

[[comment-character]]
[subs="specialcharacters,macros"]
----
<comment character> ::=
    <<nonquote-character, <nonquote character> >>
  | <<quote, <quote> >>
----

[[newline]]
[subs="specialcharacters,macros"]
----
<newline> ::= !! See the Syntax Rules
----

[[key-word]]
[subs="specialcharacters,macros"]
----
<key word> ::=
    <<reserved-word, <reserved word> >>
  | <<non-reserved-word, <non-reserved word> >>
----

[[non-reserved-word]]
[subs="specialcharacters,macros"]
----
<non-reserved word> ::=
    A | ABSOLUTE | ACTION | ADA | ADD | ADMIN | AFTER | ALWAYS | ASC
  | ASSERTION | ASSIGNMENT | ATTRIBUTE | ATTRIBUTES

  | BEFORE | BERNOULLI | BREADTH

  |   C | CASCADE | CATALOG | CATALOG_NAME | CHAIN | CHARACTER_SET_CATALOG
  |   CHARACTER_SET_NAME | CHARACTER_SET_SCHEMA | CHARACTERISTICS | CHARACTERS
  |   CLASS_ORIGIN | COBOL | COLLATION | COLLATION_CATALOG | COLLATION_NAME | COLLATION_SCHEMA
  |   COLUMN_NAME | COMMAND_FUNCTION | COMMAND_FUNCTION_CODE | COMMITTED
  |   CONDITION_NUMBER | CONNECTION | CONNECTION_NAME | CONSTRAINT_CATALOG | CONSTRAINT_NAME
  |   CONSTRAINT_SCHEMA | CONSTRAINTS | CONSTRUCTOR | CONTAINS | CONTINUE | CURSOR_NAME

  | DATA | DATETIME_INTERVAL_CODE | DATETIME_INTERVAL_PRECISION | DEFAULTS | DEFERRABLE
  | DEFERRED | DEFINED | DEFINER | DEGREE | DEPTH | DERIVED | DESC | DESCRIPTOR
  | DIAGNOSTICS | DISPATCH | DOMAIN | DYNAMIC_FUNCTION | DYNAMIC_FUNCTION_CODE

  | EQUALS | EXCEPTION | EXCLUDE | EXCLUDING

  | FINAL | FIRST | FOLLOWING | FORTRAN | FOUND

  | G | GENERAL | GENERATED | GO | GOTO | GRANTED

  | HIERARCHY

  | IMMEDIATE | IMPLEMENTATION | INCLUDING | INCREMENT | INITIALLY | INPUT | INSTANCE
  | INSTANTIABLE | INVOKER | ISOLATION

  | K | KEY | KEY_MEMBER | KEY_TYPE

  | LAST | LENGTH | LEVEL | LOCATOR

  | M | MAP | MATCHED | MAXVALUE | MESSAGE_LENGTH | MESSAGE_OCTET_LENGTH
  | MESSAGE_TEXT | MINVALUE | MORE | MUMPS

  | NAME | NAMES | NESTING | NEXT | NORMALIZED | NULLABLE | NULLS | NUMBER

  | OBJECT | OCTETS | OPTION | OPTIONS | ORDERING | ORDINALITY | OTHERS
  | OUTPUT | OVERRIDING

  |   PAD | PARAMETER_MODE | PARAMETER_NAME | PARAMETER_ORDINAL_POSITION
  |   PARAMETER_SPECIFIC_CATALOG | PARAMETER_SPECIFIC_NAME | PARAMETER_SPECIFIC_SCHEMA
  |   PARTIAL | PASCAL | PATH | PLACING | PLI | PRECEDING | PRESERVE | PRIOR
  |   PRIVILEGES | PUBLIC

  | READ | RELATIVE | REPEATABLE | RESTART | RESTRICT | RETURNED_CARDINALITY
  | RETURNED_LENGTH | RETURNED_OCTET_LENGTH | RETURNED_SQLSTATE | ROLE
  | ROUTINE | ROUTINE_CATALOG | ROUTINE_NAME | ROUTINE_SCHEMA | ROW_COUNT

  |   SCALE | SCHEMA | SCHEMA_NAME | SCOPE_CATALOG | SCOPE_NAME | SCOPE_SCHEMA
  |   SECTION | SECURITY | SELF | SEQUENCE | SERIALIZABLE | SERVER_NAME | SESSION
  |   SETS | SIMPLE | SIZE | SOURCE | SPACE | SPECIFIC_NAME | STATE | STATEMENT
  |   STRUCTURE | STYLE | SUBCLASS_ORIGIN

  | TABLE_NAME | TEMPORARY | TIES | TOP_LEVEL_COUNT | TRANSACTION
  | TRANSACTION_ACTIVE | TRANSACTIONS_COMMITTED | TRANSACTIONS_ROLLED_BACK
  | TRANSFORM | TRANSFORMS | TRIGGER_CATALOG | TRIGGER_NAME | TRIGGER_SCHEMA | TYPE

  | UNBOUNDED | UNCOMMITTED | UNDER | UNNAMED | USAGE | USER_DEFINED_TYPE_CATALOG
  | USER_DEFINED_TYPE_CODE | USER_DEFINED_TYPE_NAME | USER_DEFINED_TYPE_SCHEMA

  | VIEW

  | WORK | WRITE

  | ZONE
----

[[reserved-word]]
[subs="specialcharacters,macros"]
----
<reserved word> ::=
    ABS | ALL | ALLOCATE | ALTER | AND | ANY | ARE | ARRAY | AS | ASENSITIVE
  | ASYMMETRIC | AT | ATOMIC | AUTHORIZATION | AVG

  | BEGIN | BETWEEN | BIGINT | BINARY | BLOB | BOOLEAN | BOTH | BY

  |   CALL | CALLED | CARDINALITY | CASCADED | CASE | CAST | CEIL | CEILING
  |   CHAR | CHAR_LENGTH | CHARACTER | CHARACTER_LENGTH | CHECK | CLOB | CLOSE
  |   COALESCE | COLLATE | COLLECT | COLUMN | COMMIT | CONDITION | CONNECT
  |   CONSTRAINT | CONVERT | CORR | CORRESPONDING | COUNT | COVAR_POP | COVAR_SAMP
  |   CREATE | CROSS | CUBE | CUME_DIST | CURRENT | CURRENT_DATE
  |   CURRENT_DEFAULT_TRANSFORM_GROUP | CURRENT_PATH | CURRENT_ROLE | CURRENT_TIME
  |   CURRENT_TIMESTAMP | CURRENT_TRANSFORM_GROUP_FOR_TYPE | CURRENT_USER
  |   CURSOR | CYCLE

  | DATE | DAY | DEALLOCATE | DEC | DECIMAL | DECLARE | DEFAULT | DELETE
  | DENSE_RANK | DEREF | DESCRIBE | DETERMINISTIC | DISCONNECT | DISTINCT
  | DOUBLE | DROP | DYNAMIC

  | EACH | ELEMENT | ELSE | END | END-EXEC | ESCAPE | EVERY | EXCEPT | EXEC
  | EXECUTE | EXISTS | EXP | EXTERNAL | EXTRACT

  | FALSE | FETCH | FILTER | FLOAT | FLOOR | FOR | FOREIGN | FREE | FROM
  | FULL | FUNCTION | FUSION

  | GET | GLOBAL | GRANT | GROUP | GROUPING

  | HAVING | HOLD | HOUR

  | IDENTITY | IN | INDICATOR | INNER | INOUT | INSENSITIVE | INSERT
  | INT | INTEGER | INTERSECT | INTERSECTION | INTERVAL | INTO | IS

  | JOIN

  | LANGUAGE | LARGE | LATERAL | LEADING | LEFT | LIKE | LN | LOCAL
  | LOCALTIME | LOCALTIMESTAMP | LOWER

  | MATCH | MAX | MEMBER | MERGE | METHOD | MIN | MINUTE
  | MOD | MODIFIES | MODULE | MONTH | MULTISET

  | NATIONAL | NATURAL | NCHAR | NCLOB | NEW | NO | NONE | NORMALIZE | NOT
  | NULL | NULLIF | NUMERIC

  | OCTET_LENGTH | OF | OLD | ON | ONLY | OPEN | OR | ORDER | OUT | OUTER
  | OVER | OVERLAPS | OVERLAY

  | PARAMETER | PARTITION | PERCENT_RANK | PERCENTILE_CONT | PERCENTILE_DISC
  | POSITION | POWER | PRECISION | PREPARE | PRIMARY | PROCEDURE

  |   RANGE | RANK | READS | REAL | RECURSIVE | REF | REFERENCES | REFERENCING
  |   REGR_AVGX | REGR_AVGY | REGR_COUNT | REGR_INTERCEPT | REGR_R2 | REGR_SLOPE
  |   REGR_SXX | REGR_SXY | REGR_SYY | RELEASE | RESULT | RETURN | RETURNS
  |   REVOKE | RIGHT | ROLLBACK | ROLLUP | ROW | ROW_NUMBER | ROWS

  |   SAVEPOINT | SCOPE | SCROLL | SEARCH | SECOND | SELECT | SENSITIVE
  |   SESSION_USER | SET | SIMILAR | SMALLINT | SOME | SPECIFIC | SPECIFICTYPE
  |   SQL | SQLEXCEPTION | SQLSTATE | SQLWARNING | SQRT | START | STATIC
  |   STDDEV_POP | STDDEV_SAMP | SUBMULTISET | SUBSTRING | SUM | SYMMETRIC
  |   SYSTEM | SYSTEM_USER

  | TABLE | TABLESAMPLE | THEN | TIME | TIMESTAMP | TIMEZONE_HOUR | TIMEZONE_MINUTE
  | TO | TRAILING | TRANSLATE | TRANSLATION | TREAT | TRIGGER | TRIM | TRUE

  | UESCAPE | UNION | UNIQUE | UNKNOWN | UNNEST | UPDATE    | UPPER | USER | USING

  | VALUE | VALUES | VAR_POP | VAR_SAMP | VARCHAR | VARYING

  | WHEN | WHENEVER | WHERE | WIDTH_BUCKET | WINDOW | WITH | WITHIN | WITHOUT

  | YEAR
----

=== 5.3      <literal>

.Function

Specify a non-null value.


Format
[[literal]]
[subs="specialcharacters,macros"]
----
<literal> ::=
    <<signed-numeric-literal, <signed numeric literal> >>
  | <<general-literal, <general literal> >>
----

[[unsigned-literal]]
[subs="specialcharacters,macros"]
----
<unsigned literal> ::=
    <<unsigned-numeric-literal, <unsigned numeric literal> >>
  | <<general-literal, <general literal> >>
----

[[general-literal]]
[subs="specialcharacters,macros"]
----
<general literal> ::=
    <<character-string-literal, <character string literal> >>
  | <<national-character-string-literal, <national character string literal> >>
  | <<Unicode-character-string-literal, <Unicode character string literal> >>
  | <<binary-string-literal, <binary string literal> >>
  | <<datetime-literal, <datetime literal> >>
  | <<interval-literal, <interval literal> >>
  | <<boolean-literal, <boolean literal> >>
----

[[character-string-literal]]
[subs="specialcharacters,macros"]
----
<character string literal> ::=
    [ <<introducer, <introducer> >><<character-set-specification, <character set specification> >> ]
    <<quote, <quote> >> [ <<character-representation, <character representation> >>... ] <<quote, <quote> >>
    [ { <<separator, <separator> >> <<quote, <quote> >> [ <<character-representation, <character representation> >>... ] <<quote, <quote> >> }... ]
----

[[introducer]]
[subs="specialcharacters,macros"]
----
<introducer> ::= <underscore>
----

[[character-representation]]
[subs="specialcharacters,macros"]
----
<character representation> ::=
    <<nonquote-character, <nonquote character> >>
  | <<quote-symbol, <quote symbol> >>
----

[[nonquote-character]]
[subs="specialcharacters,macros"]
----
<nonquote character> ::= !! See the Syntax Rules.
----

[[quote-symbol]]
[subs="specialcharacters,macros"]
----
<quote symbol> ::= <quote><quote>
----

[[national-character-string-literal]]
[subs="specialcharacters,macros"]
----
<national character string literal> ::=
    N <<quote, <quote> >> [ <<character-representation, <character representation> >>... ]
    <<quote, <quote> >> [ { <<separator, <separator> >> <<quote, <quote> >> [ <<character-representation, <character representation> >>... ] <<quote, <quote> >> }... ]
----

[[Unicode-character-string-literal]]
[subs="specialcharacters,macros"]
----
<Unicode character string literal> ::=
    [ <<introducer, <introducer> >><<character-set-specification, <character set specification> >> ]
    U<<ampersand, <ampersand> >><<quote, <quote> >> [ <<Unicode-representation, <Unicode representation> >>... ] <<quote, <quote> >>
    [ { <<separator, <separator> >> <<quote, <quote> >> [ <<Unicode-representation, <Unicode representation> >>... ] <<quote, <quote> >> }... ]
    <<Unicode-escape-specifier, <Unicode escape specifier> >>
----

[[Unicode-representation]]
[subs="specialcharacters,macros"]
----
<Unicode representation> ::=
    <<character-representation, <character representation> >>
  | <<Unicode-escape-value, <Unicode escape value> >>
----

[[binary-string-literal]]
[subs="specialcharacters,macros"]
----
<binary string literal> ::=
    X <<quote, <quote> >> [ { <<hexit, <hexit> >> <<hexit, <hexit> >> }... ] <<quote, <quote> >>
    [ { <<separator, <separator> >> <<quote, <quote> >> [ { <<hexit, <hexit> >> <<hexit, <hexit> >> }... ] <<quote, <quote> >> }... ]
----

[[hexit]]
[subs="specialcharacters,macros"]
----
<hexit> ::=
    <<digit, <digit> >> | A | B | C | D | E | F | a | b | c | d | e | f
----

[[signed-numeric-literal]]
[subs="specialcharacters,macros"]
----
<signed numeric literal> ::= [ <sign> ] <unsigned numeric literal>
----

[[unsigned-numeric-literal]]
[subs="specialcharacters,macros"]
----
<unsigned numeric literal> ::=
    <<exact-numeric-literal, <exact numeric literal> >>
  | <<approximate-numeric-literal, <approximate numeric literal> >>
----

[[exact-numeric-literal]]
[subs="specialcharacters,macros"]
----
<exact numeric literal> ::=
    <<unsigned-integer, <unsigned integer> >> [ <<period, <period> >> [ <<unsigned-integer, <unsigned integer> >> ] ]
  | <<period, <period> >> <<unsigned-integer, <unsigned integer> >>
----

[[sign]]
[subs="specialcharacters,macros"]
----
<sign> ::=
    <<plus-sign, <plus sign> >>
  | <<minus-sign, <minus sign> >>
----

[[approximate-numeric-literal]]
[subs="specialcharacters,macros"]
----
<approximate numeric literal> ::= <mantissa> E <exponent>
----

[[mantissa]]
[subs="specialcharacters,macros"]
----
<mantissa> ::= <exact numeric literal>
----

[[exponent]]
[subs="specialcharacters,macros"]
----
<exponent> ::= <signed integer>
----

[[signed-integer]]
[subs="specialcharacters,macros"]
----
<signed integer> ::= [ <sign> ] <unsigned integer>
----

[[unsigned-integer]]
[subs="specialcharacters,macros"]
----
<unsigned integer> ::= <digit>...
----

[[datetime-literal]]
[subs="specialcharacters,macros"]
----
<datetime literal> ::=
    <<date-literal, <date literal> >>
  | <<time-literal, <time literal> >>
  | <<timestamp-literal, <timestamp literal> >>
----

[[date-literal]]
[subs="specialcharacters,macros"]
----
<date literal> ::= DATE <date string>
----

[[time-literal]]
[subs="specialcharacters,macros"]
----
<time literal> ::= TIME <time string>
----

[[timestamp-literal]]
[subs="specialcharacters,macros"]
----
<timestamp literal> ::= TIMESTAMP <timestamp string>
----

[[date-string]]
[subs="specialcharacters,macros"]
----
<date string> ::= <quote> <unquoted date string> <quote>
----

[[time-string]]
[subs="specialcharacters,macros"]
----
<time string> ::= <quote> <unquoted time string> <quote>
----

[[timestamp-string]]
[subs="specialcharacters,macros"]
----
<timestamp string> ::= <quote> <unquoted timestamp string> <quote>
----

[[time-zone-interval]]
[subs="specialcharacters,macros"]
----
<time zone interval> ::= <sign> <hours value> <colon> <minutes value>
----

[[date-value]]
[subs="specialcharacters,macros"]
----
<date value> ::= <years value> <minus sign> <months value> <minus sign> <days value>
----

[[time-value]]
[subs="specialcharacters,macros"]
----
<time value> ::= <hours value> <colon> <minutes value> <colon> <seconds value>
----

[[interval-literal]]
[subs="specialcharacters,macros"]
----
<interval literal> ::= INTERVAL [ <sign> ] <interval string> <interval qualifier>
----

[[interval-string]]
[subs="specialcharacters,macros"]
----
<interval string> ::= <quote> <unquoted interval string> <quote>
----

[[unquoted-date-string]]
[subs="specialcharacters,macros"]
----
<unquoted date string> ::= <date value>
----

[[unquoted-time-string]]
[subs="specialcharacters,macros"]
----
<unquoted time string> ::= <time value> [ <time zone interval> ]
----

[[unquoted-timestamp-string]]
[subs="specialcharacters,macros"]
----
<unquoted timestamp string> ::= <unquoted date string> <space> <unquoted time string>
----

[[unquoted-interval-string]]
[subs="specialcharacters,macros"]
----
<unquoted interval string> ::=
    [ <<sign, <sign> >> ] { <<year-month-literal, <year-month literal> >> | <<day-time-literal, <day-time literal> >> }
----

[[year-month-literal]]
[subs="specialcharacters,macros"]
----
<year-month literal> ::=
    <<years-value, <years value> >> [ <<minus-sign, <minus sign> >> <<months-value, <months value> >> ]
  | <<months-value, <months value> >>
----

[[day-time-literal]]
[subs="specialcharacters,macros"]
----
<day-time literal> ::=
    <<day-time-interval, <day-time interval> >>
  | <<time-interval, <time interval> >>
----

[[day-time-interval]]
[subs="specialcharacters,macros"]
----
<day-time interval> ::=
    <<days-value, <days value> >> [ <<space, <space> >> <<hours-value, <hours value> >> [ <<colon, <colon> >> <<minutes-value, <minutes value> >>
    [ <<colon, <colon> >> <<seconds-value, <seconds value> >> ] ] ]
----

[[time-interval]]
[subs="specialcharacters,macros"]
----
<time interval> ::=
    <<hours-value, <hours value> >> [ <<colon, <colon> >> <<minutes-value, <minutes value> >> [ <<colon, <colon> >> <<seconds-value, <seconds value> >> ] ]
  | <<minutes-value, <minutes value> >> [ <<colon, <colon> >> <<seconds-value, <seconds value> >> ]
  | <<seconds-value, <seconds value> >>
----

[[years-value]]
[subs="specialcharacters,macros"]
----
<years value> ::= <datetime value>
----

[[months-value]]
[subs="specialcharacters,macros"]
----
<months value> ::= <datetime value>
----

[[days-value]]
[subs="specialcharacters,macros"]
----
<days value> ::= <datetime value>
----

[[hours-value]]
[subs="specialcharacters,macros"]
----
<hours value> ::= <datetime value>
----

[[minutes-value]]
[subs="specialcharacters,macros"]
----
<minutes value> ::= <datetime value>
----

[[seconds-value]]
[subs="specialcharacters,macros"]
----
<seconds value> ::= <seconds integer value> [ <period> [ <seconds fraction> ] ]
----

[[seconds-integer-value]]
[subs="specialcharacters,macros"]
----
<seconds integer value> ::= <unsigned integer>
----

[[seconds-fraction]]
[subs="specialcharacters,macros"]
----
<seconds fraction> ::= <unsigned integer>
----

[[datetime-value]]
[subs="specialcharacters,macros"]
----
<datetime value> ::= <unsigned integer>
----

[[boolean-literal]]
[subs="specialcharacters,macros"]
----
<boolean literal> ::=
    TRUE
  | FALSE
  | UNKNOWN
----

=== 5.4      Names and identifiers

.Function

Specify names.


Format
[[identifier]]
[subs="specialcharacters,macros"]
----
<identifier> ::= <actual identifier>
----

[[actual-identifier]]
[subs="specialcharacters,macros"]
----
<actual identifier> ::=
    <<regular-identifier, <regular identifier> >>
  | <<delimited-identifier, <delimited identifier> >>
  | <<Unicode-delimited-identifier, <Unicode delimited identifier> >>
----

[[SQL-language-identifier]]
[subs="specialcharacters,macros"]
----
<SQL language identifier> ::=
    <<SQL-language-identifier-start, <SQL language identifier start> >> [ <<SQL-language-identifier-part, <SQL language identifier part> >>... ]
----

[[SQL-language-identifier-start]]
[subs="specialcharacters,macros"]
----
<SQL language identifier start> ::= <simple Latin letter>
----

[[SQL-language-identifier-part]]
[subs="specialcharacters,macros"]
----
<SQL language identifier part> ::=
    <<simple-Latin-letter, <simple Latin letter> >>
  | <<digit, <digit> >>
  | <<underscore, <underscore> >>
----

[[authorization-identifier]]
[subs="specialcharacters,macros"]
----
<authorization identifier> ::=
    <<role-name, <role name> >>
  | <<user-identifier, <user identifier> >>
----

[[table-name]]
[subs="specialcharacters,macros"]
----
<table name> ::= <local or schema qualified name>
----

[[domain-name]]
[subs="specialcharacters,macros"]
----
<domain name> ::= <schema qualified name>
----

[[schema-name]]
[subs="specialcharacters,macros"]
----
<schema name> ::= [ <catalog name> <period> ] <unqualified schema name>
----

[[unqualified-schema-name]]
[subs="specialcharacters,macros"]
----
<unqualified schema name> ::= <identifier>
----

[[catalog-name]]
[subs="specialcharacters,macros"]
----
<catalog name> ::= <identifier>
----

[[schema-qualified-name]]
[subs="specialcharacters,macros"]
----
<schema qualified name> ::= [ <schema name> <period> ] <qualified identifier>
----

[[local-or-schema-qualified-name]]
[subs="specialcharacters,macros"]
----
<local or schema qualified name> ::=
    [ <<local-or-schema-qualifier, <local or schema qualifier> >> <<period, <period> >> ] <<qualified-identifier, <qualified identifier> >>
----

[[local-or-schema-qualifier]]
[subs="specialcharacters,macros"]
----
<local or schema qualifier> ::=
    <<schema-name, <schema name> >>
  | <<local-qualifier, <local qualifier> >>
----

[[qualified-identifier]]
[subs="specialcharacters,macros"]
----
<qualified identifier> ::= <identifier>
----

[[column-name]]
[subs="specialcharacters,macros"]
----
<column name> ::= <identifier>
----

[[correlation-name]]
[subs="specialcharacters,macros"]
----
<correlation name> ::= <identifier>
----

[[query-name]]
[subs="specialcharacters,macros"]
----
<query name> ::= <identifier>
----

[[SQL-client-module-name]]
[subs="specialcharacters,macros"]
----
<SQL-client module name> ::= <identifier>
----

[[procedure-name]]
[subs="specialcharacters,macros"]
----
<procedure name> ::= <identifier>
----

[[schema-qualified-routine-name]]
[subs="specialcharacters,macros"]
----
<schema qualified routine name> ::= <schema qualified name>
----

[[method-name]]
[subs="specialcharacters,macros"]
----
<method name> ::= <identifier>
----

[[specific-name]]
[subs="specialcharacters,macros"]
----
<specific name> ::= <schema qualified name>
----

[[cursor-name]]
[subs="specialcharacters,macros"]
----
<cursor name> ::= <local qualified name>
----

[[local-qualified-name]]
[subs="specialcharacters,macros"]
----
<local qualified name> ::= [ <local qualifier> <period> ] <qualified identifier>
----

[[local-qualifier]]
[subs="specialcharacters,macros"]
----
<local qualifier> ::= MODULE
----

[[host-parameter-name]]
[subs="specialcharacters,macros"]
----
<host parameter name> ::= <colon> <identifier>
----

[[SQL-parameter-name]]
[subs="specialcharacters,macros"]
----
<SQL parameter name> ::= <identifier>
----

[[constraint-name]]
[subs="specialcharacters,macros"]
----
<constraint name> ::= <schema qualified name>
----

[[external-routine-name]]
[subs="specialcharacters,macros"]
----
<external routine name> ::=
    <<identifier, <identifier> >>
  | <<character-string-literal, <character string literal> >>
----

[[trigger-name]]
[subs="specialcharacters,macros"]
----
<trigger name> ::= <schema qualified name>
----

[[collation-name]]
[subs="specialcharacters,macros"]
----
<collation name> ::= <schema qualified name>
----

[[character-set-name]]
[subs="specialcharacters,macros"]
----
<character set name> ::= [ <schema name> <period> ] <SQL language identifier>
----

[[transliteration-name]]
[subs="specialcharacters,macros"]
----
<transliteration name> ::= <schema qualified name>
----

[[transcoding-name]]
[subs="specialcharacters,macros"]
----
<transcoding name> ::= <schema qualified name>
----

[[schema-resolved-user-defined-type-name]]
[subs="specialcharacters,macros"]
----
<schema-resolved user-defined type name> ::= <user-defined type name>
----

[[user-defined-type-name]]
[subs="specialcharacters,macros"]
----
<user-defined type name> ::= [ <schema name> <period> ] <qualified identifier>
----

[[attribute-name]]
[subs="specialcharacters,macros"]
----
<attribute name> ::= <identifier>
----

[[field-name]]
[subs="specialcharacters,macros"]
----
<field name> ::= <identifier>
----

[[savepoint-name]]
[subs="specialcharacters,macros"]
----
<savepoint name> ::= <identifier>
----

[[sequence-generator-name]]
[subs="specialcharacters,macros"]
----
<sequence generator name> ::= <schema qualified name>
----

[[role-name]]
[subs="specialcharacters,macros"]
----
<role name> ::= <identifier>
----

[[user-identifier]]
[subs="specialcharacters,macros"]
----
<user identifier> ::= <identifier>
----

[[connection-name]]
[subs="specialcharacters,macros"]
----
<connection name> ::= <simple value specification>
----

[[SQL-server-name]]
[subs="specialcharacters,macros"]
----
<SQL-server name> ::= <simple value specification>
----

[[connection-user-name]]
[subs="specialcharacters,macros"]
----
<connection user name> ::= <simple value specification>
----

[[SQL-statement-name]]
[subs="specialcharacters,macros"]
----
<SQL statement name> ::=
    <<statement-name, <statement name> >>
  | <<extended-statement-name, <extended statement name> >>
----

[[statement-name]]
[subs="specialcharacters,macros"]
----
<statement name> ::= <identifier>
----

[[extended-statement-name]]
[subs="specialcharacters,macros"]
----
<extended statement name> ::= [ <scope option> ] <simple value specification>
----

[[dynamic-cursor-name]]
[subs="specialcharacters,macros"]
----
<dynamic cursor name> ::=
    <<cursor-name, <cursor name> >>
  | <<extended-cursor-name, <extended cursor name> >>
----

[[extended-cursor-name]]
[subs="specialcharacters,macros"]
----
<extended cursor name> ::= [ <scope option> ] <simple value specification>
----

[[descriptor-name]]
[subs="specialcharacters,macros"]
----
<descriptor name> ::= [ <scope option> ] <simple value specification>
----

[[scope-option]]
[subs="specialcharacters,macros"]
----
<scope option> ::=
    GLOBAL
  | LOCAL
----

[[window-name]]
[subs="specialcharacters,macros"]
----
<window name> ::= <identifier>
----

== 6 Scalar expressions


=== 6.1      <data type>

.Function

Specify a data type.


Format
[[data-type]]
[subs="specialcharacters,macros"]
----
<data type> ::=
    <<predefined-type, <predefined type> >>
  | <<row-type, <row type> >>
  | <<path-resolved-user-defined-type-name, <path-resolved user-defined type name> >>
  | <<reference-type, <reference type> >>
  | <<collection-type, <collection type> >>
----

[[predefined-type]]
[subs="specialcharacters,macros"]
----
<predefined type> ::=
    <<character-string-type, <character string type> >> [ CHARACTER SET <<character-set-specification, <character set specification> >> ]
    [ <<collate-clause, <collate clause> >> ]
  | <<national-character-string-type, <national character string type> >> [ <<collate-clause, <collate clause> >> ]
  | <<binary-large-object-string-type, <binary large object string type> >>
  | <<numeric-type, <numeric type> >>
  | <<boolean-type, <boolean type> >>
  | <<datetime-type, <datetime type> >>
  | <<interval-type, <interval type> >>
----

[[character-string-type]]
[subs="specialcharacters,macros"]
----
<character string type> ::=
    CHARACTER [ <<left-paren, <left paren> >> <<length, <length> >> <<right-paren, <right paren> >> ]
  | CHAR [ <<left-paren, <left paren> >> <<length, <length> >> <<right-paren, <right paren> >> ]
  | CHARACTER VARYING <<left-paren, <left paren> >> <<length, <length> >> <<right-paren, <right paren> >>
  | CHAR VARYING <<left-paren, <left paren> >> <<length, <length> >> <<right-paren, <right paren> >>
  | VARCHAR <<left-paren, <left paren> >> <<length, <length> >> <<right-paren, <right paren> >>
  | <<character-large-object-type, <character large object type> >>
----

[[character-large-object-type]]
[subs="specialcharacters,macros"]
----
<character large object type> ::=
    CHARACTER LARGE OBJECT [ <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >> ]
  | CHAR LARGE OBJECT [ <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >> ]
  | CLOB [ <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >> ]
----

[[national-character-string-type]]
[subs="specialcharacters,macros"]
----
<national character string type> ::=
    NATIONAL CHARACTER [ <<left-paren, <left paren> >> <<length, <length> >> <<right-paren, <right paren> >> ]
  | NATIONAL CHAR [ <<left-paren, <left paren> >> <<length, <length> >> <<right-paren, <right paren> >> ]
  | NCHAR [ <<left-paren, <left paren> >> <<length, <length> >> <<right-paren, <right paren> >> ]
  | NATIONAL CHARACTER VARYING <<left-paren, <left paren> >> <<length, <length> >> <<right-paren, <right paren> >>
  | NATIONAL CHAR VARYING <<left-paren, <left paren> >> <<length, <length> >> <<right-paren, <right paren> >>
  | NCHAR VARYING <<left-paren, <left paren> >> <<length, <length> >> <<right-paren, <right paren> >>
  | <<national-character-large-object-type, <national character large object type> >>
----

[[national-character-large-object-type]]
[subs="specialcharacters,macros"]
----
<national character large object type> ::=
    NATIONAL CHARACTER LARGE OBJECT [ <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >> ]
  | NCHAR LARGE OBJECT [ <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >> ]
  | NCLOB [ <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >> ]
----

[[binary-large-object-string-type]]
[subs="specialcharacters,macros"]
----
<binary large object string type> ::=
    BINARY LARGE OBJECT [ <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >> ]
  | BLOB [ <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >> ]
----

[[numeric-type]]
[subs="specialcharacters,macros"]
----
<numeric type> ::=
    <<exact-numeric-type, <exact numeric type> >>
  | <<approximate-numeric-type, <approximate numeric type> >>
----

[[exact-numeric-type]]
[subs="specialcharacters,macros"]
----
<exact numeric type> ::=
    NUMERIC [ <<left-paren, <left paren> >> <<precision, <precision> >> [ <<comma, <comma> >> <<scale, <scale> >> ] <<right-paren, <right paren> >> ]
  | DECIMAL [ <<left-paren, <left paren> >> <<precision, <precision> >> [ <<comma, <comma> >> <<scale, <scale> >> ] <<right-paren, <right paren> >> ]
  | DEC [ <<left-paren, <left paren> >> <<precision, <precision> >> [ <<comma, <comma> >> <<scale, <scale> >> ] <<right-paren, <right paren> >> ]
  | SMALLINT
  | INTEGER
  | INT
  | BIGINT
----

[[approximate-numeric-type]]
[subs="specialcharacters,macros"]
----
<approximate numeric type> ::=
    FLOAT [ <<left-paren, <left paren> >> <<precision, <precision> >> <<right-paren, <right paren> >> ]
  | REAL
  | DOUBLE PRECISION
----

[[length]]
[subs="specialcharacters,macros"]
----
<length> ::= <unsigned integer> [ <char length units> ]
----

[[large-object-length]]
[subs="specialcharacters,macros"]
----
<large object length> ::=
    <<unsigned-integer, <unsigned integer> >> [ <<multiplier, <multiplier> >> ] [ <<char-length-units, <char length units> >> ]
  | <<large-object-length-token, <large object length token> >> [ <<char-length-units, <char length units> >> ]
----

[[char-length-units]]
[subs="specialcharacters,macros"]
----
<char length units> ::=
    CHARACTERS
  | OCTETS
----

[[precision]]
[subs="specialcharacters,macros"]
----
<precision> ::= <unsigned integer>
----

[[scale]]
[subs="specialcharacters,macros"]
----
<scale> ::= <unsigned integer>
----

[[boolean-type]]
[subs="specialcharacters,macros"]
----
<boolean type> ::= BOOLEAN
----

[[datetime-type]]
[subs="specialcharacters,macros"]
----
<datetime type> ::=
    DATE
  | TIME [ <<left-paren, <left paren> >> <<time-precision, <time precision> >> <<right-paren, <right paren> >> ] [ <<with-or-without-time-zone, <with or without time zone> >> ]
  | TIMESTAMP [ <<left-paren, <left paren> >> <<timestamp-precision, <timestamp precision> >> <<right-paren, <right paren> >> ]
    [ <<with-or-without-time-zone, <with or without time zone> >> ]
----

[[with-or-without-time-zone]]
[subs="specialcharacters,macros"]
----
<with or without time zone> ::=
    WITH TIME ZONE
  | WITHOUT TIME ZONE
----

[[time-precision]]
[subs="specialcharacters,macros"]
----
<time precision> ::= <time fractional seconds precision>
----

[[timestamp-precision]]
[subs="specialcharacters,macros"]
----
<timestamp precision> ::= <time fractional seconds precision>
----

[[time-fractional-seconds-precision]]
[subs="specialcharacters,macros"]
----
<time fractional seconds precision> ::= <unsigned integer>
----

[[interval-type]]
[subs="specialcharacters,macros"]
----
<interval type> ::= INTERVAL <interval qualifier>
----

[[row-type]]
[subs="specialcharacters,macros"]
----
<row type> ::= ROW <row type body>
----

[[row-type-body]]
[subs="specialcharacters,macros"]
----
<row type body> ::=
    <<left-paren, <left paren> >> <<field-definition, <field definition> >> [ { <<comma, <comma> >> <<field-definition, <field definition> >> }... ] <<right-paren, <right paren> >>
----

[[reference-type]]
[subs="specialcharacters,macros"]
----
<reference type> ::= REF <left paren> <referenced type> <right paren> [ <scope clause> ]
----

[[scope-clause]]
[subs="specialcharacters,macros"]
----
<scope clause> ::= SCOPE <table name>
----

[[referenced-type]]
[subs="specialcharacters,macros"]
----
<referenced type> ::= <path-resolved user-defined type name>
----

[[path-resolved-user-defined-type-name]]
[subs="specialcharacters,macros"]
----
<path-resolved user-defined type name> ::= <user-defined type name>
----

[[collection-type]]
[subs="specialcharacters,macros"]
----
<collection type> ::=
    <<array-type, <array type> >>
  | <<multiset-type, <multiset type> >>
----

[[array-type]]
[subs="specialcharacters,macros"]
----
<array type> ::=
    <<data-type, <data type> >> ARRAY
    [ <<left-bracket-or-trigraph, <left bracket or trigraph> >> <<maximum-cardinality, <maximum cardinality> >> <<right-bracket-or-trigraph, <right bracket or trigraph> >> ]
----

[[maximum-cardinality]]
[subs="specialcharacters,macros"]
----
<maximum cardinality> ::= <unsigned integer>
----

[[multiset-type]]
[subs="specialcharacters,macros"]
----
<multiset type> ::= <data type> MULTISET
----

=== 6.2       <field definition>

.Function

Define a field of a row type.


Format
[[field-definition]]
[subs="specialcharacters,macros"]
----
<field definition> ::= <field name> <data type>
----

=== 6.3     <value expression primary>

.Function

Specify a value that is syntactically self-delimited.


Format
[[value-expression-primary]]
[subs="specialcharacters,macros"]
----
<value expression primary> ::=
    <<parenthesized-value-expression, <parenthesized value expression> >>
  | <<nonparenthesized-value-expression-primary, <nonparenthesized value expression primary> >>
----

[[parenthesized-value-expression]]
[subs="specialcharacters,macros"]
----
<parenthesized value expression> ::= <left paren> <value expression> <right paren>
----

[[nonparenthesized-value-expression-primary]]
[subs="specialcharacters,macros"]
----
<nonparenthesized value expression primary> ::=
    <<unsigned-value-specification, <unsigned value specification> >>
  | <<column-reference, <column reference> >>
  | <<set-function-specification, <set function specification> >>
  | <<window-function, <window function> >>
  | <<scalar-subquery, <scalar subquery> >>
  | <<case-expression, <case expression> >>
  | <<cast-specification, <cast specification> >>
  | <<field-reference, <field reference> >>
  | <<subtype-treatment, <subtype treatment> >>
  | <<method-invocation, <method invocation> >>
  | <<static-method-invocation, <static method invocation> >>
  | <<new-specification, <new specification> >>
  | <<attribute-or-method-reference, <attribute or method reference> >>
  | <<reference-resolution, <reference resolution> >>
  | <<collection-value-constructor, <collection value constructor> >>
  | <<array-element-reference, <array element reference> >>
  | <<multiset-element-reference, <multiset element reference> >>
  | <<routine-invocation, <routine invocation> >>
  | <<next-value-expression, <next value expression> >>
----

[[collection-value-constructor]]
[subs="specialcharacters,macros"]
----
<collection value constructor> ::=
    <<array-value-constructor, <array value constructor> >>
  | <<multiset-value-constructor, <multiset value constructor> >>
----

=== 6.4     <value specification> and <target specification>

.Function

Specify one or more values, host parameters, SQL parameters, dynamic parameters, or host variables.


Format
[[value-specification]]
[subs="specialcharacters,macros"]
----
<value specification> ::=
    <<literal, <literal> >>
  | <<general-value-specification, <general value specification> >>
----

[[unsigned-value-specification]]
[subs="specialcharacters,macros"]
----
<unsigned value specification> ::=
    <<unsigned-literal, <unsigned literal> >>
  | <<general-value-specification, <general value specification> >>
----

[[general-value-specification]]
[subs="specialcharacters,macros"]
----
<general value specification> ::=
    <<host-parameter-specification, <host parameter specification> >>
  | <<SQL-parameter-reference, <SQL parameter reference> >>
  | <<dynamic-parameter-specification, <dynamic parameter specification> >>
  | <<embedded-variable-specification, <embedded variable specification> >>
  | <<current-collation-specification, <current collation specification> >>
  | CURRENT_DEFAULT_TRANSFORM_GROUP
  | CURRENT_PATH
  | CURRENT_ROLE
  | CURRENT_TRANSFORM_GROUP_FOR_TYPE <<path-resolved-user-defined-type-name, <path-resolved user-defined type name> >>
  | CURRENT_USER
  | SESSION_USER
  | SYSTEM_USER
  | USER
  | VALUE
----

[[simple-value-specification]]
[subs="specialcharacters,macros"]
----
<simple value specification> ::=
    <<literal, <literal> >>
  | <<host-parameter-name, <host parameter name> >>
  | <<SQL-parameter-reference, <SQL parameter reference> >>
  | <<embedded-variable-name, <embedded variable name> >>
----

[[target-specification]]
[subs="specialcharacters,macros"]
----
<target specification> ::=
    <<host-parameter-specification, <host parameter specification> >>
  | <<SQL-parameter-reference, <SQL parameter reference> >>
  | <<column-reference, <column reference> >>
  | <<target-array-element-specification, <target array element specification> >>
  | <<dynamic-parameter-specification, <dynamic parameter specification> >>
  | <<embedded-variable-specification, <embedded variable specification> >>
----

[[simple-target-specification]]
[subs="specialcharacters,macros"]
----
<simple target specification> ::=
    <<host-parameter-specification, <host parameter specification> >>
  | <<SQL-parameter-reference, <SQL parameter reference> >>
  | <<column-reference, <column reference> >>
  | <<embedded-variable-name, <embedded variable name> >>
----

[[host-parameter-specification]]
[subs="specialcharacters,macros"]
----
<host parameter specification> ::= <host parameter name> [ <indicator parameter> ]
----

[[dynamic-parameter-specification]]
[subs="specialcharacters,macros"]
----
<dynamic parameter specification> ::= <question mark>
----

[[embedded-variable-specification]]
[subs="specialcharacters,macros"]
----
<embedded variable specification> ::= <embedded variable name> [ <indicator variable> ]
----

[[indicator-variable]]
[subs="specialcharacters,macros"]
----
<indicator variable> ::= [ INDICATOR ] <embedded variable name>
----

[[indicator-parameter]]
[subs="specialcharacters,macros"]
----
<indicator parameter> ::= [ INDICATOR ] <host parameter name>
----

[[target-array-element-specification]]
[subs="specialcharacters,macros"]
----
<target array element specification> ::=
    <<target-array-reference, <target array reference> >>
    <<left-bracket-or-trigraph, <left bracket or trigraph> >> <<simple-value-specification, <simple value specification> >> <<right-bracket-or-trigraph, <right bracket or trigraph> >>
----

[[target-array-reference]]
[subs="specialcharacters,macros"]
----
<target array reference> ::=
    <<SQL-parameter-reference, <SQL parameter reference> >>
  | <<column-reference, <column reference> >>
----

[[current-collation-specification]]
[subs="specialcharacters,macros"]
----
<current collation specification> ::=
    COLLATION FOR <<left-paren, <left paren> >> <<string-value-expression, <string value expression> >> <<right-paren, <right paren> >>
----

=== 6.5       <contextually typed value specification>

.Function

Specify a value whose data type is to be inferred from its context.


Format
[[contextually-typed-value-specification]]
[subs="specialcharacters,macros"]
----
<contextually typed value specification> ::=
    <<implicitly-typed-value-specification, <implicitly typed value specification> >>
  | <<default-specification, <default specification> >>
----

[[implicitly-typed-value-specification]]
[subs="specialcharacters,macros"]
----
<implicitly typed value specification> ::=
    <<null-specification, <null specification> >>
  | <<empty-specification, <empty specification> >>
----

[[null-specification]]
[subs="specialcharacters,macros"]
----
<null specification> ::= NULL
----

[[empty-specification]]
[subs="specialcharacters,macros"]
----
<empty specification> ::=
    ARRAY <<left-bracket-or-trigraph, <left bracket or trigraph> >> <<right-bracket-or-trigraph, <right bracket or trigraph> >>
  | MULTISET <<left-bracket-or-trigraph, <left bracket or trigraph> >> <<right-bracket-or-trigraph, <right bracket or trigraph> >>
----

[[default-specification]]
[subs="specialcharacters,macros"]
----
<default specification> ::= DEFAULT
----

=== 6.6       <identifier chain>

.Function

Disambiguate a <period>-separated chain of identifiers.


Format
[[identifier-chain]]
[subs="specialcharacters,macros"]
----
<identifier chain> ::= <identifier> [ { <period> <identifier> }... ]
----

[[basic-identifier-chain]]
[subs="specialcharacters,macros"]
----
<basic identifier chain> ::= <identifier chain>
----

=== 6.7       <column reference>

.Function

Reference a column.


Format
[[column-reference]]
[subs="specialcharacters,macros"]
----
<column reference> ::=
    <<basic-identifier-chain, <basic identifier chain> >>
  | MODULE <<period, <period> >> <<qualified-identifier, <qualified identifier> >> <<period, <period> >> <<column-name, <column name> >>
----

=== 6.8      <SQL parameter reference>

.Function

Reference an SQL parameter.


Format
[[SQL-parameter-reference]]
[subs="specialcharacters,macros"]
----
<SQL parameter reference> ::= <basic identifier chain>
----

=== 6.9       <set function specification>

.Function

Specify a value derived by the application of a function to an argument.


Format
[[set-function-specification]]
[subs="specialcharacters,macros"]
----
<set function specification> ::=
    <<aggregate-function, <aggregate function> >>
  | <<grouping-operation, <grouping operation> >>
----

[[grouping-operation]]
[subs="specialcharacters,macros"]
----
<grouping operation> ::=
    GROUPING <<left-paren, <left paren> >> <<column-reference, <column reference> >>
    [ { <<comma, <comma> >> <<column-reference, <column reference> >> }... ] <<right-paren, <right paren> >>
----

=== 6.10 <window function>

.Function

Specify a window function.


Format
[[window-function]]
[subs="specialcharacters,macros"]
----
<window function> ::= <window function type> OVER <window name or specification>
----

[[window-function-type]]
[subs="specialcharacters,macros"]
----
<window function type> ::=
    <<rank-function-type, <rank function type> >> <<left-paren, <left paren> >> <<right-paren, <right paren> >>
  | ROW_NUMBER <<left-paren, <left paren> >> <<right-paren, <right paren> >>
  | <<aggregate-function, <aggregate function> >>
----

[[rank-function-type]]
[subs="specialcharacters,macros"]
----
<rank function type> ::=
    RANK
  | DENSE_RANK
  | PERCENT_RANK
  | CUME_DIST
----

[[window-name-or-specification]]
[subs="specialcharacters,macros"]
----
<window name or specification> ::=
    <<window-name, <window name> >>
  | <<in-line-window-specification, <in-line window specification> >>
----

[[in-line-window-specification]]
[subs="specialcharacters,macros"]
----
<in-line window specification> ::= <window specification>
----

=== 6.11 <case expression>

.Function

Specify a conditional value.


Format
[[case-expression]]
[subs="specialcharacters,macros"]
----
<case expression> ::=
    <<case-abbreviation, <case abbreviation> >>
  | <<case-specification, <case specification> >>
----

[[case-abbreviation]]
[subs="specialcharacters,macros"]
----
<case abbreviation> ::=
    NULLIF <<left-paren, <left paren> >> <<value-expression, <value expression> >> <<comma, <comma> >> <<value-expression, <value expression> >> <<right-paren, <right paren> >>
  | COALESCE <<left-paren, <left paren> >> <<value-expression, <value expression> >>
    { <<comma, <comma> >> <<value-expression, <value expression> >> }... <<right-paren, <right paren> >>
----

[[case-specification]]
[subs="specialcharacters,macros"]
----
<case specification> ::=
    <<simple-case, <simple case> >>
  | <<searched-case, <searched case> >>
----

[[simple-case]]
[subs="specialcharacters,macros"]
----
<simple case> ::= CASE <case operand> <simple when clause>... [ <else clause> ] END
----

[[searched-case]]
[subs="specialcharacters,macros"]
----
<searched case> ::= CASE <searched when clause>... [ <else clause> ] END
----

[[simple-when-clause]]
[subs="specialcharacters,macros"]
----
<simple when clause> ::= WHEN <when operand list> THEN <result>
----

[[searched-when-clause]]
[subs="specialcharacters,macros"]
----
<searched when clause> ::= WHEN <search condition> THEN <result>
----

[[else-clause]]
[subs="specialcharacters,macros"]
----
<else clause> ::= ELSE <result>
----

[[case-operand]]
[subs="specialcharacters,macros"]
----
<case operand> ::=
    <<row-value-predicand, <row value predicand> >>
  | <<overlaps-predicate-part-1, <overlaps predicate part 1> >>
----

[[when-operand-list]]
[subs="specialcharacters,macros"]
----
<when operand list> ::= <when operand> [ { <comma> <when operand> }... ]
----

[[when-operand]]
[subs="specialcharacters,macros"]
----
<when operand> ::=
    <<row-value-predicand, <row value predicand> >>
  | <<comparison-predicate-part-2, <comparison predicate part 2> >>
  | <<between-predicate-part-2, <between predicate part 2> >>
  | <<in-predicate-part-2, <in predicate part 2> >>
  | <<character-like-predicate-part-2, <character like predicate part 2> >>
  | <<octet-like-predicate-part-2, <octet like predicate part 2> >>
  | <<similar-predicate-part-2, <similar predicate part 2> >>
  | <<null-predicate-part-2, <null predicate part 2> >>
  | <<quantified-comparison-predicate-part-2, <quantified comparison predicate part 2> >>
  | <<normalized-predicate-part-2, <normalized predicate part 2> >>
  | <<match-predicate-part-2, <match predicate part 2> >>
  | <<overlaps-predicate-part-2, <overlaps predicate part 2> >>
  | <<distinct-predicate-part-2, <distinct predicate part 2> >>
  | <<member-predicate-part-2, <member predicate part 2> >>
  | <<submultiset-predicate-part-2, <submultiset predicate part 2> >>
  | <<set-predicate-part-2, <set predicate part 2> >>
  | <<type-predicate-part-2, <type predicate part 2> >>
----

[[result]]
[subs="specialcharacters,macros"]
----
<result> ::=
    <<result-expression, <result expression> >>
  | NULL
----

[[result-expression]]
[subs="specialcharacters,macros"]
----
<result expression> ::= <value expression>
----

=== 6.12 <cast specification>

.Function

Specify a data conversion.


Format
[[cast-specification]]
[subs="specialcharacters,macros"]
----
<cast specification> ::= CAST <left paren> <cast operand> AS <cast target> <right paren>
----

[[cast-operand]]
[subs="specialcharacters,macros"]
----
<cast operand> ::=
    <<value-expression, <value expression> >>
  | <<implicitly-typed-value-specification, <implicitly typed value specification> >>
----

[[cast-target]]
[subs="specialcharacters,macros"]
----
<cast target> ::=
    <<domain-name, <domain name> >>
  | <<data-type, <data type> >>
----

=== 6.13 <next value expression>

.Function

Return the next value of a sequence generator.


Format
[[next-value-expression]]
[subs="specialcharacters,macros"]
----
<next value expression> ::= NEXT VALUE FOR <sequence generator name>
----

=== 6.14 <field reference>

.Function

Reference a field of a row value.


Format
[[field-reference]]
[subs="specialcharacters,macros"]
----
<field reference> ::= <value expression primary> <period> <field name>
----

=== 6.15 <subtype treatment>

.Function

Modify the declared type of an expression.


Format
[[subtype-treatment]]
[subs="specialcharacters,macros"]
----
<subtype treatment> ::=
    TREAT <<left-paren, <left paren> >> <<subtype-operand, <subtype operand> >> AS <<target-subtype, <target subtype> >> <<right-paren, <right paren> >>
----

[[subtype-operand]]
[subs="specialcharacters,macros"]
----
<subtype operand> ::= <value expression>
----

[[target-subtype]]
[subs="specialcharacters,macros"]
----
<target subtype> ::=
    <<path-resolved-user-defined-type-name, <path-resolved user-defined type name> >>
  | <<reference-type, <reference type> >>
----

=== 6.16 <method invocation>

.Function

Reference an SQL-invoked method of a user-defined type value.


Format
[[method-invocation]]
[subs="specialcharacters,macros"]
----
<method invocation> ::=
    <<direct-invocation, <direct invocation> >>
  | <<generalized-invocation, <generalized invocation> >>
----

[[direct-invocation]]
[subs="specialcharacters,macros"]
----
<direct invocation> ::=
    <<value-expression-primary, <value expression primary> >> <<period, <period> >> <<method-name, <method name> >> [ <<SQL-argument-list, <SQL argument list> >> ]
----

[[generalized-invocation]]
[subs="specialcharacters,macros"]
----
<generalized invocation> ::=
    <<left-paren, <left paren> >> <<value-expression-primary, <value expression primary> >> AS <<data-type, <data type> >> <<right-paren, <right paren> >>
    <<period, <period> >> <<method-name, <method name> >> [ <<SQL-argument-list, <SQL argument list> >> ]
----

[[method-selection]]
[subs="specialcharacters,macros"]
----
<method selection> ::= <routine invocation>
----

[[constructor-method-selection]]
[subs="specialcharacters,macros"]
----
<constructor method selection> ::= <routine invocation>
----

=== 6.17 <static method invocation>

.Function

Invoke a static method.


Format
[[static-method-invocation]]
[subs="specialcharacters,macros"]
----
<static method invocation> ::=
    <<path-resolved-user-defined-type-name, <path-resolved user-defined type name> >> <<double-colon, <double colon> >> <<method-name, <method name> >>
    [ <<SQL-argument-list, <SQL argument list> >> ]
----

[[static-method-selection]]
[subs="specialcharacters,macros"]
----
<static method selection> ::= <routine invocation>
----

=== 6.18 <new specification>

.Function

Invoke a method on a newly-constructed value of a structured type.


Format
[[new-specification]]
[subs="specialcharacters,macros"]
----
<new specification> ::=
    NEW <<path-resolved-user-defined-type-name, <path-resolved user-defined type name> >> <<SQL-argument-list, <SQL argument list> >>
----

[[new-invocation]]
[subs="specialcharacters,macros"]
----
<new invocation> ::=
    <<method-invocation, <method invocation> >>
  | <<routine-invocation, <routine invocation> >>
----

=== 6.19 <attribute or method reference>

.Function

Return a value acquired by accessing a column of the row identified by a value of a reference type or by
invoking an SQL-invoked method.


Format
[[attribute-or-method-reference]]
[subs="specialcharacters,macros"]
----
<attribute or method reference> ::=
    <<value-expression-primary, <value expression primary> >> <<dereference-operator, <dereference operator> >> <<qualified-identifier, <qualified identifier> >>
    [ <<SQL-argument-list, <SQL argument list> >> ]
----

[[dereference-operator]]
[subs="specialcharacters,macros"]
----
<dereference operator> ::= <right arrow>
----

=== 6.20 <dereference operation>

.Function

Access a column of the row identified by a value of a reference type.


Format
[[dereference-operation]]
[subs="specialcharacters,macros"]
----
<dereference operation> ::=
    <<reference-value-expression, <reference value expression> >> <<dereference-operator, <dereference operator> >> <<attribute-name, <attribute name> >>
----

=== 6.21 <method reference>

.Function

Return a value acquired from invoking an SQL-invoked routine that is a method.


Format
[[method-reference]]
[subs="specialcharacters,macros"]
----
<method reference> ::=
    <<value-expression-primary, <value expression primary> >> <<dereference-operator, <dereference operator> >> <<method-name, <method name> >> <<SQL-argument-list, <SQL argument list> >>
----

=== 6.22 <reference resolution>

.Function

Obtain the value referenced by a reference value.


Format
[[reference-resolution]]
[subs="specialcharacters,macros"]
----
<reference resolution> ::=
    DEREF <<left-paren, <left paren> >> <<reference-value-expression, <reference value expression> >> <<right-paren, <right paren> >>
----

=== 6.23 <array element reference>

.Function

Return an element of an array.


Format
[[array-element-reference]]
[subs="specialcharacters,macros"]
----
<array element reference> ::=
    <<array-value-expression, <array value expression> >>
    <<left-bracket-or-trigraph, <left bracket or trigraph> >> <<numeric-value-expression, <numeric value expression> >> <<right-bracket-or-trigraph, <right bracket or trigraph> >>
----

=== 6.24 <multiset element reference>

.Function

Return the sole element of a multiset of one element.


Format
[[multiset-element-reference]]
[subs="specialcharacters,macros"]
----
<multiset element reference> ::=
    ELEMENT <<left-paren, <left paren> >> <<multiset-value-expression, <multiset value expression> >> <<right-paren, <right paren> >>
----

=== 6.25 <value expression>

.Function

Specify a value.


Format
[[value-expression]]
[subs="specialcharacters,macros"]
----
<value expression> ::=
    <<common-value-expression, <common value expression> >>
  | <<boolean-value-expression, <boolean value expression> >>
  | <<row-value-expression, <row value expression> >>
----

[[common-value-expression]]
[subs="specialcharacters,macros"]
----
<common value expression> ::=
    <<numeric-value-expression, <numeric value expression> >>
  | <<string-value-expression, <string value expression> >>
  | <<datetime-value-expression, <datetime value expression> >>
  | <<interval-value-expression, <interval value expression> >>
  | <<user-defined-type-value-expression, <user-defined type value expression> >>
  | <<reference-value-expression, <reference value expression> >>
  | <<collection-value-expression, <collection value expression> >>
----

[[user-defined-type-value-expression]]
[subs="specialcharacters,macros"]
----
<user-defined type value expression> ::= <value expression primary>
----

[[reference-value-expression]]
[subs="specialcharacters,macros"]
----
<reference value expression> ::= <value expression primary>
----

[[collection-value-expression]]
[subs="specialcharacters,macros"]
----
<collection value expression> ::=
    <<array-value-expression, <array value expression> >>
  | <<multiset-value-expression, <multiset value expression> >>
----

=== 6.26 <numeric value expression>

.Function

Specify a numeric value.


Format
[[numeric-value-expression]]
[subs="specialcharacters,macros"]
----
<numeric value expression> ::=
    <<term, <term> >>
  | <<numeric-value-expression, <numeric value expression> >> <<plus-sign, <plus sign> >> <<term, <term> >>
  | <<numeric-value-expression, <numeric value expression> >> <<minus-sign, <minus sign> >> <<term, <term> >>
----

[[term]]
[subs="specialcharacters,macros"]
----
<term> ::=
    <<factor, <factor> >>
  | <<term, <term> >> <<asterisk, <asterisk> >> <<factor, <factor> >>
  | <<term, <term> >> <<solidus, <solidus> >> <<factor, <factor> >>
----

[[factor]]
[subs="specialcharacters,macros"]
----
<factor> ::= [ <sign> ] <numeric primary>
----

[[numeric-primary]]
[subs="specialcharacters,macros"]
----
<numeric primary> ::=
    <<value-expression-primary, <value expression primary> >>
  | <<numeric-value-function, <numeric value function> >>
----

=== 6.27 <numeric value function>

.Function

Specify a function yielding a value of type numeric.


Format
[[numeric-value-function]]
[subs="specialcharacters,macros"]
----
<numeric value function> ::=
    <<position-expression, <position expression> >>
  | <<extract-expression, <extract expression> >>
  | <<length-expression, <length expression> >>
  | <<cardinality-expression, <cardinality expression> >>
  | <<absolute-value-expression, <absolute value expression> >>
  | <<modulus-expression, <modulus expression> >>
  | <<natural-logarithm, <natural logarithm> >>
  | <<exponential-function, <exponential function> >>
  | <<power-function, <power function> >>
  | <<square-root, <square root> >>
  | <<floor-function, <floor function> >>
  | <<ceiling-function, <ceiling function> >>
  | <<width-bucket-function, <width bucket function> >>
----

[[position-expression]]
[subs="specialcharacters,macros"]
----
<position expression> ::=
    <<string-position-expression, <string position expression> >>
  | <<blob-position-expression, <blob position expression> >>
----

[[string-position-expression]]
[subs="specialcharacters,macros"]
----
<string position expression> ::=
    POSITION <<left-paren, <left paren> >> <<string-value-expression, <string value expression> >> IN <<string-value-expression, <string value expression> >>
    [ USING <<char-length-units, <char length units> >> ] <<right-paren, <right paren> >>
----

[[blob-position-expression]]
[subs="specialcharacters,macros"]
----
<blob position expression> ::=
    POSITION <<left-paren, <left paren> >> <<blob-value-expression, <blob value expression> >> IN <<blob-value-expression, <blob value expression> >> <<right-paren, <right paren> >>
----

[[length-expression]]
[subs="specialcharacters,macros"]
----
<length expression> ::=
    <<char-length-expression, <char length expression> >>
  | <<octet-length-expression, <octet length expression> >>
----

[[char-length-expression]]
[subs="specialcharacters,macros"]
----
<char length expression> ::=
    { CHAR_LENGTH | CHARACTER_LENGTH } <<left-paren, <left paren> >> <<string-value-expression, <string value expression> >>
    [ USING <<char-length-units, <char length units> >> ] <<right-paren, <right paren> >>
----

[[octet-length-expression]]
[subs="specialcharacters,macros"]
----
<octet length expression> ::=
    OCTET_LENGTH <<left-paren, <left paren> >> <<string-value-expression, <string value expression> >> <<right-paren, <right paren> >>
----

[[extract-expression]]
[subs="specialcharacters,macros"]
----
<extract expression> ::=
    EXTRACT <<left-paren, <left paren> >> <<extract-field, <extract field> >> FROM <<extract-source, <extract source> >> <<right-paren, <right paren> >>
----

[[extract-field]]
[subs="specialcharacters,macros"]
----
<extract field> ::=
    <<primary-datetime-field, <primary datetime field> >>
  | <<time-zone-field, <time zone field> >>
----

[[time-zone-field]]
[subs="specialcharacters,macros"]
----
<time zone field> ::=
    TIMEZONE_HOUR
  | TIMEZONE_MINUTE
----

[[extract-source]]
[subs="specialcharacters,macros"]
----
<extract source> ::=
    <<datetime-value-expression, <datetime value expression> >>
  | <<interval-value-expression, <interval value expression> >>
----

[[cardinality-expression]]
[subs="specialcharacters,macros"]
----
<cardinality expression> ::=
    CARDINALITY <<left-paren, <left paren> >> <<collection-value-expression, <collection value expression> >> <<right-paren, <right paren> >>
----

[[absolute-value-expression]]
[subs="specialcharacters,macros"]
----
<absolute value expression> ::= ABS <left paren> <numeric value expression> <right paren>
----

[[modulus-expression]]
[subs="specialcharacters,macros"]
----
<modulus expression> ::=
    MOD <<left-paren, <left paren> >> <<numeric-value-expression-dividend, <numeric value expression dividend> >> <<comma, <comma> >>
    <<numeric-value-expression-divisor, <numeric value expression divisor> >><<right-paren, <right paren> >>
----

[[numeric-value-expression-dividend]]
[subs="specialcharacters,macros"]
----
<numeric value expression dividend> ::= <numeric value expression>
----

[[numeric-value-expression-divisor]]
[subs="specialcharacters,macros"]
----
<numeric value expression divisor> ::= <numeric value expression>
----

[[natural-logarithm]]
[subs="specialcharacters,macros"]
----
<natural logarithm> ::= LN <left paren> <numeric value expression> <right paren>
----

[[exponential-function]]
[subs="specialcharacters,macros"]
----
<exponential function> ::= EXP <left paren> <numeric value expression> <right paren>
----

[[power-function]]
[subs="specialcharacters,macros"]
----
<power function> ::=
    POWER <<left-paren, <left paren> >> <<numeric-value-expression-base, <numeric value expression base> >> <<comma, <comma> >>
    <<numeric-value-expression-exponent, <numeric value expression exponent> >> <<right-paren, <right paren> >>
----

[[numeric-value-expression-base]]
[subs="specialcharacters,macros"]
----
<numeric value expression base> ::= <numeric value expression>
----

[[numeric-value-expression-exponent]]
[subs="specialcharacters,macros"]
----
<numeric value expression exponent> ::= <numeric value expression>
----

[[square-root]]
[subs="specialcharacters,macros"]
----
<square root> ::= SQRT <left paren> <numeric value expression> <right paren>
----

[[floor-function]]
[subs="specialcharacters,macros"]
----
<floor function> ::= FLOOR <left paren> <numeric value expression> <right paren>
----

[[ceiling-function]]
[subs="specialcharacters,macros"]
----
<ceiling function> ::=
    { CEIL | CEILING } <<left-paren, <left paren> >> <<numeric-value-expression, <numeric value expression> >> <<right-paren, <right paren> >>
----

[[width-bucket-function]]
[subs="specialcharacters,macros"]
----
<width bucket function> ::=
    WIDTH_BUCKET <<left-paren, <left paren> >> <<width-bucket-operand, <width bucket operand> >> <<comma, <comma> >> <<width-bucket-bound-1, <width bucket bound 1> >> <<comma, <comma> >>
    <<width-bucket-bound-2, <width bucket bound 2> >> <<comma, <comma> >> <<width-bucket-count, <width bucket count> >> <<right-paren, <right paren> >>
----

[[width-bucket-operand]]
[subs="specialcharacters,macros"]
----
<width bucket operand> ::= <numeric value expression>
----

[[width-bucket-bound-1]]
[subs="specialcharacters,macros"]
----
<width bucket bound 1> ::= <numeric value expression>
----

[[width-bucket-bound-2]]
[subs="specialcharacters,macros"]
----
<width bucket bound 2> ::= <numeric value expression>
----

[[width-bucket-count]]
[subs="specialcharacters,macros"]
----
<width bucket count> ::= <numeric value expression>
----

=== 6.28 <string value expression>

.Function

Specify a character string value or a binary string value.


Format
[[string-value-expression]]
[subs="specialcharacters,macros"]
----
<string value expression> ::=
    <<character-value-expression, <character value expression> >>
  | <<blob-value-expression, <blob value expression> >>
----

[[character-value-expression]]
[subs="specialcharacters,macros"]
----
<character value expression> ::=
    <<concatenation, <concatenation> >>
  | <<character-factor, <character factor> >>
----

[[concatenation]]
[subs="specialcharacters,macros"]
----
<concatenation> ::= <character value expression> <concatenation operator> <character factor>
----

[[character-factor]]
[subs="specialcharacters,macros"]
----
<character factor> ::= <character primary> [ <collate clause> ]
----

[[character-primary]]
[subs="specialcharacters,macros"]
----
<character primary> ::=
    <<value-expression-primary, <value expression primary> >>
  | <<string-value-function, <string value function> >>
----

[[blob-value-expression]]
[subs="specialcharacters,macros"]
----
<blob value expression> ::=
    <<blob-concatenation, <blob concatenation> >>
  | <<blob-factor, <blob factor> >>
----

[[blob-factor]]
[subs="specialcharacters,macros"]
----
<blob factor> ::= <blob primary>
----

[[blob-primary]]
[subs="specialcharacters,macros"]
----
<blob primary> ::=
    <<value-expression-primary, <value expression primary> >>
  | <<string-value-function, <string value function> >>
----

[[blob-concatenation]]
[subs="specialcharacters,macros"]
----
<blob concatenation> ::= <blob value expression> <concatenation operator> <blob factor>
----

=== 6.29 <string value function>

.Function

Specify a function yielding a value of type character string or binary string.


Format
[[string-value-function]]
[subs="specialcharacters,macros"]
----
<string value function> ::=
    <<character-value-function, <character value function> >>
  | <<blob-value-function, <blob value function> >>
----

[[character-value-function]]
[subs="specialcharacters,macros"]
----
<character value function> ::=
    <<character-substring-function, <character substring function> >>
  | <<regular-expression-substring-function, <regular expression substring function> >>
  | <<fold, <fold> >>
  | <<transcoding, <transcoding> >>
  | <<character-transliteration, <character transliteration> >>
  | <<trim-function, <trim function> >>
  | <<character-overlay-function, <character overlay function> >>
  | <<normalize-function, <normalize function> >>
  | <<specific-type-method, <specific type method> >>
----

[[character-substring-function]]
[subs="specialcharacters,macros"]
----
<character substring function> ::=
    SUBSTRING <<left-paren, <left paren> >> <<character-value-expression, <character value expression> >> FROM <<start-position, <start position> >>
    [ FOR <<string-length, <string length> >> ] [ USING <<char-length-units, <char length units> >> ] <<right-paren, <right paren> >>
----

[[regular-expression-substring-function]]
[subs="specialcharacters,macros"]
----
<regular expression substring function> ::=
    SUBSTRING <<left-paren, <left paren> >> <<character-value-expression, <character value expression> >> SIMILAR <<character-value-expression, <character value expression> >>
    ESCAPE <<escape-character, <escape character> >> <<right-paren, <right paren> >>
----

[[fold]]
[subs="specialcharacters,macros"]
----
<fold> ::= { UPPER | LOWER } <left paren> <character value expression> <right paren>
----

[[transcoding]]
[subs="specialcharacters,macros"]
----
<transcoding> ::=
    CONVERT <<left-paren, <left paren> >> <<character-value-expression, <character value expression> >>
    USING <<transcoding-name, <transcoding name> >> <<right-paren, <right paren> >>
----

[[character-transliteration]]
[subs="specialcharacters,macros"]
----
<character transliteration> ::=
    TRANSLATE <<left-paren, <left paren> >> <<character-value-expression, <character value expression> >>
    USING <<transliteration-name, <transliteration name> >> <<right-paren, <right paren> >>
----

[[trim-function]]
[subs="specialcharacters,macros"]
----
<trim function> ::= TRIM <left paren> <trim operands> <right paren>
----

[[trim-operands]]
[subs="specialcharacters,macros"]
----
<trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source>
----

[[trim-source]]
[subs="specialcharacters,macros"]
----
<trim source> ::= <character value expression>
----

[[trim-specification]]
[subs="specialcharacters,macros"]
----
<trim specification> ::=
    LEADING
  | TRAILING
  | BOTH
----

[[trim-character]]
[subs="specialcharacters,macros"]
----
<trim character> ::= <character value expression>
----

[[character-overlay-function]]
[subs="specialcharacters,macros"]
----
<character overlay function> ::=
     OVERLAY <<left-paren, <left paren> >> <<character-value-expression, <character value expression> >> PLACING <<character-value-expression, <character value expression> >>
     FROM <<start-position, <start position> >> [ FOR <<string-length, <string length> >> ]
     [ USING <<char-length-units, <char length units> >> ] <<right-paren, <right paren> >>
----

[[normalize-function]]
[subs="specialcharacters,macros"]
----
<normalize function> ::= NORMALIZE <left paren> <character value expression> <right paren>
----

[[specific-type-method]]
[subs="specialcharacters,macros"]
----
<specific type method> ::=
    <<user-defined-type-value-expression, <user-defined type value expression> >> <<period, <period> >> SPECIFICTYPE
    [ <<left-paren, <left paren> >> <<right-paren, <right paren> >> ]
----

[[blob-value-function]]
[subs="specialcharacters,macros"]
----
<blob value function> ::=
    <<blob-substring-function, <blob substring function> >>
  | <<blob-trim-function, <blob trim function> >>
  | <<blob-overlay-function, <blob overlay function> >>
----

[[blob-substring-function]]
[subs="specialcharacters,macros"]
----
<blob substring function> ::=
    SUBSTRING <<left-paren, <left paren> >> <<blob-value-expression, <blob value expression> >> FROM <<start-position, <start position> >>
    [ FOR <<string-length, <string length> >> ] <<right-paren, <right paren> >>
----

[[blob-trim-function]]
[subs="specialcharacters,macros"]
----
<blob trim function> ::= TRIM <left paren> <blob trim operands> <right paren>
----

[[blob-trim-operands]]
[subs="specialcharacters,macros"]
----
<blob trim operands> ::=
    [ [ <<trim-specification, <trim specification> >> ] [ <<trim-octet, <trim octet> >> ] FROM ] <<blob-trim-source, <blob trim source> >>
----

[[blob-trim-source]]
[subs="specialcharacters,macros"]
----
<blob trim source> ::= <blob value expression>
----

[[trim-octet]]
[subs="specialcharacters,macros"]
----
<trim octet> ::= <blob value expression>
----

[[blob-overlay-function]]
[subs="specialcharacters,macros"]
----
<blob overlay function> ::=
    OVERLAY <<left-paren, <left paren> >> <<blob-value-expression, <blob value expression> >> PLACING <<blob-value-expression, <blob value expression> >>
    FROM <<start-position, <start position> >> [ FOR <<string-length, <string length> >> ] <<right-paren, <right paren> >>
----

[[start-position]]
[subs="specialcharacters,macros"]
----
<start position> ::= <numeric value expression>
----

[[string-length]]
[subs="specialcharacters,macros"]
----
<string length> ::= <numeric value expression>
----

=== 6.30 <datetime value expression>

.Function

Specify a datetime value.


Format
[[datetime-value-expression]]
[subs="specialcharacters,macros"]
----
<datetime value expression> ::=
    <<datetime-term, <datetime term> >>
  | <<interval-value-expression, <interval value expression> >> <<plus-sign, <plus sign> >> <<datetime-term, <datetime term> >>
  | <<datetime-value-expression, <datetime value expression> >> <<plus-sign, <plus sign> >> <<interval-term, <interval term> >>
  | <<datetime-value-expression, <datetime value expression> >> <<minus-sign, <minus sign> >> <<interval-term, <interval term> >>
----

[[datetime-term]]
[subs="specialcharacters,macros"]
----
<datetime term> ::= <datetime factor>
----

[[datetime-factor]]
[subs="specialcharacters,macros"]
----
<datetime factor> ::= <datetime primary> [ <time zone> ]
----

[[datetime-primary]]
[subs="specialcharacters,macros"]
----
<datetime primary> ::=
    <<value-expression-primary, <value expression primary> >>
  | <<datetime-value-function, <datetime value function> >>
----

[[time-zone]]
[subs="specialcharacters,macros"]
----
<time zone> ::= AT <time zone specifier>
----

[[time-zone-specifier]]
[subs="specialcharacters,macros"]
----
<time zone specifier> ::=
    LOCAL
  | TIME ZONE <<interval-primary, <interval primary> >>
----

=== 6.31 <datetime value function>

.Function

Specify a function yielding a value of type datetime.


Format
[[datetime-value-function]]
[subs="specialcharacters,macros"]
----
<datetime value function> ::=
    <<current-date-value-function, <current date value function> >>
  | <<current-time-value-function, <current time value function> >>
  | <<current-timestamp-value-function, <current timestamp value function> >>
  | <<current-local-time-value-function, <current local time value function> >>
  | <<current-local-timestamp-value-function, <current local timestamp value function> >>
----

[[current-date-value-function]]
[subs="specialcharacters,macros"]
----
<current date value function> ::= CURRENT_DATE
----

[[current-time-value-function]]
[subs="specialcharacters,macros"]
----
<current time value function> ::=
    CURRENT_TIME [ <<left-paren, <left paren> >> <<time-precision, <time precision> >> <<right-paren, <right paren> >> ]
----

[[current-local-time-value-function]]
[subs="specialcharacters,macros"]
----
<current local time value function> ::=
    LOCALTIME [ <<left-paren, <left paren> >> <<time-precision, <time precision> >> <<right-paren, <right paren> >> ]
----

[[current-timestamp-value-function]]
[subs="specialcharacters,macros"]
----
<current timestamp value function> ::=
    CURRENT_TIMESTAMP [ <<left-paren, <left paren> >> <<timestamp-precision, <timestamp precision> >> <<right-paren, <right paren> >> ]
----

[[current-local-timestamp-value-function]]
[subs="specialcharacters,macros"]
----
<current local timestamp value function> ::=
    LOCALTIMESTAMP [ <<left-paren, <left paren> >> <<timestamp-precision, <timestamp precision> >> <<right-paren, <right paren> >> ]
----

=== 6.32 <interval value expression>

.Function

Specify an interval value.


Format
[[interval-value-expression]]
[subs="specialcharacters,macros"]
----
<interval value expression> ::=
    <<interval-term, <interval term> >>
  | <<interval-value-expression-1, <interval value expression 1> >> <<plus-sign, <plus sign> >> <<interval-term-1, <interval term 1> >>
  | <<interval-value-expression-1, <interval value expression 1> >> <<minus-sign, <minus sign> >> <<interval-term-1, <interval term 1> >>
  | <<left-paren, <left paren> >> <<datetime-value-expression, <datetime value expression> >> <<minus-sign, <minus sign> >> <<datetime-term, <datetime term> >> <<right-paren, <right paren> >>
    <<interval-qualifier, <interval qualifier> >>
----

[[interval-term]]
[subs="specialcharacters,macros"]
----
<interval term> ::=
    <<interval-factor, <interval factor> >>
  | <<interval-term-2, <interval term 2> >> <<asterisk, <asterisk> >> <<factor, <factor> >>
  | <<interval-term-2, <interval term 2> >> <<solidus, <solidus> >> <<factor, <factor> >>
  | <<term, <term> >> <<asterisk, <asterisk> >> <<interval-factor, <interval factor> >>
----

[[interval-factor]]
[subs="specialcharacters,macros"]
----
<interval factor> ::= [ <sign> ] <interval primary>
----

[[interval-primary]]
[subs="specialcharacters,macros"]
----
<interval primary> ::=
    <<value-expression-primary, <value expression primary> >> [ <<interval-qualifier, <interval qualifier> >> ]
  | <<interval-value-function, <interval value function> >>
----

[[interval-value-expression-1]]
[subs="specialcharacters,macros"]
----
<interval value expression 1> ::= <interval value expression>
----

[[interval-term-1]]
[subs="specialcharacters,macros"]
----
<interval term 1> ::= <interval term>
----

[[interval-term-2]]
[subs="specialcharacters,macros"]
----
<interval term 2> ::= <interval term>
----

=== 6.33 <interval value function>

.Function

Specify a function yielding a value of type interval.


Format
[[interval-value-function]]
[subs="specialcharacters,macros"]
----
<interval value function> ::= <interval absolute value function>
----

[[interval-absolute-value-function]]
[subs="specialcharacters,macros"]
----
<interval absolute value function> ::=
    ABS <<left-paren, <left paren> >> <<interval-value-expression, <interval value expression> >> <<right-paren, <right paren> >>
----

=== 6.34 <boolean value expression>

.Function

Specify a boolean value.


Format
[[boolean-value-expression]]
[subs="specialcharacters,macros"]
----
<boolean value expression> ::=
    <<boolean-term, <boolean term> >>
  | <<boolean-value-expression, <boolean value expression> >> OR <<boolean-term, <boolean term> >>
----

[[boolean-term]]
[subs="specialcharacters,macros"]
----
<boolean term> ::=
    <<boolean-factor, <boolean factor> >>
  | <<boolean-term, <boolean term> >> AND <<boolean-factor, <boolean factor> >>
----

[[boolean-factor]]
[subs="specialcharacters,macros"]
----
<boolean factor> ::= [ NOT ] <boolean test>
----

[[boolean-test]]
[subs="specialcharacters,macros"]
----
<boolean test> ::= <boolean primary> [ IS [ NOT ] <truth value> ]
----

[[truth-value]]
[subs="specialcharacters,macros"]
----
<truth value> ::=
    TRUE
  | FALSE
  | UNKNOWN
----

[[boolean-primary]]
[subs="specialcharacters,macros"]
----
<boolean primary> ::=
    <<predicate, <predicate> >>
  | <<boolean-predicand, <boolean predicand> >>
----

[[boolean-predicand]]
[subs="specialcharacters,macros"]
----
<boolean predicand> ::=
    <<parenthesized-boolean-value-expression, <parenthesized boolean value expression> >>
  | <<nonparenthesized-value-expression-primary, <nonparenthesized value expression primary> >>
----

[[parenthesized-boolean-value-expression]]
[subs="specialcharacters,macros"]
----
<parenthesized boolean value expression> ::=
    <<left-paren, <left paren> >> <<boolean-value-expression, <boolean value expression> >> <<right-paren, <right paren> >>
----

=== 6.35 <array value expression>

.Function

Specify an array value.


Format
[[array-value-expression]]
[subs="specialcharacters,macros"]
----
<array value expression> ::=
    <<array-concatenation, <array concatenation> >>
  | <<array-primary, <array primary> >>
----

[[array-concatenation]]
[subs="specialcharacters,macros"]
----
<array concatenation> ::= <array value expression 1> <concatenation operator> <array primary>
----

[[array-value-expression-1]]
[subs="specialcharacters,macros"]
----
<array value expression 1> ::= <array value expression>
----

[[array-primary]]
[subs="specialcharacters,macros"]
----
<array primary> ::= <value expression primary>
----

=== 6.36 <array value constructor>

.Function

Specify construction of an array.


Format
[[array-value-constructor]]
[subs="specialcharacters,macros"]
----
<array value constructor> ::=
    <<array-value-constructor-by-enumeration, <array value constructor by enumeration> >>
  | <<array-value-constructor-by-query, <array value constructor by query> >>
----

[[array-value-constructor-by-enumeration]]
[subs="specialcharacters,macros"]
----
<array value constructor by enumeration> ::=
    ARRAY <<left-bracket-or-trigraph, <left bracket or trigraph> >> <<array-element-list, <array element list> >> <<right-bracket-or-trigraph, <right bracket or trigraph> >>
----

[[array-element-list]]
[subs="specialcharacters,macros"]
----
<array element list> ::=
    <<array-element, <array element> >> [ { <<comma, <comma> >> <<array-element, <array element> >> }... ]
----

[[array-element]]
[subs="specialcharacters,macros"]
----
<array element> ::= <value expression>
----

[[array-value-constructor-by-query]]
[subs="specialcharacters,macros"]
----
<array value constructor by query> ::=
    ARRAY <<left-paren, <left paren> >> <<query-expression, <query expression> >> [ <<order-by-clause, <order by clause> >> ] <<right-paren, <right paren> >>
----

=== 6.37 <multiset value expression>

.Function

Specify a multiset value.


Format
[[multiset-value-expression]]
[subs="specialcharacters,macros"]
----
<multiset value expression> ::=
    <<multiset-term, <multiset term> >>
  | <<multiset-value-expression, <multiset value expression> >> MULTISET UNION [ ALL | DISTINCT ] <<multiset-term, <multiset term> >>
  | <<multiset-value-expression, <multiset value expression> >> MULTISET EXCEPT [ ALL | DISTINCT ] <<multiset-term, <multiset term> >>
----

[[multiset-term]]
[subs="specialcharacters,macros"]
----
<multiset term> ::=
    <<multiset-primary, <multiset primary> >>
  | <<multiset-term, <multiset term> >> MULTISET INTERSECT [ ALL | DISTINCT ] <<multiset-primary, <multiset primary> >>
----

[[multiset-primary]]
[subs="specialcharacters,macros"]
----
<multiset primary> ::=
    <<multiset-value-function, <multiset value function> >>
  | <<value-expression-primary, <value expression primary> >>
----

=== 6.38 <multiset value function>

.Function

Specify a function yielding a value of a multiset type.


Format
[[multiset-value-function]]
[subs="specialcharacters,macros"]
----
<multiset value function> ::= <multiset set function>
----

[[multiset-set-function]]
[subs="specialcharacters,macros"]
----
<multiset set function> ::=
    SET <<left-paren, <left paren> >> <<multiset-value-expression, <multiset value expression> >> <<right-paren, <right paren> >>
----

=== 6.39 <multiset value constructor>

.Function

Specify construction of a multiset.


Format
[[multiset-value-constructor]]
[subs="specialcharacters,macros"]
----
<multiset value constructor> ::=
    <<multiset-value-constructor-by-enumeration, <multiset value constructor by enumeration> >>
  | <<multiset-value-constructor-by-query, <multiset value constructor by query> >>
  | <<table-value-constructor-by-query, <table value constructor by query> >>
----

[[multiset-value-constructor-by-enumeration]]
[subs="specialcharacters,macros"]
----
<multiset value constructor by enumeration> ::=
    MULTISET <<left-bracket-or-trigraph, <left bracket or trigraph> >> <<multiset-element-list, <multiset element list> >> <<right-bracket-or-trigraph, <right bracket or trigraph> >>
----

[[multiset-element-list]]
[subs="specialcharacters,macros"]
----
<multiset element list> ::=
    <<multiset-element, <multiset element> >> [ { <<comma, <comma> >> <<multiset-element, <multiset element> >> }... ]
----

[[multiset-element]]
[subs="specialcharacters,macros"]
----
<multiset element> ::= <value expression>
----

[[multiset-value-constructor-by-query]]
[subs="specialcharacters,macros"]
----
<multiset value constructor by query> ::=
    MULTISET <<left-paren, <left paren> >> <<query-expression, <query expression> >> <<right-paren, <right paren> >>
----

[[table-value-constructor-by-query]]
[subs="specialcharacters,macros"]
----
<table value constructor by query> ::=
    TABLE <<left-paren, <left paren> >> <<query-expression, <query expression> >> <<right-paren, <right paren> >>
----

== 7 Query expressions


=== 7.1      <row value constructor>

.Function

Specify a value or list of values to be constructed into a row.


Format
[[row-value-constructor]]
[subs="specialcharacters,macros"]
----
<row value constructor> ::=
    <<common-value-expression, <common value expression> >>
  | <<boolean-value-expression, <boolean value expression> >>
  | <<explicit-row-value-constructor, <explicit row value constructor> >>
----

[[explicit-row-value-constructor]]
[subs="specialcharacters,macros"]
----
<explicit row value constructor> ::=
    <<left-paren, <left paren> >> <<row-value-constructor-element, <row value constructor element> >> <<comma, <comma> >>
    <<row-value-constructor-element-list, <row value constructor element list> >> <<right-paren, <right paren> >>
  | ROW <<left-paren, <left paren> >> <<row-value-constructor-element-list, <row value constructor element list> >> <<right-paren, <right paren> >>
  | <<row-subquery, <row subquery> >>
----

[[row-value-constructor-element-list]]
[subs="specialcharacters,macros"]
----
<row value constructor element list> ::=
    <<row-value-constructor-element, <row value constructor element> >> [ { <<comma, <comma> >> <<row-value-constructor-element, <row value constructor element> >> }... ]
----

[[row-value-constructor-element]]
[subs="specialcharacters,macros"]
----
<row value constructor element> ::= <value expression>
----

[[contextually-typed-row-value-constructor]]
[subs="specialcharacters,macros"]
----
<contextually typed row value constructor> ::=
    <<common-value-expression, <common value expression> >>
  | <<boolean-value-expression, <boolean value expression> >>
  | <<contextually-typed-value-specification, <contextually typed value specification> >>
  | <<left-paren, <left paren> >> <<contextually-typed-row-value-specification, <contextually typed row value specification> >> <<right-paren, <right paren> >>
  | <<left-paren, <left paren> >> <<contextually-typed-row-value-constructor-element, <contextually typed row value constructor element> >> <<comma, <comma> >>
    <<contextually-typed-row-value-constructor-element-list, <contextually typed row value constructor element list> >> <<right-paren, <right paren> >>
  | ROW <<left-paren, <left paren> >> <<contextually-typed-row-value-constructor-element-list, <contextually typed row value constructor element list> >> <<right-paren, <right paren> >>
----

[[contextually-typed-row-value-constructor-element-list]]
[subs="specialcharacters,macros"]
----
<contextually typed row value constructor element list> ::=
    <<contextually-typed-row-value-constructor-element, <contextually typed row value constructor element> >>
    [ { <<comma, <comma> >> <<contextually-typed-row-value-constructor-element, <contextually typed row value constructor element> >> }... ]
----

[[contextually-typed-row-value-constructor-element]]
[subs="specialcharacters,macros"]
----
<contextually typed row value constructor element> ::=
    <<value-expression, <value expression> >>
  | <<contextually-typed-value-specification, <contextually typed value specification> >>
----

[[row-value-constructor-predicand]]
[subs="specialcharacters,macros"]
----
<row value constructor predicand> ::=
    <<common-value-expression, <common value expression> >>
  | <<boolean-predicand, <boolean predicand> >>
  | <<explicit-row-value-constructor, <explicit row value constructor> >>
----

=== 7.2      <row value expression>

.Function

Specify a row value.


Format
[[row-value-expression]]
[subs="specialcharacters,macros"]
----
<row value expression> ::=
    <<row-value-special-case, <row value special case> >>
  | <<explicit-row-value-constructor, <explicit row value constructor> >>
----

[[table-row-value-expression]]
[subs="specialcharacters,macros"]
----
<table row value expression> ::=
    <<row-value-special-case, <row value special case> >>
  | <<row-value-constructor, <row value constructor> >>
----

[[contextually-typed-row-value-expression]]
[subs="specialcharacters,macros"]
----
<contextually typed row value expression> ::=
    <<row-value-special-case, <row value special case> >>
  | <<contextually-typed-row-value-constructor, <contextually typed row value constructor> >>
----

[[row-value-predicand]]
[subs="specialcharacters,macros"]
----
<row value predicand> ::=
    <<row-value-special-case, <row value special case> >>
  | <<row-value-constructor-predicand, <row value constructor predicand> >>
----

[[row-value-special-case]]
[subs="specialcharacters,macros"]
----
<row value special case> ::= <nonparenthesized value expression primary>
----

=== 7.3      <table value constructor>

.Function

Specify a set of <row value expression>s to be constructed into a table.


Format
[[table-value-constructor]]
[subs="specialcharacters,macros"]
----
<table value constructor> ::= VALUES <row value expression list>
----

[[row-value-expression-list]]
[subs="specialcharacters,macros"]
----
<row value expression list> ::=
    <<table-row-value-expression, <table row value expression> >> [ { <<comma, <comma> >> <<table-row-value-expression, <table row value expression> >> }... ]
----

[[contextually-typed-table-value-constructor]]
[subs="specialcharacters,macros"]
----
<contextually typed table value constructor> ::=
    VALUES <<contextually-typed-row-value-expression-list, <contextually typed row value expression list> >>
----

[[contextually-typed-row-value-expression-list]]
[subs="specialcharacters,macros"]
----
<contextually typed row value expression list> ::=
    <<contextually-typed-row-value-expression, <contextually typed row value expression> >>
    [ { <<comma, <comma> >> <<contextually-typed-row-value-expression, <contextually typed row value expression> >> }... ]
----

=== 7.4      <table expression>

.Function

Specify a table or a grouped table.


Format
[[table-expression]]
[subs="specialcharacters,macros"]
----
<table expression> ::=
    <<from-clause, <from clause> >>
    [ <<where-clause, <where clause> >> ]
    [ <<group-by-clause, <group by clause> >> ]
    [ <<having-clause, <having clause> >> ]
    [ <<window-clause, <window clause> >> ]
----

=== 7.5       <from clause>

.Function

Specify a table derived from one or more tables.


Format
[[from-clause]]
[subs="specialcharacters,macros"]
----
<from clause> ::= FROM <table reference list>
----

[[table-reference-list]]
[subs="specialcharacters,macros"]
----
<table reference list> ::=
    <<table-reference, <table reference> >> [ { <<comma, <comma> >> <<table-reference, <table reference> >> }... ]
----

=== 7.6      <table reference>

.Function

Reference a table.


Format
[[table-reference]]
[subs="specialcharacters,macros"]
----
<table reference> ::=
    <<table-factor, <table factor> >>
  | <<joined-table, <joined table> >>
----

[[table-factor]]
[subs="specialcharacters,macros"]
----
<table factor> ::= <table primary> [ <sample clause> ]
----

[[sample-clause]]
[subs="specialcharacters,macros"]
----
<sample clause> ::=
    TABLESAMPLE <<sample-method, <sample method> >> <<left-paren, <left paren> >> <<sample-percentage, <sample percentage> >> <<right-paren, <right paren> >>
    [ <<repeatable-clause, <repeatable clause> >> ]
----

[[sample-method]]
[subs="specialcharacters,macros"]
----
<sample method> ::=
    BERNOULLI
  | SYSTEM
----

[[repeatable-clause]]
[subs="specialcharacters,macros"]
----
<repeatable clause> ::= REPEATABLE <left paren> <repeat argument> <right paren>
----

[[sample-percentage]]
[subs="specialcharacters,macros"]
----
<sample percentage> ::= <numeric value expression>
----

[[repeat-argument]]
[subs="specialcharacters,macros"]
----
<repeat argument> ::= <numeric value expression>
----

[[table-primary]]
[subs="specialcharacters,macros"]
----
<table primary> ::=
    <<table-or-query-name, <table or query name> >> [ [ AS ] <<correlation-name, <correlation name> >>
    [ <<left-paren, <left paren> >> <<derived-column-list, <derived column list> >> <<right-paren, <right paren> >> ] ]
  | <<derived-table, <derived table> >> [ AS ] <<correlation-name, <correlation name> >>
    [ <<left-paren, <left paren> >> <<derived-column-list, <derived column list> >> <<right-paren, <right paren> >> ]
  | <<lateral-derived-table, <lateral derived table> >> [ AS ] <<correlation-name, <correlation name> >>
    [ <<left-paren, <left paren> >> <<derived-column-list, <derived column list> >> <<right-paren, <right paren> >> ]
  | <<collection-derived-table, <collection derived table> >> [ AS ] <<correlation-name, <correlation name> >>
    [ <<left-paren, <left paren> >> <<derived-column-list, <derived column list> >> <<right-paren, <right paren> >> ]
  | <<table-function-derived-table, <table function derived table> >> [ AS ] <<correlation-name, <correlation name> >>
    [ <<left-paren, <left paren> >> <<derived-column-list, <derived column list> >> <<right-paren, <right paren> >> ]
  | <<only-spec, <only spec> >> [ [ AS ] <<correlation-name, <correlation name> >>
    [ <<left-paren, <left paren> >> <<derived-column-list, <derived column list> >> <<right-paren, <right paren> >> ] ]
  | <<left-paren, <left paren> >> <<joined-table, <joined table> >> <<right-paren, <right paren> >>
----

[[only-spec]]
[subs="specialcharacters,macros"]
----
<only spec> ::= ONLY <left paren> <table or query name> <right paren>
----

[[lateral-derived-table]]
[subs="specialcharacters,macros"]
----
<lateral derived table> ::= LATERAL <table subquery>
----

[[collection-derived-table]]
[subs="specialcharacters,macros"]
----
<collection derived table> ::=
    UNNEST <<left-paren, <left paren> >> <<collection-value-expression, <collection value expression> >> <<right-paren, <right paren> >>
    [ WITH ORDINALITY ]
----

[[table-function-derived-table]]
[subs="specialcharacters,macros"]
----
<table function derived table> ::=
    TABLE <<left-paren, <left paren> >> <<collection-value-expression, <collection value expression> >> <<right-paren, <right paren> >>
----

[[derived-table]]
[subs="specialcharacters,macros"]
----
<derived table> ::= <table subquery>
----

[[table-or-query-name]]
[subs="specialcharacters,macros"]
----
<table or query name> ::=
    <<table-name, <table name> >>
  | <<transition-table-name, <transition table name> >>
  | <<query-name, <query name> >>
----

[[derived-column-list]]
[subs="specialcharacters,macros"]
----
<derived column list> ::= <column name list>
----

[[column-name-list]]
[subs="specialcharacters,macros"]
----
<column name list> ::= <column name> [ { <comma> <column name> }... ]
----

=== 7.7     <joined table>

.Function

Specify a table derived from a Cartesian product, inner join, or outer join.


Format
[[joined-table]]
[subs="specialcharacters,macros"]
----
<joined table> ::=
    <<cross-join, <cross join> >>
  | <<qualified-join, <qualified join> >>
  | <<natural-join, <natural join> >>
----

[[cross-join]]
[subs="specialcharacters,macros"]
----
<cross join> ::=
    <<table-reference, <table reference> >> CROSS JOIN <<table-factor, <table factor> >>
----

[[qualified-join]]
[subs="specialcharacters,macros"]
----
<qualified join> ::=
    <<table-reference, <table reference> >> [ <<join-type, <join type> >> ] JOIN <<table-reference, <table reference> >> <<join-specification, <join specification> >>
----

[[natural-join]]
[subs="specialcharacters,macros"]
----
<natural join> ::=
    <<table-reference, <table reference> >> NATURAL [ <<join-type, <join type> >> ] JOIN <<table-factor, <table factor> >>
----

[[join-specification]]
[subs="specialcharacters,macros"]
----
<join specification> ::=
    <<join-condition, <join condition> >>
  | <<named-columns-join, <named columns join> >>
----

[[join-condition]]
[subs="specialcharacters,macros"]
----
<join condition> ::= ON <search condition>
----

[[named-columns-join]]
[subs="specialcharacters,macros"]
----
<named columns join> ::= USING <left paren> <join column list> <right paren>
----

[[join-type]]
[subs="specialcharacters,macros"]
----
<join type> ::=
    INNER
  | <<outer-join-type, <outer join type> >> [ OUTER ]
----

[[outer-join-type]]
[subs="specialcharacters,macros"]
----
<outer join type> ::=
    LEFT
  | RIGHT
  | FULL
----

[[join-column-list]]
[subs="specialcharacters,macros"]
----
<join column list> ::= <column name list>
----

=== 7.8       <where clause>

.Function

Specify a table derived by the application of a <search condition> to the result of the preceding <from clause>.


Format
[[where-clause]]
[subs="specialcharacters,macros"]
----
<where clause> ::= WHERE <search condition>
----

=== 7.9     <group by clause>

.Function

Specify a grouped table derived by the application of the <group by clause> to the result of the previously
specified clause.


Format
[[group-by-clause]]
[subs="specialcharacters,macros"]
----
<group by clause> ::=
    GROUP BY [ <<set-quantifier, <set quantifier> >> ] <<grouping-element-list, <grouping element list> >>
----

[[grouping-element-list]]
[subs="specialcharacters,macros"]
----
<grouping element list> ::=
    <<grouping-element, <grouping element> >> [ { <<comma, <comma> >> <<grouping-element, <grouping element> >> }... ]
----

[[grouping-element]]
[subs="specialcharacters,macros"]
----
<grouping element> ::=
    <<ordinary-grouping-set, <ordinary grouping set> >>
  | <<rollup-list, <rollup list> >>
  | <<cube-list, <cube list> >>
  | <<grouping-sets-specification, <grouping sets specification> >>
  | <<empty-grouping-set, <empty grouping set> >>
----

[[ordinary-grouping-set]]
[subs="specialcharacters,macros"]
----
<ordinary grouping set> ::=
    <<grouping-column-reference, <grouping column reference> >>
  | <<left-paren, <left paren> >> <<grouping-column-reference-list, <grouping column reference list> >> <<right-paren, <right paren> >>
----

[[grouping-column-reference]]
[subs="specialcharacters,macros"]
----
<grouping column reference> ::=
    <<column-reference, <column reference> >> [ <<collate-clause, <collate clause> >> ]
----

[[grouping-column-reference-list]]
[subs="specialcharacters,macros"]
----
<grouping column reference list> ::=
    <<grouping-column-reference, <grouping column reference> >> [ { <<comma, <comma> >> <<grouping-column-reference, <grouping column reference> >> }... ]
----

[[rollup-list]]
[subs="specialcharacters,macros"]
----
<rollup list> ::=
    ROLLUP <<left-paren, <left paren> >> <<ordinary-grouping-set-list, <ordinary grouping set list> >> <<right-paren, <right paren> >>
----

[[ordinary-grouping-set-list]]
[subs="specialcharacters,macros"]
----
<ordinary grouping set list> ::=
    <<ordinary-grouping-set, <ordinary grouping set> >> [ { <<comma, <comma> >> <<ordinary-grouping-set, <ordinary grouping set> >> }... ]
----

[[cube-list]]
[subs="specialcharacters,macros"]
----
<cube list> ::=
    CUBE <<left-paren, <left paren> >> <<ordinary-grouping-set-list, <ordinary grouping set list> >> <<right-paren, <right paren> >>
----

[[grouping-sets-specification]]
[subs="specialcharacters,macros"]
----
<grouping sets specification> ::=
    GROUPING SETS <<left-paren, <left paren> >> <<grouping-set-list, <grouping set list> >> <<right-paren, <right paren> >>
----

[[grouping-set-list]]
[subs="specialcharacters,macros"]
----
<grouping set list> ::=
    <<grouping-set, <grouping set> >> [ { <<comma, <comma> >> <<grouping-set, <grouping set> >> }... ]
----

[[grouping-set]]
[subs="specialcharacters,macros"]
----
<grouping set> ::=
    <<ordinary-grouping-set, <ordinary grouping set> >>
  | <<rollup-list, <rollup list> >>
  | <<cube-list, <cube list> >>
  | <<grouping-sets-specification, <grouping sets specification> >>
  | <<empty-grouping-set, <empty grouping set> >>
----

[[empty-grouping-set]]
[subs="specialcharacters,macros"]
----
<empty grouping set> ::= <left paren> <right paren>
----

=== 7.10 <having clause>

.Function

Specify a grouped table derived by the elimination of groups that do not satisfy a <search condition>.


Format
[[having-clause]]
[subs="specialcharacters,macros"]
----
<having clause> ::= HAVING <search condition>
----

=== 7.11 <window clause>

.Function

Specify one or more window definitions.


Format
[[window-clause]]
[subs="specialcharacters,macros"]
----
<window clause> ::= WINDOW <window definition list>
----

[[window-definition-list]]
[subs="specialcharacters,macros"]
----
<window definition list> ::=
    <<window-definition, <window definition> >> [ { <<comma, <comma> >> <<window-definition, <window definition> >> }... ]
----

[[window-definition]]
[subs="specialcharacters,macros"]
----
<window definition> ::= <new window name> AS <window specification>
----

[[new-window-name]]
[subs="specialcharacters,macros"]
----
<new window name> ::= <window name>
----

[[window-specification]]
[subs="specialcharacters,macros"]
----
<window specification> ::=
    <<left-paren, <left paren> >> <<window-specification-details, <window specification details> >> <<right-paren, <right paren> >>
----

[[window-specification-details]]
[subs="specialcharacters,macros"]
----
<window specification details> ::=
    [ <<existing-window-name, <existing window name> >> ]
    [ <<window-partition-clause, <window partition clause> >> ]
    [ <<window-order-clause, <window order clause> >> ]
    [ <<window-frame-clause, <window frame clause> >> ]
----

[[existing-window-name]]
[subs="specialcharacters,macros"]
----
<existing window name> ::= <window name>
----

[[window-partition-clause]]
[subs="specialcharacters,macros"]
----
<window partition clause> ::=
    PARTITION BY <<window-partition-column-reference-list, <window partition column reference list> >>
----

[[window-partition-column-reference-list]]
[subs="specialcharacters,macros"]
----
<window partition column reference list> ::=
    <<window-partition-column-reference, <window partition column reference> >>
    [ { <<comma, <comma> >> <<window-partition-column-reference, <window partition column reference> >> }... ]
----

[[window-partition-column-reference]]
[subs="specialcharacters,macros"]
----
<window partition column reference> ::=
    <<column-reference, <column reference> >> [ <<collate-clause, <collate clause> >> ]
----

[[window-order-clause]]
[subs="specialcharacters,macros"]
----
<window order clause> ::=
    ORDER BY <<sort-specification-list, <sort specification list> >>
----

[[window-frame-clause]]
[subs="specialcharacters,macros"]
----
<window frame clause> ::=
    <<window-frame-units, <window frame units> >> <<window-frame-extent, <window frame extent> >>
    [ <<window-frame-exclusion, <window frame exclusion> >> ]
----

[[window-frame-units]]
[subs="specialcharacters,macros"]
----
<window frame units> ::=
    ROWS
  | RANGE
----

[[window-frame-extent]]
[subs="specialcharacters,macros"]
----
<window frame extent> ::=
----

    <window frame start>
  | <window frame between>

[[window-frame-start]]
[subs="specialcharacters,macros"]
----
<window frame start> ::=
    UNBOUNDED PRECEDING
  | <<window-frame-preceding, <window frame preceding> >>
  | CURRENT ROW
----

[[window-frame-preceding]]
[subs="specialcharacters,macros"]
----
<window frame preceding> ::= <unsigned value specification> PRECEDING
----

[[window-frame-between]]
[subs="specialcharacters,macros"]
----
<window frame between> ::= BETWEEN <window frame bound 1> AND <window frame bound 2>
----

[[window-frame-bound-1]]
[subs="specialcharacters,macros"]
----
<window frame bound 1> ::= <window frame bound>
----

[[window-frame-bound-2]]
[subs="specialcharacters,macros"]
----
<window frame bound 2> ::= <window frame bound>
----

[[window-frame-bound]]
[subs="specialcharacters,macros"]
----
<window frame bound> ::=
    <<window-frame-start, <window frame start> >>
  | UNBOUNDED FOLLOWING
  | <<window-frame-following, <window frame following> >>
----

[[window-frame-following]]
[subs="specialcharacters,macros"]
----
<window frame following> ::= <unsigned value specification> FOLLOWING
----

[[window-frame-exclusion]]
[subs="specialcharacters,macros"]
----
<window frame exclusion> ::=
    EXCLUDE CURRENT ROW
  | EXCLUDE GROUP
  | EXCLUDE TIES
  | EXCLUDE NO OTHERS
----

=== 7.12 <query specification>

.Function

Specify a table derived from the result of a <table expression>.


Format
[[query-specification]]
[subs="specialcharacters,macros"]
----
<query specification> ::=
    SELECT [ <<set-quantifier, <set quantifier> >> ] <<select-list, <select list> >> <<table-expression, <table expression> >>
----

[[select-list]]
[subs="specialcharacters,macros"]
----
<select list> ::=
    <<asterisk, <asterisk> >>
  | <<select-sublist, <select sublist> >> [ { <<comma, <comma> >> <<select-sublist, <select sublist> >> }... ]
----

[[select-sublist]]
[subs="specialcharacters,macros"]
----
<select sublist> ::=
    <<derived-column, <derived column> >>
  | <<qualified-asterisk, <qualified asterisk> >>
----

[[qualified-asterisk]]
[subs="specialcharacters,macros"]
----
<qualified asterisk> ::=
    <<asterisked-identifier-chain, <asterisked identifier chain> >> <<period, <period> >> <<asterisk, <asterisk> >>
  | <<all-fields-reference, <all fields reference> >>
----

[[asterisked-identifier-chain]]
[subs="specialcharacters,macros"]
----
<asterisked identifier chain> ::=
    <<asterisked-identifier, <asterisked identifier> >> [ { <<period, <period> >> <<asterisked-identifier, <asterisked identifier> >> }... ]
----

[[asterisked-identifier]]
[subs="specialcharacters,macros"]
----
<asterisked identifier> ::= <identifier>
----

[[derived-column]]
[subs="specialcharacters,macros"]
----
<derived column> ::= <value expression> [ <as clause> ]
----

[[as-clause]]
[subs="specialcharacters,macros"]
----
<as clause> ::= [ AS ] <column name>
----

[[all-fields-reference]]
[subs="specialcharacters,macros"]
----
<all fields reference> ::=
    <<value-expression-primary, <value expression primary> >> <<period, <period> >> <<asterisk, <asterisk> >>
    [ AS <<left-paren, <left paren> >> <<all-fields-column-name-list, <all fields column name list> >> <<right-paren, <right paren> >> ]
----

[[all-fields-column-name-list]]
[subs="specialcharacters,macros"]
----
<all fields column name list> ::= <column name list>
----

=== 7.13 <query expression>

.Function

Specify a table.


Format
[[query-expression]]
[subs="specialcharacters,macros"]
----
<query expression> ::=
    [ <<with-clause, <with clause> >> ] <<query-expression-body, <query expression body> >>
----

[[with-clause]]
[subs="specialcharacters,macros"]
----
<with clause> ::=
    WITH [ RECURSIVE ] <<with-list, <with list> >>
----

[[with-list]]
[subs="specialcharacters,macros"]
----
<with list> ::=
    <<with-list-element, <with list element> >> [ { <<comma, <comma> >> <<with-list-element, <with list element> >> }... ]
----

[[with-list-element]]
[subs="specialcharacters,macros"]
----
<with list element> ::=
    <<query-name, <query name> >> [ <<left-paren, <left paren> >> <<with-column-list, <with column list> >> <<right-paren, <right paren> >> ]
    AS <<left-paren, <left paren> >> <<query-expression, <query expression> >> <<right-paren, <right paren> >> [ <<search-or-cycle-clause, <search or cycle clause> >> ]
----

[[with-column-list]]
[subs="specialcharacters,macros"]
----
<with column list> ::= <column name list>
----

[[query-expression-body]]
[subs="specialcharacters,macros"]
----
<query expression body> ::=
    <<query-term, <query term> >>
  | <<query-expression-body, <query expression body> >> UNION [ ALL | DISTINCT ]
    [ <<corresponding-spec, <corresponding spec> >> ] <<query-term, <query term> >>
  | <<query-expression-body, <query expression body> >> EXCEPT [ ALL | DISTINCT ]
    [ <<corresponding-spec, <corresponding spec> >> ] <<query-term, <query term> >>
----

[[query-term]]
[subs="specialcharacters,macros"]
----
<query term> ::=
    <<query-primary, <query primary> >>
  | <<query-term, <query term> >> INTERSECT [ ALL | DISTINCT ]
    [ <<corresponding-spec, <corresponding spec> >> ] <<query-primary, <query primary> >>
----

[[query-primary]]
[subs="specialcharacters,macros"]
----
<query primary> ::=
    <<simple-table, <simple table> >>
  | <<left-paren, <left paren> >> <<query-expression-body, <query expression body> >> <<right-paren, <right paren> >>
----

[[simple-table]]
[subs="specialcharacters,macros"]
----
<simple table> ::=
    <<query-specification, <query specification> >>
  | <<table-value-constructor, <table value constructor> >>
  | <<explicit-table, <explicit table> >>
----

[[explicit-table]]
[subs="specialcharacters,macros"]
----
<explicit table> ::= TABLE <table or query name>
----

[[corresponding-spec]]
[subs="specialcharacters,macros"]
----
<corresponding spec> ::=
    CORRESPONDING [ BY <<left-paren, <left paren> >> <<corresponding-column-list, <corresponding column list> >> <<right-paren, <right paren> >> ]
----

[[corresponding-column-list]]
[subs="specialcharacters,macros"]
----
<corresponding column list> ::= <column name list>
----

=== 7.14 <search or cycle clause>

.Function

Specify the generation of ordering and cycle detection information in the result of recursive query expressions.


Format
[[search-or-cycle-clause]]
[subs="specialcharacters,macros"]
----
<search or cycle clause> ::=
    <<search-clause, <search clause> >>
  | <<cycle-clause, <cycle clause> >>
  | <<search-clause, <search clause> >> <<cycle-clause, <cycle clause> >>
----

[[search-clause]]
[subs="specialcharacters,macros"]
----
<search clause> ::=
    SEARCH <<recursive-search-order, <recursive search order> >> SET <<sequence-column, <sequence column> >>
----

[[recursive-search-order]]
[subs="specialcharacters,macros"]
----
<recursive search order> ::=
    DEPTH FIRST BY <<sort-specification-list, <sort specification list> >>
  | BREADTH FIRST BY <<sort-specification-list, <sort specification list> >>
----

[[sequence-column]]
[subs="specialcharacters,macros"]
----
<sequence column> ::= <column name>
----

[[cycle-clause]]
[subs="specialcharacters,macros"]
----
<cycle clause> ::=
    CYCLE <<cycle-column-list, <cycle column list> >> SET <<cycle-mark-column, <cycle mark column> >> TO <<cycle-mark-value, <cycle mark value> >>
    DEFAULT <<non-cycle-mark-value, <non-cycle mark value> >> USING <<path-column, <path column> >>
----

[[cycle-column-list]]
[subs="specialcharacters,macros"]
----
<cycle column list> ::=
    <<cycle-column, <cycle column> >> [ { <<comma, <comma> >> <<cycle-column, <cycle column> >> }... ]
----

[[cycle-column]]
[subs="specialcharacters,macros"]
----
<cycle column> ::= <column name>
----

[[cycle-mark-column]]
[subs="specialcharacters,macros"]
----
<cycle mark column> ::= <column name>
----

[[path-column]]
[subs="specialcharacters,macros"]
----
<path column> ::= <column name>
----

[[cycle-mark-value]]
[subs="specialcharacters,macros"]
----
<cycle mark value> ::= <value expression>
----

[[non-cycle-mark-value]]
[subs="specialcharacters,macros"]
----
<non-cycle mark value> ::= <value expression>
----

=== 7.15 <subquery>

.Function

Specify a scalar value, a row, or a table derived from a <query expression>.


Format
[[scalar-subquery]]
[subs="specialcharacters,macros"]
----
<scalar subquery> ::= <subquery>
----

[[row-subquery]]
[subs="specialcharacters,macros"]
----
<row subquery> ::= <subquery>
----

[[table-subquery]]
[subs="specialcharacters,macros"]
----
<table subquery> ::= <subquery>
----

[[subquery]]
[subs="specialcharacters,macros"]
----
<subquery> ::= <left paren> <query expression> <right paren>
----

== 8 Predicates


=== 8.1      <predicate>

.Function

Specify a condition that can be evaluated to give a boolean value.


Format
[[predicate]]
[subs="specialcharacters,macros"]
----
<predicate> ::=
    <<comparison-predicate, <comparison predicate> >>
  | <<between-predicate, <between predicate> >>
  | <<in-predicate, <in predicate> >>
  | <<like-predicate, <like predicate> >>
  | <<similar-predicate, <similar predicate> >>
  | <<null-predicate, <null predicate> >>
  | <<quantified-comparison-predicate, <quantified comparison predicate> >>
  | <<exists-predicate, <exists predicate> >>
  | <<unique-predicate, <unique predicate> >>
  | <<normalized-predicate, <normalized predicate> >>
  | <<match-predicate, <match predicate> >>
  | <<overlaps-predicate, <overlaps predicate> >>
  | <<distinct-predicate, <distinct predicate> >>
  | <<member-predicate, <member predicate> >>
  | <<submultiset-predicate, <submultiset predicate> >>
  | <<set-predicate, <set predicate> >>
  | <<type-predicate, <type predicate> >>
----

=== 8.2      <comparison predicate>

.Function

Specify a comparison of two row values.


Format
[[comparison-predicate]]
[subs="specialcharacters,macros"]
----
<comparison predicate> ::= <row value predicand> <comparison predicate part 2>
----

[[comparison-predicate-part-2]]
[subs="specialcharacters,macros"]
----
<comparison predicate part 2> ::= <comp op> <row value predicand>
----

[[comp-op]]
[subs="specialcharacters,macros"]
----
<comp op> ::=
    <<equals-operator, <equals operator> >>
  | <<not-equals-operator, <not equals operator> >>
  | <<less-than-operator, <less than operator> >>
  | <<greater-than-operator, <greater than operator> >>
  | <<less-than-or-equals-operator, <less than or equals operator> >>
  | <<greater-than-or-equals-operator, <greater than or equals operator> >>
----

=== 8.3       <between predicate>

.Function

Specify a range comparison.


Format
[[between-predicate]]
[subs="specialcharacters,macros"]
----
<between predicate> ::= <row value predicand> <between predicate part 2>
----

[[between-predicate-part-2]]
[subs="specialcharacters,macros"]
----
<between predicate part 2> ::=
    [ NOT ] BETWEEN [ ASYMMETRIC | SYMMETRIC ]
    <<row-value-predicand, <row value predicand> >> AND <<row-value-predicand, <row value predicand> >>
----

=== 8.4        <in predicate>

.Function

Specify a quantified comparison.


Format
[[in-predicate]]
[subs="specialcharacters,macros"]
----
<in predicate> ::= <row value predicand> <in predicate part 2>
----

[[in-predicate-part-2]]
[subs="specialcharacters,macros"]
----
<in predicate part 2> ::= [ NOT ] IN <in predicate value>
----

[[in-predicate-value]]
[subs="specialcharacters,macros"]
----
<in predicate value> ::=
    <<table-subquery, <table subquery> >>
  | <<left-paren, <left paren> >> <<in-value-list, <in value list> >> <<right-paren, <right paren> >>
----

[[in-value-list]]
[subs="specialcharacters,macros"]
----
<in value list> ::= <row value expression> [ { <comma> <row value expression> }... ]
----

=== 8.5       <like predicate>

.Function

Specify a pattern-match comparison.


Format
[[like-predicate]]
[subs="specialcharacters,macros"]
----
<like predicate> ::=
    <<character-like-predicate, <character like predicate> >>
  | <<octet-like-predicate, <octet like predicate> >>
----

[[character-like-predicate]]
[subs="specialcharacters,macros"]
----
<character like predicate> ::=
    <<row-value-predicand, <row value predicand> >> <<character-like-predicate-part-2, <character like predicate part 2> >>
----

[[character-like-predicate-part-2]]
[subs="specialcharacters,macros"]
----
<character like predicate part 2> ::=
    [ NOT ] LIKE <<character-pattern, <character pattern> >> [ ESCAPE <<escape-character, <escape character> >> ]
----

[[character-pattern]]
[subs="specialcharacters,macros"]
----
<character pattern> ::= <character value expression>
----

[[escape-character]]
[subs="specialcharacters,macros"]
----
<escape character> ::= <character value expression>
----

[[octet-like-predicate]]
[subs="specialcharacters,macros"]
----
<octet like predicate> ::=
    <<row-value-predicand, <row value predicand> >> <<octet-like-predicate-part-2, <octet like predicate part 2> >>
----

[[octet-like-predicate-part-2]]
[subs="specialcharacters,macros"]
----
<octet like predicate part 2> ::=
    [ NOT ] LIKE <<octet-pattern, <octet pattern> >> [ ESCAPE <<escape-octet, <escape octet> >> ]
----

[[octet-pattern]]
[subs="specialcharacters,macros"]
----
<octet pattern> ::= <blob value expression>
----

[[escape-octet]]
[subs="specialcharacters,macros"]
----
<escape octet> ::= <blob value expression>
----

=== 8.6      <similar predicate>

.Function

Specify a character string similarity by means of a regular expression.


Format
[[similar-predicate]]
[subs="specialcharacters,macros"]
----
<similar predicate> ::=
    <<row-value-predicand, <row value predicand> >> <<similar-predicate-part-2, <similar predicate part 2> >>
----

[[similar-predicate-part-2]]
[subs="specialcharacters,macros"]
----
<similar predicate part 2> ::=
    [ NOT ] SIMILAR TO <<similar-pattern, <similar pattern> >> [ ESCAPE <<escape-character, <escape character> >> ]
----

[[similar-pattern]]
[subs="specialcharacters,macros"]
----
<similar pattern> ::= <character value expression>
----

[[regular-expression]]
[subs="specialcharacters,macros"]
----
<regular expression> ::=
    <<regular-term, <regular term> >>
  | <<regular-expression, <regular expression> >> <<vertical-bar, <vertical bar> >> <<regular-term, <regular term> >>
----

[[regular-term]]
[subs="specialcharacters,macros"]
----
<regular term> ::=
    <<regular-factor, <regular factor> >>
  | <<regular-term, <regular term> >> <<regular-factor, <regular factor> >>
----

[[regular-factor]]
[subs="specialcharacters,macros"]
----
<regular factor> ::=
    <<regular-primary, <regular primary> >>
  | <<regular-primary, <regular primary> >>           <<asterisk, <asterisk> >>
  | <<regular-primary, <regular primary> >>           <<plus-sign, <plus sign> >>
  | <<regular-primary, <regular primary> >>           <<question-mark, <question mark> >>
  | <<regular-primary, <regular primary> >>           <<repeat-factor, <repeat factor> >>
----

[[repeat-factor]]
[subs="specialcharacters,macros"]
----
<repeat factor> ::= <left brace> <low value> [ <upper limit> ] <right brace>
----

[[upper-limit]]
[subs="specialcharacters,macros"]
----
<upper limit> ::= <comma> [ <high value> ]
----

[[low-value]]
[subs="specialcharacters,macros"]
----
<low value> ::= <unsigned integer>
----

[[high-value]]
[subs="specialcharacters,macros"]
----
<high value> ::= <unsigned integer>
----

[[regular-primary]]
[subs="specialcharacters,macros"]
----
<regular primary> ::=
    <<character-specifier, <character specifier> >>
  | <<percent, <percent> >>
  | <<regular-character-set, <regular character set> >>
  | <<left-paren, <left paren> >> <<regular-expression, <regular expression> >> <<right-paren, <right paren> >>
----

[[character-specifier]]
[subs="specialcharacters,macros"]
----
<character specifier> ::=
    <<non-escaped-character, <non-escaped character> >>
  | <<escaped-character, <escaped character> >>
----

[[non-escaped-character]]
[subs="specialcharacters,macros"]
----
<non-escaped character> ::= !! See the Syntax Rules
----

[[escaped-character]]
[subs="specialcharacters,macros"]
----
<escaped character> ::= !! See the Syntax Rules
----

[[regular-character-set]]
[subs="specialcharacters,macros"]
----
<regular character set> ::=
    <<underscore, <underscore> >>
  | <<left-bracket, <left bracket> >> <<character-enumeration, <character enumeration> >>... <<right-bracket, <right bracket> >>
  | <<left-bracket, <left bracket> >> <<circumflex, <circumflex> >> <<character-enumeration, <character enumeration> >>... <<right-bracket, <right bracket> >>
  | <<left-bracket, <left bracket> >> <<character-enumeration-include, <character enumeration include> >>...
    <<circumflex, <circumflex> >> <<character-enumeration-exclude, <character enumeration exclude> >>... <<right-bracket, <right bracket> >>
----

[[character-enumeration-include]]
[subs="specialcharacters,macros"]
----
<character enumeration include> ::= <character enumeration>
----

[[character-enumeration-exclude]]
[subs="specialcharacters,macros"]
----
<character enumeration exclude> ::= <character enumeration>
----

[[character-enumeration]]
[subs="specialcharacters,macros"]
----
<character enumeration> ::=
    <<character-specifier, <character specifier> >>
  | <<character-specifier, <character specifier> >> <<minus-sign, <minus sign> >> <<character-specifier, <character specifier> >>
  | <<left-bracket, <left bracket> >> <<colon, <colon> >> <<regular-character-set-identifier, <regular character set identifier> >> <<colon, <colon> >> <<right-bracket, <right bracket> >>
----

[[regular-character-set-identifier]]
[subs="specialcharacters,macros"]
----
<regular character set identifier> ::= <identifier>
----

=== 8.7       <null predicate>

.Function

Specify a test for a null value.


Format
[[null-predicate]]
[subs="specialcharacters,macros"]
----
<null predicate> ::= <row value predicand> <null predicate part 2>
----

[[null-predicate-part-2]]
[subs="specialcharacters,macros"]
----
<null predicate part 2> ::= IS [ NOT ] NULL
----

=== 8.8      <quantified comparison predicate>

.Function

Specify a quantified comparison.


Format
[[quantified-comparison-predicate]]
[subs="specialcharacters,macros"]
----
<quantified comparison predicate> ::=
    <<row-value-predicand, <row value predicand> >> <<quantified-comparison-predicate-part-2, <quantified comparison predicate part 2> >>
----

[[quantified-comparison-predicate-part-2]]
[subs="specialcharacters,macros"]
----
<quantified comparison predicate part 2> ::=
    <<comp-op, <comp op> >> <<quantifier, <quantifier> >> <<table-subquery, <table subquery> >>
----

[[quantifier]]
[subs="specialcharacters,macros"]
----
<quantifier> ::=
    <<all, <all> >>
  | <<some, <some> >>
----

[[all]]
[subs="specialcharacters,macros"]
----
<all> ::= ALL
----

[[some]]
[subs="specialcharacters,macros"]
----
<some> ::=
    SOME
  | ANY
----

=== 8.9      <exists predicate>

.Function

Specify a test for a non-empty set.


Format
[[exists-predicate]]
[subs="specialcharacters,macros"]
----
<exists predicate> ::= EXISTS <table subquery>
----

=== 8.10 <unique predicate>

.Function

Specify a test for the absence of duplicate rows.


Format
[[unique-predicate]]
[subs="specialcharacters,macros"]
----
<unique predicate> ::= UNIQUE <table subquery>
----

=== 8.11 <normalized predicate>

.Function

Determine whether a character string value is normalized.


Format
[[normalized-predicate]]
[subs="specialcharacters,macros"]
----
<normalized predicate> ::= <row value predicand> <normalized predicate part 2>
----

[[normalized-predicate-part-2]]
[subs="specialcharacters,macros"]
----
<normalized predicate part 2> ::= IS [ NOT ] NORMALIZED
----

=== 8.12 <match predicate>

.Function

Specify a test for matching rows.


Format
[[match-predicate]]
[subs="specialcharacters,macros"]
----
<match predicate> ::= <row value predicand> <match predicate part 2>
----

[[match-predicate-part-2]]
[subs="specialcharacters,macros"]
----
<match predicate part 2> ::=
    MATCH [ UNIQUE ] [ SIMPLE | PARTIAL | FULL ] <<table-subquery, <table subquery> >>
----

=== 8.13 <overlaps predicate>

.Function

Specify a test for an overlap between two datetime periods.


Format
[[overlaps-predicate]]
[subs="specialcharacters,macros"]
----
<overlaps predicate> ::= <overlaps predicate part 1> <overlaps predicate part 2>
----

[[overlaps-predicate-part-1]]
[subs="specialcharacters,macros"]
----
<overlaps predicate part 1> ::= <row value predicand 1>
----

[[overlaps-predicate-part-2]]
[subs="specialcharacters,macros"]
----
<overlaps predicate part 2> ::= OVERLAPS <row value predicand 2>
----

[[row-value-predicand-1]]
[subs="specialcharacters,macros"]
----
<row value predicand 1> ::= <row value predicand>
----

[[row-value-predicand-2]]
[subs="specialcharacters,macros"]
----
<row value predicand 2> ::= <row value predicand>
----

=== 8.14 <distinct predicate>

.Function

Specify a test of whether two row values are distinct


Format
[[distinct-predicate]]
[subs="specialcharacters,macros"]
----
<distinct predicate> ::=
    <<row-value-predicand-3, <row value predicand 3> >> <<distinct-predicate-part-2, <distinct predicate part 2> >>
----

[[distinct-predicate-part-2]]
[subs="specialcharacters,macros"]
----
<distinct predicate part 2> ::=
    IS [ NOT ] DISTINCT FROM <<row-value-predicand-4, <row value predicand 4> >>
----

[[row-value-predicand-3]]
[subs="specialcharacters,macros"]
----
<row value predicand 3> ::= <row value predicand>
----

[[row-value-predicand-4]]
[subs="specialcharacters,macros"]
----
<row value predicand 4> ::= <row value predicand>
----

=== 8.15 <member predicate>

.Function

Specify a test of whether a value is a member of a multiset.


Format
[[member-predicate]]
[subs="specialcharacters,macros"]
----
<member predicate> ::=
    <<row-value-predicand, <row value predicand> >> <<member-predicate-part-2, <member predicate part 2> >>
----

[[member-predicate-part-2]]
[subs="specialcharacters,macros"]
----
<member predicate part 2> ::=
    [ NOT ] MEMBER [ OF ] <<multiset-value-expression, <multiset value expression> >>
----

=== 8.16 <submultiset predicate>

.Function

Specify a test of whether a multiset is a submultiset of another multiset.


Format
[[submultiset-predicate]]
[subs="specialcharacters,macros"]
----
<submultiset predicate> ::=
    <<row-value-predicand, <row value predicand> >> <<submultiset-predicate-part-2, <submultiset predicate part 2> >>
----

[[submultiset-predicate-part-2]]
[subs="specialcharacters,macros"]
----
<submultiset predicate part 2> ::=
    [ NOT ] SUBMULTISET [ OF ] <<multiset-value-expression, <multiset value expression> >>
----

=== 8.17 <set predicate>

.Function

Specify a test of whether a multiset is a set (that is, does not contain any duplicates).


Format
[[set-predicate]]
[subs="specialcharacters,macros"]
----
<set predicate> ::= <row value predicand> <set predicate part 2>
----

[[set-predicate-part-2]]
[subs="specialcharacters,macros"]
----
<set predicate part 2> ::= IS [ NOT ] A SET
----

=== 8.18 <type predicate>

.Function

Specify a type test.


Format
[[type-predicate]]
[subs="specialcharacters,macros"]
----
<type predicate> ::=
    <<row-value-predicand, <row value predicand> >> <<type-predicate-part-2, <type predicate part 2> >>
----

[[type-predicate-part-2]]
[subs="specialcharacters,macros"]
----
<type predicate part 2> ::=
    IS [ NOT ] OF <<left-paren, <left paren> >> <<type-list, <type list> >> <<right-paren, <right paren> >>
----

[[type-list]]
[subs="specialcharacters,macros"]
----
<type list> ::=
    <<user-defined-type-specification, <user-defined type specification> >>
    [ { <<comma, <comma> >> <<user-defined-type-specification, <user-defined type specification> >> }... ]
----

[[user-defined-type-specification]]
[subs="specialcharacters,macros"]
----
<user-defined type specification> ::=
    <<inclusive-user-defined-type-specification, <inclusive user-defined type specification> >>
  | <<exclusive-user-defined-type-specification, <exclusive user-defined type specification> >>
----

[[inclusive-user-defined-type-specification]]
[subs="specialcharacters,macros"]
----
<inclusive user-defined type specification> ::=
    <<path-resolved-user-defined-type-name, <path-resolved user-defined type name> >>
----

[[exclusive-user-defined-type-specification]]
[subs="specialcharacters,macros"]
----
<exclusive user-defined type specification> ::=
    ONLY <<path-resolved-user-defined-type-name, <path-resolved user-defined type name> >>
----

=== 8.19 <search condition>

.Function

Specify a condition that is True, False, or Unknown, depending on the value of a <boolean value expression>.


Format
[[search-condition]]
[subs="specialcharacters,macros"]
----
<search condition> ::= <boolean value expression>
----


== 10 Additional common elements


=== 10.1 <interval qualifier>

.Function

Specify the precision of an interval data type.


Format
[[interval-qualifier]]
[subs="specialcharacters,macros"]
----
<interval qualifier> ::=
    <<start-field, <start field> >> TO <<end-field, <end field> >>
  | <<single-datetime-field, <single datetime field> >>
----

[[start-field]]
[subs="specialcharacters,macros"]
----
<start field> ::=
    <<non-second-primary-datetime-field, <non-second primary datetime field> >>
    [ <<left-paren, <left paren> >> <<interval-leading-field-precision, <interval leading field precision> >> <<right-paren, <right paren> >> ]
----

[[end-field]]
[subs="specialcharacters,macros"]
----
<end field> ::=
    <<non-second-primary-datetime-field, <non-second primary datetime field> >>
  | SECOND [ <<left-paren, <left paren> >> <<interval-fractional-seconds-precision, <interval fractional seconds precision> >> <<right-paren, <right paren> >> ]
----

[[single-datetime-field]]
[subs="specialcharacters,macros"]
----
<single datetime field> ::=
    <<non-second-primary-datetime-field, <non-second primary datetime field> >>
    [ <<left-paren, <left paren> >> <<interval-leading-field-precision, <interval leading field precision> >> <<right-paren, <right paren> >> ]
  | SECOND [ <<left-paren, <left paren> >> <<interval-leading-field-precision, <interval leading field precision> >>
    [ <<comma, <comma> >> <<interval-fractional-seconds-precision, <interval fractional seconds precision> >> ] <<right-paren, <right paren> >> ]
----

[[primary-datetime-field]]
[subs="specialcharacters,macros"]
----
<primary datetime field> ::=
    <<non-second-primary-datetime-field, <non-second primary datetime field> >>
  | SECOND
----

[[non-second-primary-datetime-field]]
[subs="specialcharacters,macros"]
----
<non-second primary datetime field> ::=
    YEAR
  | MONTH
  | DAY
  | HOUR
  | MINUTE
----

[[interval-fractional-seconds-precision]]
[subs="specialcharacters,macros"]
----
<interval fractional seconds precision> ::= <unsigned integer>
----

[[interval-leading-field-precision]]
[subs="specialcharacters,macros"]
----
<interval leading field precision> ::= <unsigned integer>
----

=== 10.2 <language clause>

.Function

Specify a standard programming language.


Format
[[language-clause]]
[subs="specialcharacters,macros"]
----
<language clause> ::= LANGUAGE <language name>
----

[[language-name]]
[subs="specialcharacters,macros"]
----
<language name> ::=
    ADA
  | C
  | COBOL
  | FORTRAN
  | M | MUMPS
  | PASCAL
  | PLI
  | SQL
----

=== 10.3 <path specification>

.Function

Specify an order for searching for an SQL-invoked routine.


Format
[[path-specification]]
[subs="specialcharacters,macros"]
----
<path specification> ::= PATH <schema name list>
----

[[schema-name-list]]
[subs="specialcharacters,macros"]
----
<schema name list> ::= <schema name> [ { <comma> <schema name> }... ]
----

=== 10.4 <routine invocation>

.Function

Invoke an SQL-invoked routine.


Format
[[routine-invocation]]
[subs="specialcharacters,macros"]
----
<routine invocation> ::= <routine name> <SQL argument list>
----

[[routine-name]]
[subs="specialcharacters,macros"]
----
<routine name> ::= [ <schema name> <period> ] <qualified identifier>
----

[[SQL-argument-list]]
[subs="specialcharacters,macros"]
----
<SQL argument list> ::=
    <<left-paren, <left paren> >> [ <<SQL-argument, <SQL argument> >> [ { <<comma, <comma> >> <<SQL-argument, <SQL argument> >> }... ] ] <<right-paren, <right paren> >>
----

[[SQL-argument]]
[subs="specialcharacters,macros"]
----
<SQL argument> ::=
    <<value-expression, <value expression> >>
  | <<generalized-expression, <generalized expression> >>
  | <<target-specification, <target specification> >>
----

[[generalized-expression]]
[subs="specialcharacters,macros"]
----
<generalized expression> ::=
    <<value-expression, <value expression> >> AS <<path-resolved-user-defined-type-name, <path-resolved user-defined type name> >>
----

=== 10.5 <character set specification>

.Function

Identify a character set.


Format
[[character-set-specification]]
[subs="specialcharacters,macros"]
----
<character set specification> ::=
    <<standard-character-set-name, <standard character set name> >>
  | <<implementation-defined-character-set-name, <implementation-defined character set name> >>
  | <<user-defined-character-set-name, <user-defined character set name> >>
----

[[standard-character-set-name]]
[subs="specialcharacters,macros"]
----
<standard character set name> ::= <character set name>
----

[[implementation-defined-character-set-name]]
[subs="specialcharacters,macros"]
----
<implementation-defined character set name> ::= <character set name>
----

[[user-defined-character-set-name]]
[subs="specialcharacters,macros"]
----
<user-defined character set name> ::= <character set name>
----

=== 10.6 <specific routine designator>

.Function

Specify an SQL-invoked routine.


Format
[[specific-routine-designator]]
[subs="specialcharacters,macros"]
----
<specific routine designator> ::=
    SPECIFIC <<routine-type, <routine type> >> <<specific-name, <specific name> >>
  | <<routine-type, <routine type> >> <<member-name, <member name> >> [ FOR <<schema-resolved-user-defined-type-name, <schema-resolved user-defined type name> >> ]
----

[[routine-type]]
[subs="specialcharacters,macros"]
----
<routine type> ::=
    ROUTINE
  | FUNCTION
  | PROCEDURE
  | [ INSTANCE | STATIC | CONSTRUCTOR ] METHOD
----

[[member-name]]
[subs="specialcharacters,macros"]
----
<member name> ::= <member name alternatives> [ <data type list> ]
----

[[member-name-alternatives]]
[subs="specialcharacters,macros"]
----
<member name alternatives> ::=
    <<schema-qualified-routine-name, <schema qualified routine name> >>
  | <<method-name, <method name> >>
----

[[data-type-list]]
[subs="specialcharacters,macros"]
----
<data type list> ::=
    <<left-paren, <left paren> >> [ <<data-type, <data type> >> [ { <<comma, <comma> >> <<data-type, <data type> >> }... ] ] <<right-paren, <right paren> >>
----

=== 10.7 <collate clause>

.Function

Specify a default collation.


Format
[[collate-clause]]
[subs="specialcharacters,macros"]
----
<collate clause> ::= COLLATE <collation name>
----

=== 10.8 <constraint name definition> and <constraint characteristics>

.Function

Specify the name of a constraint and its characteristics.


Format
[[constraint-name-definition]]
[subs="specialcharacters,macros"]
----
<constraint name definition> ::= CONSTRAINT <constraint name>
----

[[constraint-characteristics]]
[subs="specialcharacters,macros"]
----
<constraint characteristics> ::=
    <<constraint-check-time, <constraint check time> >> [ [ NOT ] DEFERRABLE ]
  | [ NOT ] DEFERRABLE [ <<constraint-check-time, <constraint check time> >> ]
----

[[constraint-check-time]]
[subs="specialcharacters,macros"]
----
<constraint check time> ::=
    INITIALLY DEFERRED
  | INITIALLY IMMEDIATE
----

=== 10.9 <aggregate function>

.Function

Specify a value computed from a collection of rows.


Format
[[aggregate-function]]
[subs="specialcharacters,macros"]
----
<aggregate function> ::=
    COUNT <<left-paren, <left paren> >> <<asterisk, <asterisk> >> <<right-paren, <right paren> >> [ <<filter-clause, <filter clause> >> ]
  | <<general-set-function, <general set function> >> [ <<filter-clause, <filter clause> >> ]
  | <<binary-set-function, <binary set function> >> [ <<filter-clause, <filter clause> >> ]
  | <<ordered-set-function, <ordered set function> >> [ <<filter-clause, <filter clause> >> ]
----

[[general-set-function]]
[subs="specialcharacters,macros"]
----
<general set function> ::=
    <<set-function-type, <set function type> >> <<left-paren, <left paren> >> [ <<set-quantifier, <set quantifier> >> ]
    <<value-expression, <value expression> >> <<right-paren, <right paren> >>
----

[[set-function-type]]
[subs="specialcharacters,macros"]
----
<set function type> ::= <computational operation>
----

[[computational-operation]]
[subs="specialcharacters,macros"]
----
<computational operation> ::=
    AVG
  | MAX
  | MIN
  | SUM
  | EVERY
  | ANY
  | SOME
  | COUNT
  | STDDEV_POP
  | STDDEV_SAMP
  | VAR_SAMP
  | VAR_POP
  | COLLECT
  | FUSION
  | INTERSECTION
----

[[set-quantifier]]
[subs="specialcharacters,macros"]
----
<set quantifier> ::=
    DISTINCT
  | ALL
----

[[filter-clause]]
[subs="specialcharacters,macros"]
----
<filter clause> ::=
    FILTER <<left-paren, <left paren> >> WHERE <<search-condition, <search condition> >> <<right-paren, <right paren> >>
----

[[binary-set-function]]
[subs="specialcharacters,macros"]
----
<binary set function> ::=
    <<binary-set-function-type, <binary set function type> >> <<left-paren, <left paren> >> <<dependent-variable-expression, <dependent variable expression> >> <<comma, <comma> >>
    <<independent-variable-expression, <independent variable expression> >> <<right-paren, <right paren> >>
----

[[binary-set-function-type]]
[subs="specialcharacters,macros"]
----
<binary set function type> ::=
    COVAR_POP
  | COVAR_SAMP
  | CORR
  | REGR_SLOPE
  | REGR_INTERCEPT
  |   REGR_COUNT
  |   REGR_R2
  |   REGR_AVGX
  |   REGR_AVGY
  |   REGR_SXX
  |   REGR_SYY
  |   REGR_SXY
----

[[dependent-variable-expression]]
[subs="specialcharacters,macros"]
----
<dependent variable expression> ::= <numeric value expression>
----

[[independent-variable-expression]]
[subs="specialcharacters,macros"]
----
<independent variable expression> ::= <numeric value expression>
----

[[ordered-set-function]]
[subs="specialcharacters,macros"]
----
<ordered set function> ::=
    <<hypothetical-set-function, <hypothetical set function> >>
  | <<inverse-distribution-function, <inverse distribution function> >>
----

[[hypothetical-set-function]]
[subs="specialcharacters,macros"]
----
<hypothetical set function> ::=
    <<rank-function-type, <rank function type> >> <<left-paren, <left paren> >>
    <<hypothetical-set-function-value-expression-list, <hypothetical set function value expression list> >> <<right-paren, <right paren> >>
    <<within-group-specification, <within group specification> >>
----

[[within-group-specification]]
[subs="specialcharacters,macros"]
----
<within group specification> ::=
    WITHIN GROUP <<left-paren, <left paren> >> ORDER BY <<sort-specification-list, <sort specification list> >> <<right-paren, <right paren> >>
----

[[hypothetical-set-function-value-expression-list]]
[subs="specialcharacters,macros"]
----
<hypothetical set function value expression list> ::=
    <<value-expression, <value expression> >> [ { <<comma, <comma> >> <<value-expression, <value expression> >> }... ]
----

[[inverse-distribution-function]]
[subs="specialcharacters,macros"]
----
<inverse distribution function> ::=
    <<inverse-distribution-function-type, <inverse distribution function type> >> <<left-paren, <left paren> >>
    <<inverse-distribution-function-argument, <inverse distribution function argument> >> <<right-paren, <right paren> >>
    <<within-group-specification, <within group specification> >>
----

[[inverse-distribution-function-argument]]
[subs="specialcharacters,macros"]
----
<inverse distribution function argument> ::= <numeric value expression>
----

[[inverse-distribution-function-type]]
[subs="specialcharacters,macros"]
----
<inverse distribution function type> ::=
    PERCENTILE_CONT
  | PERCENTILE_DISC
----

=== 10.10 <sort specification list>

.Function

Specify a sort order.


Format
[[sort-specification-list]]
[subs="specialcharacters,macros"]
----
<sort specification list> ::=
    <<sort-specification, <sort specification> >> [ { <<comma, <comma> >> <<sort-specification, <sort specification> >> }... ]
----

[[sort-specification]]
[subs="specialcharacters,macros"]
----
<sort specification> ::=
    <<sort-key, <sort key> >> [ <<ordering-specification, <ordering specification> >> ] [ <<null-ordering, <null ordering> >> ]
----

[[sort-key]]
[subs="specialcharacters,macros"]
----
<sort key> ::= <value expression>
----

[[ordering-specification]]
[subs="specialcharacters,macros"]
----
<ordering specification> ::=
    ASC
  | DESC
----

[[null-ordering]]
[subs="specialcharacters,macros"]
----
<null ordering> ::=
    NULLS FIRST
  | NULLS LAST
----

== 11 Schema definition and manipulation


=== 11.1 <schema definition>

.Function

Define a schema.


Format
[[schema-definition]]
[subs="specialcharacters,macros"]
----
<schema definition> ::=
    CREATE SCHEMA <<schema-name-clause, <schema name clause> >>
    [ <<schema-character-set-or-path, <schema character set or path> >> ]
    [ <<schema-element, <schema element> >>... ]
----

[[schema-character-set-or-path]]
[subs="specialcharacters,macros"]
----
<schema character set or path> ::=
    <<schema-character-set-specification, <schema character set specification> >>
  | <<schema-path-specification, <schema path specification> >>
  | <<schema-character-set-specification, <schema character set specification> >> <<schema-path-specification, <schema path specification> >>
  | <<schema-path-specification, <schema path specification> >> <<schema-character-set-specification, <schema character set specification> >>
----

[[schema-name-clause]]
[subs="specialcharacters,macros"]
----
<schema name clause> ::=
    <<schema-name, <schema name> >>
  | AUTHORIZATION <<schema-authorization-identifier, <schema authorization identifier> >>
  | <<schema-name, <schema name> >> AUTHORIZATION <<schema-authorization-identifier, <schema authorization identifier> >>
----

[[schema-authorization-identifier]]
[subs="specialcharacters,macros"]
----
<schema authorization identifier> ::= <authorization identifier>
----

[[schema-character-set-specification]]
[subs="specialcharacters,macros"]
----
<schema character set specification> ::=
    DEFAULT CHARACTER SET <<character-set-specification, <character set specification> >>
----

[[schema-path-specification]]
[subs="specialcharacters,macros"]
----
<schema path specification> ::= <path specification>
----

[[schema-element]]
[subs="specialcharacters,macros"]
----
<schema element> ::=
    <<table-definition, <table definition> >>
  | <<view-definition, <view definition> >>
  | <<domain-definition, <domain definition> >>
  | <<character-set-definition, <character set definition> >>
  | <<collation-definition, <collation definition> >>
  | <<transliteration-definition, <transliteration definition> >>
  | <<assertion-definition, <assertion definition> >>
  | <<trigger-definition, <trigger definition> >>
  | <<user-defined-type-definition, <user-defined type definition> >>
  | <<user-defined-cast-definition, <user-defined cast definition> >>
  | <<user-defined-ordering-definition, <user-defined ordering definition> >>
  | <<transform-definition, <transform definition> >>
  | <<schema-routine, <schema routine> >>
  | <<sequence-generator-definition, <sequence generator definition> >>
  | <<grant-statement, <grant statement> >>
  | <<role-definition, <role definition> >>
----

=== 11.2 <drop schema statement>

.Function

Destroy a schema.


Format
[[drop-schema-statement]]
[subs="specialcharacters,macros"]
----
<drop schema statement> ::= DROP SCHEMA <schema name> <drop behavior>
----

[[drop-behavior]]
[subs="specialcharacters,macros"]
----
<drop behavior> ::=
    CASCADE
  | RESTRICT
----

=== 11.3 <table definition>

.Function

Define a persistent base table, a created local temporary table, or a global temporary table.


Format
[[table-definition]]
[subs="specialcharacters,macros"]
----
<table definition> ::=
    CREATE [ <<table-scope, <table scope> >> ] TABLE <<table-name, <table name> >> <<table-contents-source, <table contents source> >>
    [ ON COMMIT <<table-commit-action, <table commit action> >> ROWS ]
----

[[table-contents-source]]
[subs="specialcharacters,macros"]
----
<table contents source> ::=
    <<table-element-list, <table element list> >>
  | <<typed-table-clause, <typed table clause> >>
  | <<as-subquery-clause, <as subquery clause> >>
----

[[table-scope]]
[subs="specialcharacters,macros"]
----
<table scope> ::= <global or local> TEMPORARY
----

[[global-or-local]]
[subs="specialcharacters,macros"]
----
<global or local> ::=
    GLOBAL
  | LOCAL
----

[[table-commit-action]]
[subs="specialcharacters,macros"]
----
<table commit action> ::=
    PRESERVE
  | DELETE
----

[[table-element-list]]
[subs="specialcharacters,macros"]
----
<table element list> ::=
    <<left-paren, <left paren> >> <<table-element, <table element> >> [ { <<comma, <comma> >> <<table-element, <table element> >> }... ] <<right-paren, <right paren> >>
----

[[table-element]]
[subs="specialcharacters,macros"]
----
<table element> ::=
    <<column-definition, <column definition> >>
  | <<table-constraint-definition, <table constraint definition> >>
  | <<like-clause, <like clause> >>
----

[[typed-table-clause]]
[subs="specialcharacters,macros"]
----
<typed table clause> ::=
    OF <<path-resolved-user-defined-type-name, <path-resolved user-defined type name> >> [ <<subtable-clause, <subtable clause> >> ]
    [ <<typed-table-element-list, <typed table element list> >> ]
----

[[typed-table-element-list]]
[subs="specialcharacters,macros"]
----
<typed table element list> ::=
    <<left-paren, <left paren> >> <<typed-table-element, <typed table element> >>
    [ { <<comma, <comma> >> <<typed-table-element, <typed table element> >> }... ] <<right-paren, <right paren> >>
----

[[typed-table-element]]
[subs="specialcharacters,macros"]
----
<typed table element> ::=
    <<column-options, <column options> >>
  | <<table-constraint-definition, <table constraint definition> >>
  | <<self-referencing-column-specification, <self-referencing column specification> >>
----

[[self-referencing-column-specification]]
[subs="specialcharacters,macros"]
----
<self-referencing column specification> ::=
    REF IS <<self-referencing-column-name, <self-referencing column name> >> [ <<reference-generation, <reference generation> >> ]
----

[[reference-generation]]
[subs="specialcharacters,macros"]
----
<reference generation> ::=
    SYSTEM GENERATED
  | USER GENERATED
  | DERIVED
----

[[self-referencing-column-name]]
[subs="specialcharacters,macros"]
----
<self-referencing column name> ::= <column name>
----

[[column-options]]
[subs="specialcharacters,macros"]
----
<column options> ::= <column name> WITH OPTIONS <column option list>
----

[[column-option-list]]
[subs="specialcharacters,macros"]
----
<column option list> ::=
    [ <<scope-clause, <scope clause> >> ] [ <<default-clause, <default clause> >> ] [ <<column-constraint-definition, <column constraint definition> >>... ]
----

[[subtable-clause]]
[subs="specialcharacters,macros"]
----
<subtable clause> ::= UNDER <supertable clause>
----

[[supertable-clause]]
[subs="specialcharacters,macros"]
----
<supertable clause> ::= <supertable name>
----

[[supertable-name]]
[subs="specialcharacters,macros"]
----
<supertable name> ::= <table name>
----

[[like-clause]]
[subs="specialcharacters,macros"]
----
<like clause> ::= LIKE <table name> [ <like options> ]
----

[[like-options]]
[subs="specialcharacters,macros"]
----
<like options> ::= <like option>...
----

[[like-option]]
[subs="specialcharacters,macros"]
----
<like option> ::=
    <<identity-option, <identity option> >>
  | <<column-default-option, <column default option> >>
  | <<generation-option, <generation option> >>
----

[[identity-option]]
[subs="specialcharacters,macros"]
----
<identity option> ::=
    INCLUDING IDENTITY
  | EXCLUDING IDENTITY
----

[[column-default-option]]
[subs="specialcharacters,macros"]
----
<column default option> ::=
    INCLUDING DEFAULTS
  | EXCLUDING DEFAULTS
----

[[generation-option]]
[subs="specialcharacters,macros"]
----
<generation option> ::=
    INCLUDING GENERATED
  | EXCLUDING GENERATED
----

[[as-subquery-clause]]
[subs="specialcharacters,macros"]
----
<as subquery clause> ::=
    [ <<left-paren, <left paren> >> <<column-name-list, <column name list> >> <<right-paren, <right paren> >> ] AS <<subquery, <subquery> >>
    <<with-or-without-data, <with or without data> >>
----

[[with-or-without-data]]
[subs="specialcharacters,macros"]
----
<with or without data> ::=
    WITH NO DATA
  | WITH DATA
----

=== 11.4 <column definition>

.Function

Define a column of a base table.


Format
[[column-definition]]
[subs="specialcharacters,macros"]
----
<column definition> ::=
    <<column-name, <column name> >> [ <<data-type-or-domain-name, <data type or domain name> >> ]
    [ <<default-clause, <default clause> >> | <<identity-column-specification, <identity column specification> >> | <<generation-clause, <generation clause> >> ]
    [ <<column-constraint-definition, <column constraint definition> >>... ]
    [ <<collate-clause, <collate clause> >> ]
----

[[data-type-or-domain-name]]
[subs="specialcharacters,macros"]
----
<data type or domain name> ::=
    <<data-type, <data type> >>
  | <<domain-name, <domain name> >>
----

[[column-constraint-definition]]
[subs="specialcharacters,macros"]
----
<column constraint definition> ::=
    [ <<constraint-name-definition, <constraint name definition> >> ] <<column-constraint, <column constraint> >> [ <<constraint-characteristics, <constraint characteristics> >> ]
----

[[column-constraint]]
[subs="specialcharacters,macros"]
----
<column constraint> ::=
    NOT NULL
  | <<unique-specification, <unique specification> >>
  | <<references-specification, <references specification> >>
  | <<check-constraint-definition, <check constraint definition> >>
----

[[identity-column-specification]]
[subs="specialcharacters,macros"]
----
<identity column specification> ::=
    GENERATED { ALWAYS | BY DEFAULT } AS IDENTITY
    [ <<left-paren, <left paren> >> <<common-sequence-generator-options, <common sequence generator options> >> <<right-paren, <right paren> >> ]
----

[[generation-clause]]
[subs="specialcharacters,macros"]
----
<generation clause> ::= <generation rule> AS <generation expression>
----

[[generation-rule]]
[subs="specialcharacters,macros"]
----
<generation rule> ::= GENERATED ALWAYS
----

[[generation-expression]]
[subs="specialcharacters,macros"]
----
<generation expression> ::= <left paren> <value expression> <right paren>
----

=== 11.5 <default clause>

.Function

Specify the default for a column, domain, or attribute.


Format
[[default-clause]]
[subs="specialcharacters,macros"]
----
<default clause> ::= DEFAULT <default option>
----

[[default-option]]
[subs="specialcharacters,macros"]
----
<default option> ::=
    <<literal, <literal> >>
  | <<datetime-value-function, <datetime value function> >>
  | USER
  | CURRENT_USER
  | CURRENT_ROLE
  | SESSION_USER
  | SYSTEM_USER
  | CURRENT_PATH
  | <<implicitly-typed-value-specification, <implicitly typed value specification> >>
----

=== 11.6 <table constraint definition>

.Function

Specify an integrity constraint.


Format
[[table-constraint-definition]]
[subs="specialcharacters,macros"]
----
<table constraint definition> ::=
    [ <<constraint-name-definition, <constraint name definition> >> ] <<table-constraint, <table constraint> >>
    [ <<constraint-characteristics, <constraint characteristics> >> ]
----

[[table-constraint]]
[subs="specialcharacters,macros"]
----
<table constraint> ::=
    <<unique-constraint-definition, <unique constraint definition> >>
  | <<referential-constraint-definition, <referential constraint definition> >>
  | <<check-constraint-definition, <check constraint definition> >>
----

=== 11.7 <unique constraint definition>

.Function

Specify a uniqueness constraint for a table.


Format
[[unique-constraint-definition]]
[subs="specialcharacters,macros"]
----
<unique constraint definition> ::=
    <<unique-specification, <unique specification> >> <<left-paren, <left paren> >> <<unique-column-list, <unique column list> >> <<right-paren, <right paren> >>
  | UNIQUE ( VALUE )
----

[[unique-specification]]
[subs="specialcharacters,macros"]
----
<unique specification> ::=
    UNIQUE
  | PRIMARY KEY
----

[[unique-column-list]]
[subs="specialcharacters,macros"]
----
<unique column list> ::= <column name list>
----

=== 11.8 <referential constraint definition>

.Function

Specify a referential constraint.


Format
[[referential-constraint-definition]]
[subs="specialcharacters,macros"]
----
<referential constraint definition> ::=
    FOREIGN KEY <<left-paren, <left paren> >> <<referencing-columns, <referencing columns> >> <<right-paren, <right paren> >>
    <<references-specification, <references specification> >>
----

[[references-specification]]
[subs="specialcharacters,macros"]
----
<references specification> ::=
    REFERENCES <<referenced-table-and-columns, <referenced table and columns> >>
    [ MATCH <<match-type, <match type> >> ] [ <<referential-triggered-action, <referential triggered action> >> ]
----

[[match-type]]
[subs="specialcharacters,macros"]
----
<match type> ::=
    FULL
  | PARTIAL
  | SIMPLE
----

[[referencing-columns]]
[subs="specialcharacters,macros"]
----
<referencing columns> ::= <reference column list>
----

[[referenced-table-and-columns]]
[subs="specialcharacters,macros"]
----
<referenced table and columns> ::=
    <<table-name, <table name> >> [ <<left-paren, <left paren> >> <<reference-column-list, <reference column list> >> <<right-paren, <right paren> >> ]
----

[[reference-column-list]]
[subs="specialcharacters,macros"]
----
<reference column list> ::= <column name list>
----

[[referential-triggered-action]]
[subs="specialcharacters,macros"]
----
<referential triggered action> ::=
    <<update-rule, <update rule> >> [ <<delete-rule, <delete rule> >> ]
  | <<delete-rule, <delete rule> >> [ <<update-rule, <update rule> >> ]
----

[[update-rule]]
[subs="specialcharacters,macros"]
----
<update rule> ::= ON UPDATE <referential action>
----

[[delete-rule]]
[subs="specialcharacters,macros"]
----
<delete rule> ::= ON DELETE <referential action>
----

[[referential-action]]
[subs="specialcharacters,macros"]
----
<referential action> ::=
    CASCADE
  | SET NULL
  | SET DEFAULT
  | RESTRICT
  | NO ACTION
----

=== 11.9 <check constraint definition>

.Function

Specify a condition for the SQL-data.


Format
[[check-constraint-definition]]
[subs="specialcharacters,macros"]
----
<check constraint definition> ::= CHECK <left paren> <search condition> <right paren>
----

=== 11.10 <alter table statement>

.Function

Change the definition of a table.


Format
[[alter-table-statement]]
[subs="specialcharacters,macros"]
----
<alter table statement> ::= ALTER TABLE <table name> <alter table action>
----

[[alter-table-action]]
[subs="specialcharacters,macros"]
----
<alter table action> ::=
    <<add-column-definition, <add column definition> >>
  | <<alter-column-definition, <alter column definition> >>
  | <<drop-column-definition, <drop column definition> >>
  | <<add-table-constraint-definition, <add table constraint definition> >>
  | <<drop-table-constraint-definition, <drop table constraint definition> >>
----

=== 11.11 <add column definition>

.Function

Add a column to a table.


Format
[[add-column-definition]]
[subs="specialcharacters,macros"]
----
<add column definition> ::= ADD [ COLUMN ] <column definition>
----

=== 11.12 <alter column definition>

.Function

Change a column and its definition.


Format
[[alter-column-definition]]
[subs="specialcharacters,macros"]
----
<alter column definition> ::=
    ALTER [ COLUMN ] <<column-name, <column name> >> <<alter-column-action, <alter column action> >>
----

[[alter-column-action]]
[subs="specialcharacters,macros"]
----
<alter column action> ::=
    <<set-column-default-clause, <set column default clause> >>
  | <<drop-column-default-clause, <drop column default clause> >>
  | <<add-column-scope-clause, <add column scope clause> >>
  | <<drop-column-scope-clause, <drop column scope clause> >>
  | <<alter-identity-column-specification, <alter identity column specification> >>
----

=== 11.13 <set column default clause>

.Function

Set the default clause for a column.


Format
[[set-column-default-clause]]
[subs="specialcharacters,macros"]
----
<set column default clause> ::= SET <default clause>
----

=== 11.14 <drop column default clause>

.Function

Drop the default clause from a column.


Format
[[drop-column-default-clause]]
[subs="specialcharacters,macros"]
----
<drop column default clause> ::= DROP DEFAULT
----

=== 11.15 <add column scope clause>

.Function

Add a non-empty scope for an existing column of data type REF in a base table.


Format
[[add-column-scope-clause]]
[subs="specialcharacters,macros"]
----
<add column scope clause> ::= ADD <scope clause>
----

=== 11.16 <drop column scope clause>

.Function

Drop the scope from an existing column of data type REF in a base table.


Format
[[drop-column-scope-clause]]
[subs="specialcharacters,macros"]
----
<drop column scope clause> ::= DROP SCOPE <drop behavior>
----

=== 11.17 <alter identity column specification>

.Function

Change the options specified for an identity column.


Format
[[alter-identity-column-specification]]
[subs="specialcharacters,macros"]
----
<alter identity column specification> ::= <alter identity column option>...
----

[[alter-identity-column-option]]
[subs="specialcharacters,macros"]
----
<alter identity column option> ::=
    <<alter-sequence-generator-restart-option, <alter sequence generator restart option> >>
  | SET <<basic-sequence-generator-option, <basic sequence generator option> >>
----

=== 11.18 <drop column definition>

.Function

Destroy a column of a base table.


Format
[[drop-column-definition]]
[subs="specialcharacters,macros"]
----
<drop column definition> ::= DROP [ COLUMN ] <column name> <drop behavior>
----

=== 11.19 <add table constraint definition>

.Function

Add a constraint to a table.


Format
[[add-table-constraint-definition]]
[subs="specialcharacters,macros"]
----
<add table constraint definition> ::= ADD <table constraint definition>
----

=== 11.20 <drop table constraint definition>

.Function

Destroy a constraint on a table.


Format
[[drop-table-constraint-definition]]
[subs="specialcharacters,macros"]
----
<drop table constraint definition> ::= DROP CONSTRAINT <constraint name> <drop behavior>
----

=== 11.21 <drop table statement>

.Function

Destroy a table.


Format
[[drop-table-statement]]
[subs="specialcharacters,macros"]
----
<drop table statement> ::= DROP TABLE <table name> <drop behavior>
----

=== 11.22 <view definition>

.Function

Define a viewed table.


Format
[[view-definition]]
[subs="specialcharacters,macros"]
----
<view definition> ::=
    CREATE [ RECURSIVE ] VIEW <<table-name, <table name> >> <<view-specification, <view specification> >>
    AS <<query-expression, <query expression> >> [ WITH [ <<levels-clause, <levels clause> >> ] CHECK OPTION ]
----

[[view-specification]]
[subs="specialcharacters,macros"]
----
<view specification> ::=
    <<regular-view-specification, <regular view specification> >>
  | <<referenceable-view-specification, <referenceable view specification> >>
----

[[regular-view-specification]]
[subs="specialcharacters,macros"]
----
<regular view specification> ::=
    [ <<left-paren, <left paren> >> <<view-column-list, <view column list> >> <<right-paren, <right paren> >> ]
----

[[referenceable-view-specification]]
[subs="specialcharacters,macros"]
----
<referenceable view specification> ::=
    OF <<path-resolved-user-defined-type-name, <path-resolved user-defined type name> >> [ <<subview-clause, <subview clause> >> ]
    [ <<view-element-list, <view element list> >> ]
----

[[subview-clause]]
[subs="specialcharacters,macros"]
----
<subview clause> ::= UNDER <table name>
----

[[view-element-list]]
[subs="specialcharacters,macros"]
----
<view element list> ::=
    <<left-paren, <left paren> >> <<view-element, <view element> >> [ { <<comma, <comma> >> <<view-element, <view element> >> }... ] <<right-paren, <right paren> >>
----

[[view-element]]
[subs="specialcharacters,macros"]
----
<view element> ::=
    <<self-referencing-column-specification, <self-referencing column specification> >>
  | <<view-column-option, <view column option> >>
----

[[view-column-option]]
[subs="specialcharacters,macros"]
----
<view column option> ::= <column name> WITH OPTIONS <scope clause>
----

[[levels-clause]]
[subs="specialcharacters,macros"]
----
<levels clause> ::=
    CASCADED
  | LOCAL
----

[[view-column-list]]
[subs="specialcharacters,macros"]
----
<view column list> ::= <column name list>
----

=== 11.23 <drop view statement>

.Function

Destroy a view.


Format
[[drop-view-statement]]
[subs="specialcharacters,macros"]
----
<drop view statement> ::= DROP VIEW <table name> <drop behavior>
----

=== 11.24 <domain definition>

.Function

Define a domain.


Format
[[domain-definition]]
[subs="specialcharacters,macros"]
----
<domain definition> ::=
    CREATE DOMAIN <<domain-name, <domain name> >> [ AS ] <<predefined-type, <predefined type> >>
    [ <<default-clause, <default clause> >> ]
    [ <<domain-constraint, <domain constraint> >>... ]
    [ <<collate-clause, <collate clause> >> ]
----

[[domain-constraint]]
[subs="specialcharacters,macros"]
----
<domain constraint> ::=
    [ <<constraint-name-definition, <constraint name definition> >> ] <<check-constraint-definition, <check constraint definition> >> [
    <<constraint-characteristics, <constraint characteristics> >> ]
----

=== 11.25 <alter domain statement>

.Function

Change a domain and its definition.


Format
[[alter-domain-statement]]
[subs="specialcharacters,macros"]
----
<alter domain statement> ::= ALTER DOMAIN <domain name> <alter domain action>
----

[[alter-domain-action]]
[subs="specialcharacters,macros"]
----
<alter domain action> ::=
    <<set-domain-default-clause, <set domain default clause> >>
  | <<drop-domain-default-clause, <drop domain default clause> >>
  | <<add-domain-constraint-definition, <add domain constraint definition> >>
  | <<drop-domain-constraint-definition, <drop domain constraint definition> >>
----

=== 11.26 <set domain default clause>

.Function

Set the default value in a domain.


Format
[[set-domain-default-clause]]
[subs="specialcharacters,macros"]
----
<set domain default clause> ::= SET <default clause>
----

=== 11.27 <drop domain default clause>

.Function

Remove the default clause of a domain.


Format
[[drop-domain-default-clause]]
[subs="specialcharacters,macros"]
----
<drop domain default clause> ::= DROP DEFAULT
----

=== 11.28 <add domain constraint definition>

.Function

Add a constraint to a domain.


Format
[[add-domain-constraint-definition]]
[subs="specialcharacters,macros"]
----
<add domain constraint definition> ::= ADD <domain constraint>
----

=== 11.29 <drop domain constraint definition>

.Function

Destroy a constraint on a domain.


Format
[[drop-domain-constraint-definition]]
[subs="specialcharacters,macros"]
----
<drop domain constraint definition> ::= DROP CONSTRAINT <constraint name>
----

=== 11.30 <drop domain statement>

.Function

Destroy a domain.


Format
[[drop-domain-statement]]
[subs="specialcharacters,macros"]
----
<drop domain statement> ::= DROP DOMAIN <domain name> <drop behavior>
----

=== 11.31 <character set definition>

.Function

Define a character set.


Format
[[character-set-definition]]
[subs="specialcharacters,macros"]
----
<character set definition> ::=
    CREATE CHARACTER SET <<character-set-name, <character set name> >> [ AS ]
    <<character-set-source, <character set source> >> [ <<collate-clause, <collate clause> >> ]
----

[[character-set-source]]
[subs="specialcharacters,macros"]
----
<character set source> ::= GET <character set specification>
----

=== 11.32 <drop character set statement>

.Function

Destroy a character set.


Format
[[drop-character-set-statement]]
[subs="specialcharacters,macros"]
----
<drop character set statement> ::= DROP CHARACTER SET <character set name>
----


=== 11.33 <collation definition>

.Function

Define a collation.


Format
[[collation-definition]]
[subs="specialcharacters,macros"]
----
<collation definition> ::=
    CREATE COLLATION <<collation-name, <collation name> >> FOR <<character-set-specification, <character set specification> >>
    FROM <<existing-collation-name, <existing collation name> >> [ <<pad-characteristic, <pad characteristic> >> ]
----

[[existing-collation-name]]
[subs="specialcharacters,macros"]
----
<existing collation name> ::= <collation name>
----

[[pad-characteristic]]
[subs="specialcharacters,macros"]
----
<pad characteristic> ::=
    NO PAD
  | PAD SPACE
----


=== 11.34 <drop collation statement>

.Function

Destroy a collation.


Format
[[drop-collation-statement]]
[subs="specialcharacters,macros"]
----
<drop collation statement> ::= DROP COLLATION <collation name> <drop behavior>
----


=== 11.35 <transliteration definition>

.Function

Define a character transliteration.


Format
[[transliteration-definition]]
[subs="specialcharacters,macros"]
----
<transliteration definition> ::=
    CREATE TRANSLATION <<transliteration-name, <transliteration name> >> FOR <<source-character-set-specification, <source character set specification> >>
    TO <<target-character-set-specification, <target character set specification> >> FROM <<transliteration-source, <transliteration source> >>
----

[[source-character-set-specification]]
[subs="specialcharacters,macros"]
----
<source character set specification> ::= <character set specification>
----

[[target-character-set-specification]]
[subs="specialcharacters,macros"]
----
<target character set specification> ::= <character set specification>
----

[[transliteration-source]]
[subs="specialcharacters,macros"]
----
<transliteration source> ::=
    <<existing-transliteration-name, <existing transliteration name> >>
  | <<transliteration-routine, <transliteration routine> >>
----

[[existing-transliteration-name]]
[subs="specialcharacters,macros"]
----
<existing transliteration name> ::= <transliteration name>
----

[[transliteration-routine]]
[subs="specialcharacters,macros"]
----
<transliteration routine> ::= <specific routine designator>
----


=== 11.36 <drop transliteration statement>

.Function

Destroy a character transliteration.


Format
[[drop-transliteration-statement]]
[subs="specialcharacters,macros"]
----
<drop transliteration statement> ::= DROP TRANSLATION <transliteration name>
----


=== 11.37 <assertion definition>

.Function

Specify an integrity constraint.


Format
[[assertion-definition]]
[subs="specialcharacters,macros"]
----
<assertion definition> ::=
    CREATE ASSERTION <<constraint-name, <constraint name> >>
    CHECK <<left-paren, <left paren> >> <<search-condition, <search condition> >> <<right-paren, <right paren> >>
    [ <<constraint-characteristics, <constraint characteristics> >> ]
----


=== 11.38 <drop assertion statement>

.Function

Destroy an assertion.


Format
[[drop-assertion-statement]]
[subs="specialcharacters,macros"]
----
<drop assertion statement> ::= DROP ASSERTION <constraint name> [ <drop behavior> ]
----

=== 11.39 <trigger definition>

.Function

Define triggered SQL-statements.


Format
[[trigger-definition]]
[subs="specialcharacters,macros"]
----
<trigger definition> ::=
    CREATE TRIGGER <<trigger-name, <trigger name> >> <<trigger-action-time, <trigger action time> >> <<trigger-event, <trigger event> >>
    ON <<table-name, <table name> >> [ REFERENCING <<transition-table-or-variable-list, <transition table or variable list> >> ]
    <<triggered-action, <triggered action> >>
----

[[trigger-action-time]]
[subs="specialcharacters,macros"]
----
<trigger action time> ::=
    BEFORE
  | AFTER
----

[[trigger-event]]
[subs="specialcharacters,macros"]
----
<trigger event> ::=
    INSERT
  | DELETE
  | UPDATE [ OF <<trigger-column-list, <trigger column list> >> ]
----

[[trigger-column-list]]
[subs="specialcharacters,macros"]
----
<trigger column list> ::= <column name list>
----

[[triggered-action]]
[subs="specialcharacters,macros"]
----
<triggered action> ::=
    [ FOR EACH { ROW | STATEMENT } ]
    [ WHEN <<left-paren, <left paren> >> <<search-condition, <search condition> >> <<right-paren, <right paren> >> ]
    <<triggered-SQL-statement, <triggered SQL statement> >>
----

[[triggered-SQL-statement]]
[subs="specialcharacters,macros"]
----
<triggered SQL statement> ::=
    <<SQL-procedure-statement, <SQL procedure statement> >>
  | BEGIN ATOMIC { <<SQL-procedure-statement, <SQL procedure statement> >> <<semicolon, <semicolon> >> }... END
----

[[transition-table-or-variable-list]]
[subs="specialcharacters,macros"]
----
<transition table or variable list> ::= <transition table or variable>...
----

[[transition-table-or----------variable]]
[subs="specialcharacters,macros"]
----
<transition table or          variable> ::=
    OLD [ ROW ] [ AS          ] <<old-transition-variable-name, <old transition variable name> >>
  | NEW [ ROW ] [ AS          ] <<new-transition-variable-name, <new transition variable name> >>
  | OLD TABLE [ AS ]          <<old-transition-table-name, <old transition table name> >>
  | NEW TABLE [ AS ]          <<new-transition-table-name, <new transition table name> >>
----

[[old-transition-table-name]]
[subs="specialcharacters,macros"]
----
<old transition table name> ::= <transition table name>
----

[[new-transition-table-name]]
[subs="specialcharacters,macros"]
----
<new transition table name> ::= <transition table name>
----

[[transition-table-name]]
[subs="specialcharacters,macros"]
----
<transition table name> ::= <identifier>
----

[[old-transition-variable-name]]
[subs="specialcharacters,macros"]
----
<old transition variable name> ::= <correlation name>
----

[[new-transition-variable-name]]
[subs="specialcharacters,macros"]
----
<new transition variable name> ::= <correlation name>
----

=== 11.40 <drop trigger statement>

.Function

Destroy a trigger.


Format
[[drop-trigger-statement]]
[subs="specialcharacters,macros"]
----
<drop trigger statement> ::= DROP TRIGGER <trigger name>
----

=== 11.41 <user-defined type definition>

.Function

Define a user-defined type.


Format
[[user-defined-type-definition]]
[subs="specialcharacters,macros"]
----
<user-defined type definition> ::= CREATE TYPE <user-defined type body>
----

[[user-defined-type-body]]
[subs="specialcharacters,macros"]
----
<user-defined type body> ::=
    <<schema-resolved-user-defined-type-name, <schema-resolved user-defined type name> >>
    [ <<subtype-clause, <subtype clause> >> ]
    [ AS <<representation, <representation> >> ]
    [ <<user-defined-type-option-list, <user-defined type option list> >> ]
    [ <<method-specification-list, <method specification list> >> ]
----

[[user-defined-type-option-list]]
[subs="specialcharacters,macros"]
----
<user-defined type option list> ::=
    <<user-defined-type-option, <user-defined type option> >> [ <<user-defined-type-option, <user-defined type option> >>... ]
----

[[user-defined-type-option]]
[subs="specialcharacters,macros"]
----
<user-defined type option> ::=
    <<instantiable-clause, <instantiable clause> >>
  | <<finality, <finality> >>
  | <<reference-type-specification, <reference type specification> >>
  | <<cast-to-ref, <cast to ref> >>
  | <<cast-to-type, <cast to type> >>
  | <<cast-to-distinct, <cast to distinct> >>
  | <<cast-to-source, <cast to source> >>
----

[[subtype-clause]]
[subs="specialcharacters,macros"]
----
<subtype clause> ::= UNDER <supertype name>
----

[[supertype-name]]
[subs="specialcharacters,macros"]
----
<supertype name> ::= <path-resolved user-defined type name>
----

[[representation]]
[subs="specialcharacters,macros"]
----
<representation> ::=
    <<predefined-type, <predefined type> >>
  | <<member-list, <member list> >>
----

[[member-list]]
[subs="specialcharacters,macros"]
----
<member list> ::= <left paren> <member> [ { <comma> <member> }... ] <right paren>
----

[[member]]
[subs="specialcharacters,macros"]
----
<member> ::= <attribute definition>
----

[[instantiable-clause]]
[subs="specialcharacters,macros"]
----
<instantiable clause> ::=
    INSTANTIABLE
  | NOT INSTANTIABLE
----

[[finality]]
[subs="specialcharacters,macros"]
----
<finality> ::=
    FINAL
  | NOT FINAL
----

[[reference-type-specification]]
[subs="specialcharacters,macros"]
----
<reference type specification> ::=
    <<user-defined-representation, <user-defined representation> >>
  | <<derived-representation, <derived representation> >>
  | <<system-generated-representation, <system-generated representation> >>
----

[[user-defined-representation]]
[subs="specialcharacters,macros"]
----
<user-defined representation> ::= REF USING <predefined type>
----

[[derived-representation]]
[subs="specialcharacters,macros"]
----
<derived representation> ::= REF FROM <list of attributes>
----

[[system-generated-representation]]
[subs="specialcharacters,macros"]
----
<system-generated representation> ::= REF IS SYSTEM GENERATED
----

[[cast-to-ref]]
[subs="specialcharacters,macros"]
----
<cast to ref> ::=
    CAST <<left-paren, <left paren> >> SOURCE AS REF <<right-paren, <right paren> >> WITH <<cast-to-ref-identifier, <cast to ref identifier> >>
----

[[cast-to-ref-identifier]]
[subs="specialcharacters,macros"]
----
<cast to ref identifier> ::= <identifier>
----

[[cast-to-type]]
[subs="specialcharacters,macros"]
----
<cast to type> ::=
    CAST <<left-paren, <left paren> >> REF AS SOURCE <<right-paren, <right paren> >> WITH <<cast-to-type-identifier, <cast to type identifier> >>
----

[[cast-to-type-identifier]]
[subs="specialcharacters,macros"]
----
<cast to type identifier> ::= <identifier>
----

[[list-of-attributes]]
[subs="specialcharacters,macros"]
----
<list of attributes> ::=
    <<left-paren, <left paren> >> <<attribute-name, <attribute name> >> [ { <<comma, <comma> >> <<attribute-name, <attribute name> >> }... ] <<right-paren, <right paren> >>
----

[[cast-to-distinct]]
[subs="specialcharacters,macros"]
----
<cast to distinct> ::=
    CAST <<left-paren, <left paren> >> SOURCE AS DISTINCT <<right-paren, <right paren> >>
    WITH <<cast-to-distinct-identifier, <cast to distinct identifier> >>
----

[[cast-to-distinct-identifier]]
[subs="specialcharacters,macros"]
----
<cast to distinct identifier> ::= <identifier>
----

[[cast-to-source]]
[subs="specialcharacters,macros"]
----
<cast to source> ::=
    CAST <<left-paren, <left paren> >> DISTINCT AS SOURCE <<right-paren, <right paren> >>
    WITH <<cast-to-source-identifier, <cast to source identifier> >>
----

[[cast-to-source-identifier]]
[subs="specialcharacters,macros"]
----
<cast to source identifier> ::= <identifier>
----

[[method-specification-list]]
[subs="specialcharacters,macros"]
----
<method specification list> ::=
    <<method-specification, <method specification> >> [ { <<comma, <comma> >> <<method-specification, <method specification> >> }... ]
----

[[method-specification]]
[subs="specialcharacters,macros"]
----
<method specification> ::=
    <<original-method-specification, <original method specification> >>
  | <<overriding-method-specification, <overriding method specification> >>
----

[[original-method-specification]]
[subs="specialcharacters,macros"]
----
<original method specification> ::=
    <<partial-method-specification, <partial method specification> >> [ SELF AS RESULT ] [ SELF AS LOCATOR ]
    [ <<method-characteristics, <method characteristics> >> ]
----

[[overriding-method-specification]]
[subs="specialcharacters,macros"]
----
<overriding method specification> ::= OVERRIDING <partial method specification>
----

[[partial-method-specification]]
[subs="specialcharacters,macros"]
----
<partial method specification> ::=
    [ INSTANCE | STATIC | CONSTRUCTOR ]
    METHOD <<method-name, <method name> >> <<SQL-parameter-declaration-list, <SQL parameter declaration list> >>
    <<returns-clause, <returns clause> >>
    [ SPECIFIC <<specific-method-name, <specific method name> >> ]
----

[[specific-method-name]]
[subs="specialcharacters,macros"]
----
<specific method name> ::= [ <schema name> <period> ]<qualified identifier>
----

[[method-characteristics]]
[subs="specialcharacters,macros"]
----
<method characteristics> ::= <method characteristic>...
----

[[method-characteristic]]
[subs="specialcharacters,macros"]
----
<method characteristic> ::=
    <<language-clause, <language clause> >>
  | <<parameter-style-clause, <parameter style clause> >>
  | <<deterministic-characteristic, <deterministic characteristic> >>
  | <<SQL-data-access-indication, <SQL-data access indication> >>
  | <<null-call-clause, <null-call clause> >>
----

=== 11.42 <attribute definition>

.Function

Define an attribute of a structured type.


Format
[[attribute-definition]]
[subs="specialcharacters,macros"]
----
<attribute definition> ::=
    <<attribute-name, <attribute name> >> <<data-type, <data type> >>
    [ <<attribute-default, <attribute default> >> ]
    [ <<collate-clause, <collate clause> >> ]
----

[[attribute-default]]
[subs="specialcharacters,macros"]
----
<attribute default> ::= <default clause>
----


=== 11.43 <alter type statement>

.Function

Change the definition of a user-defined type.


Format
[[alter-type-statement]]
[subs="specialcharacters,macros"]
----
<alter type statement> ::=
    ALTER TYPE <<schema-resolved-user-defined-type-name, <schema-resolved user-defined type name> >> <<alter-type-action, <alter type action> >>
----

[[alter-type-action]]
[subs="specialcharacters,macros"]
----
<alter type action> ::=
    <<add-attribute-definition, <add attribute definition> >>
  | <<drop-attribute-definition, <drop attribute definition> >>
  | <<add-original-method-specification, <add original method specification> >>
  | <<add-overriding-method-specification, <add overriding method specification> >>
  | <<drop-method-specification, <drop method specification> >>
----


=== 11.44 <add attribute definition>

.Function

Add an attribute to a user-defined type.


Format
[[add-attribute-definition]]
[subs="specialcharacters,macros"]
----
<add attribute definition> ::= ADD ATTRIBUTE <attribute definition>
----


=== 11.45 <drop attribute definition>

.Function

Destroy an attribute of a user-defined type.


Format
[[drop-attribute-definition]]
[subs="specialcharacters,macros"]
----
<drop attribute definition> ::= DROP ATTRIBUTE <attribute name> RESTRICT
----


=== 11.46 <add original method specification>

.Function

Add an original method specification to a user-defined type.


Format
[[add-original-method-specification]]
[subs="specialcharacters,macros"]
----
<add original method specification> ::= ADD <original method specification>
----


=== 11.47 <add overriding method specification>

.Function

Add an overriding method specification to a user-defined type.


Format
[[add-overriding-method-specification]]
[subs="specialcharacters,macros"]
----
<add overriding method specification> ::=
    ADD <<overriding-method-specification, <overriding method specification> >>
----


=== 11.48 <drop method specification>

.Function

Remove a method specification from a user-defined type.


Format
[[drop-method-specification]]
[subs="specialcharacters,macros"]
----
<drop method specification> ::=
    DROP <<specific-method-specification-designator, <specific method specification designator> >> RESTRICT
----

[[specific-method-specification-designator]]
[subs="specialcharacters,macros"]
----
<specific method specification designator> ::=
    [ INSTANCE | STATIC | CONSTRUCTOR ]
    METHOD <<method-name, <method name> >> <<data-type-list, <data type list> >>
----


=== 11.49 <drop data type statement>

.Function

Destroy a user-defined type.


Format
[[drop-data-type-statement]]
[subs="specialcharacters,macros"]
----
<drop data type statement> ::=
    DROP TYPE <<schema-resolved-user-defined-type-name, <schema-resolved user-defined type name> >> <<drop-behavior, <drop behavior> >>
----


=== 11.50 <SQL-invoked routine>

.Function

Define an SQL-invoked routine.


Format
[[SQL-invoked-routine]]
[subs="specialcharacters,macros"]
----
<SQL-invoked routine> ::= <schema routine>
----

[[schema-routine]]
[subs="specialcharacters,macros"]
----
<schema routine> ::=
    <<schema-procedure, <schema procedure> >>
  | <<schema-function, <schema function> >>
----

[[schema-procedure]]
[subs="specialcharacters,macros"]
----
<schema procedure> ::= CREATE <SQL-invoked procedure>
----

[[schema-function]]
[subs="specialcharacters,macros"]
----
<schema function> ::= CREATE <SQL-invoked function>
----

[[SQL-invoked-procedure]]
[subs="specialcharacters,macros"]
----
<SQL-invoked procedure> ::=
    PROCEDURE <<schema-qualified-routine-name, <schema qualified routine name> >> <<SQL-parameter-declaration-list, <SQL parameter declaration list> >>
    <<routine-characteristics, <routine characteristics> >>
    <<routine-body, <routine body> >>
----

[[SQL-invoked-function]]
[subs="specialcharacters,macros"]
----
<SQL-invoked function> ::=
    { <<function-specification, <function specification> >> | <<method-specification-designator, <method specification designator> >> } <<routine-body, <routine body> >>
----

[[SQL-parameter-declaration-list]]
[subs="specialcharacters,macros"]
----
<SQL parameter declaration list> ::=
    <<left-paren, <left paren> >> [ <<SQL-parameter-declaration, <SQL parameter declaration> >>
    [ { <<comma, <comma> >> <<SQL-parameter-declaration, <SQL parameter declaration> >> }... ] ] <<right-paren, <right paren> >>
----

[[SQL-parameter-declaration]]
[subs="specialcharacters,macros"]
----
<SQL parameter declaration> ::=
    [ <<parameter-mode, <parameter mode> >> ] [ <<SQL-parameter-name, <SQL parameter name> >> ] <<parameter-type, <parameter type> >> [ RESULT ]
----

[[parameter-mode]]
[subs="specialcharacters,macros"]
----
<parameter mode> ::=
    IN
  | OUT
  | INOUT
----

[[parameter-type]]
[subs="specialcharacters,macros"]
----
<parameter type> ::= <data type> [ <locator indication> ]
----

[[locator-indication]]
[subs="specialcharacters,macros"]
----
<locator indication> ::= AS LOCATOR
----

[[function-specification]]
[subs="specialcharacters,macros"]
----
<function specification> ::=
    FUNCTION <<schema-qualified-routine-name, <schema qualified routine name> >> <<SQL-parameter-declaration-list, <SQL parameter declaration list> >>
    <<returns-clause, <returns clause> >>
    <<routine-characteristics, <routine characteristics> >>
    [ <<dispatch-clause, <dispatch clause> >> ]
----

[[method-specification-designator]]
[subs="specialcharacters,macros"]
----
<method specification designator> ::=
    SPECIFIC METHOD <<specific-method-name, <specific method name> >>
  | [ INSTANCE | STATIC | CONSTRUCTOR ] METHOD <<method-name, <method name> >> <SQL parameter declaration
list>
    [ <<returns-clause, <returns clause> >> ]
    FOR <<schema-resolved-user-defined-type-name, <schema-resolved user-defined type name> >>
----

[[routine-characteristics]]
[subs="specialcharacters,macros"]
----
<routine characteristics> ::= [ <routine characteristic>... ]
----

[[routine-characteristic]]
[subs="specialcharacters,macros"]
----
<routine characteristic> ::=
    <<language-clause, <language clause> >>
  | <<parameter-style-clause, <parameter style clause> >>
  | SPECIFIC <<specific-name, <specific name> >>
  | <<deterministic-characteristic, <deterministic characteristic> >>
  | <<SQL-data-access-indication, <SQL-data access indication> >>
  | <<null-call-clause, <null-call clause> >>
  | <<dynamic-result-sets-characteristic, <dynamic result sets characteristic> >>
  | <<savepoint-level-indication, <savepoint level indication> >>
----

[[savepoint-level-indication]]
[subs="specialcharacters,macros"]
----
<savepoint level indication> ::=
    NEW SAVEPOINT LEVEL
  | OLD SAVEPOINT LEVEL
----

[[dynamic-result-sets-characteristic]]
[subs="specialcharacters,macros"]
----
<dynamic result sets characteristic> ::=
    DYNAMIC RESULT SETS <<maximum-dynamic-result-sets, <maximum dynamic result sets> >>
----

[[parameter-style-clause]]
[subs="specialcharacters,macros"]
----
<parameter style clause> ::= PARAMETER STYLE <parameter style>
----

[[dispatch-clause]]
[subs="specialcharacters,macros"]
----
<dispatch clause> ::= STATIC DISPATCH
----

[[returns-clause]]
[subs="specialcharacters,macros"]
----
<returns clause> ::= RETURNS <returns type>
----

[[returns-type]]
[subs="specialcharacters,macros"]
----
<returns type> ::=
    <<returns-data-type, <returns data type> >> [ <<result-cast, <result cast> >> ]
  | <<returns-table-type, <returns table type> >>
----

[[returns-table-type]]
[subs="specialcharacters,macros"]
----
<returns table type> ::= TABLE <table function column list>
----

[[table-function-column-list]]
[subs="specialcharacters,macros"]
----
<table function column list> ::=
    <<left-paren, <left paren> >> <<table-function-column-list-element, <table function column list element> >>
    [ { <<comma, <comma> >> <<table-function-column-list-element, <table function column list element> >> }... ] <<right-paren, <right paren> >>
----

[[table-function-column-list-element]]
[subs="specialcharacters,macros"]
----
<table function column list element> ::= <column name> <data type>
----

[[result-cast]]
[subs="specialcharacters,macros"]
----
<result cast> ::= CAST FROM <result cast from type>
----

[[result-cast-from-type]]
[subs="specialcharacters,macros"]
----
<result cast from type> ::= <data type> [ <locator indication> ]
----

[[returns-data-type]]
[subs="specialcharacters,macros"]
----
<returns data type> ::= <data type> [ <locator indication> ]
----

[[routine-body]]
[subs="specialcharacters,macros"]
----
<routine body> ::=
    <<SQL-routine-spec, <SQL routine spec> >>
  | <<external-body-reference, <external body reference> >>
----

[[SQL-routine-spec]]
[subs="specialcharacters,macros"]
----
<SQL routine spec> ::= [ <rights clause> ] <SQL routine body>
----

[[rights-clause]]
[subs="specialcharacters,macros"]
----
<rights clause> ::=
    SQL SECURITY INVOKER
  | SQL SECURITY DEFINER
----

[[SQL-routine-body]]
[subs="specialcharacters,macros"]
----
<SQL routine body> ::= <SQL procedure statement>
----

[[external-body-reference]]
[subs="specialcharacters,macros"]
----
<external body reference> ::=
    EXTERNAL [ NAME <<external-routine-name, <external routine name> >> ]
    [ <<parameter-style-clause, <parameter style clause> >> ]
    [ <<transform-group-specification, <transform group specification> >> ]
     [ <<external-security-clause, <external security clause> >> ]
----

[[external-security-clause]]
[subs="specialcharacters,macros"]
----
<external security clause> ::=
    EXTERNAL SECURITY DEFINER
  | EXTERNAL SECURITY INVOKER
  | EXTERNAL SECURITY IMPLEMENTATION DEFINED
----

[[parameter-style]]
[subs="specialcharacters,macros"]
----
<parameter style> ::=
    SQL
  | GENERAL
----

[[deterministic-characteristic]]
[subs="specialcharacters,macros"]
----
<deterministic characteristic> ::=
    DETERMINISTIC
  | NOT DETERMINISTIC
----

[[SQL-data-access-indication]]
[subs="specialcharacters,macros"]
----
<SQL-data access indication> ::=
    NO SQL
  | CONTAINS SQL
  | READS SQL DATA
  | MODIFIES SQL DATA
----

[[null-call-clause]]
[subs="specialcharacters,macros"]
----
<null-call clause> ::=
    RETURNS NULL ON NULL INPUT
  | CALLED ON NULL INPUT
----

[[maximum-dynamic-result-sets]]
[subs="specialcharacters,macros"]
----
<maximum dynamic result sets> ::= <unsigned integer>
----

[[transform-group-specification]]
[subs="specialcharacters,macros"]
----
<transform group specification> ::=
    TRANSFORM GROUP { <<single-group-specification, <single group specification> >> | <<multiple-group-specification, <multiple group specification> >> }
----

[[single-group-specification]]
[subs="specialcharacters,macros"]
----
<single group specification> ::= <group name>
----

[[multiple-group-specification]]
[subs="specialcharacters,macros"]
----
<multiple group specification> ::=
    <<group-specification, <group specification> >> [ { <<comma, <comma> >> <<group-specification, <group specification> >> }... ]
----

[[group-specification]]
[subs="specialcharacters,macros"]
----
<group specification> ::=
    <<group-name, <group name> >> FOR TYPE <<path-resolved-user-defined-type-name, <path-resolved user-defined type name> >>
----

=== 11.51 <alter routine statement>

.Function

Alter a characteristic of an SQL-invoked routine.


Format
[[alter-routine-statement]]
[subs="specialcharacters,macros"]
----
<alter routine statement> ::=
    ALTER <<specific-routine-designator, <specific routine designator> >>
    <<alter-routine-characteristics, <alter routine characteristics> >> <<alter-routine-behavior, <alter routine behavior> >>
----

[[alter-routine-characteristics]]
[subs="specialcharacters,macros"]
----
<alter routine characteristics> ::= <alter routine characteristic>...
----

[[alter-routine-characteristic]]
[subs="specialcharacters,macros"]
----
<alter routine characteristic> ::=
    <<language-clause, <language clause> >>
  | <<parameter-style-clause, <parameter style clause> >>
  | <<SQL-data-access-indication, <SQL-data access indication> >>
  | <<null-call-clause, <null-call clause> >>
  | <<dynamic-result-sets-characteristic, <dynamic result sets characteristic> >>
  | NAME <<external-routine-name, <external routine name> >>
----

[[alter-routine-behavior]]
[subs="specialcharacters,macros"]
----
<alter routine behavior> ::= RESTRICT
----

=== 11.52 <drop routine statement>

.Function

Destroy an SQL-invoked routine.


Format
[[drop-routine-statement]]
[subs="specialcharacters,macros"]
----
<drop routine statement> ::= DROP <specific routine designator> <drop behavior>
----

=== 11.53 <user-defined cast definition>

.Function

Define a user-defined cast.


Format
[[user-defined-cast-definition]]
[subs="specialcharacters,macros"]
----
<user-defined cast definition> ::=
    CREATE CAST <<left-paren, <left paren> >> <<source-data-type, <source data type> >> AS <<target-data-type, <target data type> >> <<right-paren, <right paren> >>
    WITH <<cast-function, <cast function> >>
    [ AS ASSIGNMENT ]
----

[[cast-function]]
[subs="specialcharacters,macros"]
----
<cast function> ::= <specific routine designator>
----

[[source-data-type]]
[subs="specialcharacters,macros"]
----
<source data type> ::= <data type>
----

[[target-data-type]]
[subs="specialcharacters,macros"]
----
<target data type> ::= <data type>
----

=== 11.54 <drop user-defined cast statement>

.Function

Destroy a user-defined cast.


Format
[[drop-user-defined-cast-statement]]
[subs="specialcharacters,macros"]
----
<drop user-defined cast statement> ::=
    DROP CAST <<left-paren, <left paren> >> <<source-data-type, <source data type> >> AS <<target-data-type, <target data type> >> <<right-paren, <right paren> >>
    <<drop-behavior, <drop behavior> >>
----

=== 11.55 <user-defined ordering definition>

.Function

Define a user-defined ordering for a user-defined type.


Format
[[user-defined-ordering-definition]]
[subs="specialcharacters,macros"]
----
<user-defined ordering definition> ::=
    CREATE ORDERING FOR <<schema-resolved-user-defined-type-name, <schema-resolved user-defined type name> >> <<ordering-form, <ordering form> >>
----

[[ordering-form]]
[subs="specialcharacters,macros"]
----
<ordering form> ::=
    <<equals-ordering-form, <equals ordering form> >>
  | <<full-ordering-form, <full ordering form> >>
----

[[equals-ordering-form]]
[subs="specialcharacters,macros"]
----
<equals ordering form> ::= EQUALS ONLY BY <ordering category>
----

[[full-ordering-form]]
[subs="specialcharacters,macros"]
----
<full ordering form> ::= ORDER FULL BY <ordering category>
----

[[ordering-category]]
[subs="specialcharacters,macros"]
----
<ordering category> ::=
    <<relative-category, <relative category> >>
  | <<map-category, <map category> >>
  | <<state-category, <state category> >>
----

[[relative-category]]
[subs="specialcharacters,macros"]
----
<relative category> ::= RELATIVE WITH <relative function specification>
----

[[map-category]]
[subs="specialcharacters,macros"]
----
<map category> ::= MAP WITH <map function specification>
----

[[state-category]]
[subs="specialcharacters,macros"]
----
<state category> ::= STATE [ <specific name> ]
----

[[relative-function-specification]]
[subs="specialcharacters,macros"]
----
<relative function specification> ::= <specific routine designator>
----

[[map-function-specification]]
[subs="specialcharacters,macros"]
----
<map function specification> ::= <specific routine designator>
----

=== 11.56 <drop user-defined ordering statement>

.Function

Destroy a user-defined ordering method.


Format
[[drop-user-defined-ordering-statement]]
[subs="specialcharacters,macros"]
----
<drop user-defined ordering statement> ::=
    DROP ORDERING FOR <<schema-resolved-user-defined-type-name, <schema-resolved user-defined type name> >> <<drop-behavior, <drop behavior> >>
----

=== 11.57 <transform definition>

.Function

Define one or more transform functions for a user-defined type.


Format
[[transform-definition]]
[subs="specialcharacters,macros"]
----
<transform definition> ::=
    CREATE { TRANSFORM | TRANSFORMS } FOR
    <<schema-resolved-user-defined-type-name, <schema-resolved user-defined type name> >> <<transform-group, <transform group> >>...
----

[[transform-group]]
[subs="specialcharacters,macros"]
----
<transform group> ::=
    <<group-name, <group name> >> <<left-paren, <left paren> >> <<transform-element-list, <transform element list> >> <<right-paren, <right paren> >>
----

[[group-name]]
[subs="specialcharacters,macros"]
----
<group name> ::= <identifier>
----

[[transform-element-list]]
[subs="specialcharacters,macros"]
----
<transform element list> ::= <transform element> [ <comma> <transform element> ]
----

[[transform-element]]
[subs="specialcharacters,macros"]
----
<transform element> ::=
    <<to-sql, <to sql> >>
  | <<from-sql, <from sql> >>
----

[[to-sql]]
[subs="specialcharacters,macros"]
----
<to sql> ::= TO SQL WITH <to sql function>
----

[[from-sql]]
[subs="specialcharacters,macros"]
----
<from sql> ::= FROM SQL WITH <from sql function>
----

[[to-sql-function]]
[subs="specialcharacters,macros"]
----
<to sql function> ::= <specific routine designator>
----

[[from-sql-function]]
[subs="specialcharacters,macros"]
----
<from sql function> ::= <specific routine designator>
----

=== 11.58 <alter transform statement>

.Function

Change the definition of one or more transform groups.


Format
[[alter-transform-statement]]
[subs="specialcharacters,macros"]
----
<alter transform statement> ::=
    ALTER { TRANSFORM | TRANSFORMS }
    FOR <<schema-resolved-user-defined-type-name, <schema-resolved user-defined type name> >> <<alter-group, <alter group> >>...
----

[[alter-group]]
[subs="specialcharacters,macros"]
----
<alter group> ::=
    <<group-name, <group name> >> <<left-paren, <left paren> >> <<alter-transform-action-list, <alter transform action list> >> <<right-paren, <right paren> >>
----

[[alter-transform-action-list]]
[subs="specialcharacters,macros"]
----
<alter transform action list> ::=
    <<alter-transform-action, <alter transform action> >> [ { <<comma, <comma> >> <<alter-transform-action, <alter transform action> >> }... ]
----

[[alter-transform-action]]
[subs="specialcharacters,macros"]
----
<alter transform action> ::=
    <<add-transform-element-list, <add transform element list> >>
  | <<drop-transform-element-list, <drop transform element list> >>
----

=== 11.59 <add transform element list>

.Function

Add a transform element (<to sql> and/or <from sql>) to an existing transform group.


Format
[[add-transform-element-list]]
[subs="specialcharacters,macros"]
----
<add transform element list> ::=
    ADD <<left-paren, <left paren> >> <<transform-element-list, <transform element list> >> <<right-paren, <right paren> >>
----

=== 11.60 <drop transform element list>

.Function

Remove a transform element (<to sql> and/or <from sql>) from a transform group.


Format
[[drop-transform-element-list]]
[subs="specialcharacters,macros"]
----
<drop transform element list> ::=
    DROP <<left-paren, <left paren> >> <<transform-kind, <transform kind> >>
    [ <<comma, <comma> >> <<transform-kind, <transform kind> >> ] <<drop-behavior, <drop behavior> >> <<right-paren, <right paren> >>
----

[[transform-kind]]
[subs="specialcharacters,macros"]
----
<transform kind> ::=
    TO SQL
  | FROM SQL
----

=== 11.61 <drop transform statement>

.Function

Remove one or more transform functions associated with a transform.


Format
[[drop-transform-statement]]
[subs="specialcharacters,macros"]
----
<drop transform statement> ::=
    DROP { TRANSFORM | TRANSFORMS } <<transforms-to-be-dropped, <transforms to be dropped> >>
    FOR <<schema-resolved-user-defined-type-name, <schema-resolved user-defined type name> >> <<drop-behavior, <drop behavior> >>
----

[[transforms-to-be-dropped]]
[subs="specialcharacters,macros"]
----
<transforms to be dropped> ::=
    ALL
  | <<transform-group-element, <transform group element> >>
----

[[transform-group-element]]
[subs="specialcharacters,macros"]
----
<transform group element> ::= <group name>
----


=== 11.62 <sequence generator definition>

.Function

Define an external sequence generator.


Format
[[sequence-generator-definition]]
[subs="specialcharacters,macros"]
----
<sequence generator definition> ::=
    CREATE SEQUENCE <<sequence-generator-name, <sequence generator name> >> [ <<sequence-generator-options, <sequence generator options> >> ]
----

[[sequence-generator-options]]
[subs="specialcharacters,macros"]
----
<sequence generator options> ::= <sequence generator option> ...
----

[[sequence-generator-option]]
[subs="specialcharacters,macros"]
----
<sequence generator option> ::=
    <<sequence-generator-data-type-option, <sequence generator data type option> >>
  | <<common-sequence-generator-options, <common sequence generator options> >>
----

[[common-sequence-generator-options]]
[subs="specialcharacters,macros"]
----
<common sequence generator options> ::= <common sequence generator option> ...
----

[[common-sequence-generator-option]]
[subs="specialcharacters,macros"]
----
<common sequence generator option> ::=
    <<sequence-generator-start-with-option, <sequence generator start with option> >>
  | <<basic-sequence-generator-option, <basic sequence generator option> >>
----

[[basic-sequence-generator-option]]
[subs="specialcharacters,macros"]
----
<basic sequence generator option> ::=
    <<sequence-generator-increment-by-option, <sequence generator increment by option> >>
  | <<sequence-generator-maxvalue-option, <sequence generator maxvalue option> >>
  | <<sequence-generator-minvalue-option, <sequence generator minvalue option> >>
  | <<sequence-generator-cycle-option, <sequence generator cycle option> >>
----

[[sequence-generator-data-type-option]]
[subs="specialcharacters,macros"]
----
<sequence generator data type option> ::= AS <data type>
----

[[sequence-generator-start-with-option]]
[subs="specialcharacters,macros"]
----
<sequence generator start with option> ::= START WITH <sequence generator start value>
----

[[sequence-generator-start-value]]
[subs="specialcharacters,macros"]
----
<sequence generator start value> ::= <signed numeric literal>
----

[[sequence-generator-increment-by-option]]
[subs="specialcharacters,macros"]
----
<sequence generator increment by option> ::= INCREMENT BY <sequence generator increment>
----

[[sequence-generator-increment]]
[subs="specialcharacters,macros"]
----
<sequence generator increment> ::= <signed numeric literal>
----

[[sequence-generator-maxvalue-option]]
[subs="specialcharacters,macros"]
----
<sequence generator maxvalue option> ::=
    MAXVALUE <<sequence-generator-max-value, <sequence generator max value> >>
  | NO MAXVALUE
----

[[sequence-generator-max-value]]
[subs="specialcharacters,macros"]
----
<sequence generator max value> ::= <signed numeric literal>
----

[[sequence-generator-minvalue-option]]
[subs="specialcharacters,macros"]
----
<sequence generator minvalue option> ::=
    MINVALUE <<sequence-generator-min-value, <sequence generator min value> >>
  | NO MINVALUE
----

[[sequence-generator-min-value]]
[subs="specialcharacters,macros"]
----
<sequence generator min value> ::= <signed numeric literal>
----

[[sequence-generator-cycle-option]]
[subs="specialcharacters,macros"]
----
<sequence generator cycle option> ::=
    CYCLE
  | NO CYCLE
----


=== 11.63 <alter sequence generator statement>

.Function

Change the definition of an external sequence generator.


Format
[[alter-sequence-generator-statement]]
[subs="specialcharacters,macros"]
----
<alter sequence generator statement> ::=
    ALTER SEQUENCE <<sequence-generator-name, <sequence generator name> >> <<alter-sequence-generator-options, <alter sequence generator options> >>
----

[[alter-sequence-generator-options]]
[subs="specialcharacters,macros"]
----
<alter sequence generator options> ::= <alter sequence generator option>...
----

[[alter-sequence-generator-option]]
[subs="specialcharacters,macros"]
----
<alter sequence generator option> ::=
    <<alter-sequence-generator-restart-option, <alter sequence generator restart option> >>
  | <<basic-sequence-generator-option, <basic sequence generator option> >>
----

[[alter-sequence-generator-restart-option]]
[subs="specialcharacters,macros"]
----
<alter sequence generator restart option> ::=
    RESTART WITH <<sequence-generator-restart-value, <sequence generator restart value> >>
----

[[sequence-generator-restart-value]]
[subs="specialcharacters,macros"]
----
<sequence generator restart value> ::= <signed numeric literal>
----


=== 11.64 <drop sequence generator statement>

.Function

Destroy an external sequence generator.


Format
[[drop-sequence-generator-statement]]
[subs="specialcharacters,macros"]
----
<drop sequence generator statement> ::=
    DROP SEQUENCE <<sequence-generator-name, <sequence generator name> >> <<drop-behavior, <drop behavior> >>
----


== 12 Access control


=== 12.1 <grant statement>

.Function

Define privileges and role authorizations.


Format
[[grant-statement]]
[subs="specialcharacters,macros"]
----
<grant statement> ::=
    <<grant-privilege-statement, <grant privilege statement> >>
  | <<grant-role-statement, <grant role statement> >>
----

=== 12.2 <grant privilege statement>

.Function

Define privileges.


Format
[[grant-privilege-statement]]
[subs="specialcharacters,macros"]
----
<grant privilege statement> ::=
    GRANT <<privileges, <privileges> >> TO <<grantee, <grantee> >> [ { <<comma, <comma> >> <<grantee, <grantee> >> }... ]
    [ WITH HIERARCHY OPTION ]
    [ WITH GRANT OPTION ]
    [ GRANTED BY <<grantor, <grantor> >> ]
----


=== 12.3 <privileges>

.Function

Specify privileges.


Format
[[privileges]]
[subs="specialcharacters,macros"]
----
<privileges> ::= <object privileges> ON <object name>
----

[[object-name]]
[subs="specialcharacters,macros"]
----
<object name> ::=
    [ TABLE ] <<table-name, <table name> >>
  | DOMAIN <<domain-name, <domain name> >>
  | COLLATION <<collation-name, <collation name> >>
  | CHARACTER SET <<character-set-name, <character set name> >>
  | TRANSLATION <<transliteration-name, <transliteration name> >>
  | TYPE <<schema-resolved-user-defined-type-name, <schema-resolved user-defined type name> >>
  | SEQUENCE <<sequence-generator-name, <sequence generator name> >>
  | <<specific-routine-designator, <specific routine designator> >>
----

[[object-privileges]]
[subs="specialcharacters,macros"]
----
<object privileges> ::=
    ALL PRIVILEGES
  | <<action, <action> >> [ { <<comma, <comma> >> <<action, <action> >> }... ]
----

[[action]]
[subs="specialcharacters,macros"]
----
<action> ::=
    SELECT
  | SELECT <<left-paren, <left paren> >> <<privilege-column-list, <privilege column list> >> <<right-paren, <right paren> >>
  | SELECT <<left-paren, <left paren> >> <<privilege-method-list, <privilege method list> >> <<right-paren, <right paren> >>
  | DELETE
  | INSERT [ <<left-paren, <left paren> >> <<privilege-column-list, <privilege column list> >> <<right-paren, <right paren> >> ]
  | UPDATE [ <<left-paren, <left paren> >> <<privilege-column-list, <privilege column list> >> <<right-paren, <right paren> >> ]
  | REFERENCES [ <<left-paren, <left paren> >> <<privilege-column-list, <privilege column list> >> <<right-paren, <right paren> >> ]
  | USAGE
  | TRIGGER
  | UNDER
  | EXECUTE
----

[[privilege-method-list]]
[subs="specialcharacters,macros"]
----
<privilege method list> ::=
    <<specific-routine-designator, <specific routine designator> >> [ { <<comma, <comma> >> <<specific-routine-designator, <specific routine designator> >> }... ]
----

[[privilege-column-list]]
[subs="specialcharacters,macros"]
----
<privilege column list> ::= <column name list>
----

[[grantee]]
[subs="specialcharacters,macros"]
----
<grantee> ::=
    PUBLIC
  | <<authorization-identifier, <authorization identifier> >>
----

[[grantor]]
[subs="specialcharacters,macros"]
----
<grantor> ::=
    CURRENT_USER
  | CURRENT_ROLE
----

=== 12.4 <role definition>

.Function

Define a role.


Format
[[role-definition]]
[subs="specialcharacters,macros"]
----
<role definition> ::= CREATE ROLE <role name> [ WITH ADMIN <grantor> ]
----

=== 12.5 <grant role statement>

.Function

Define role authorizations.


Format
[[grant-role-statement]]
[subs="specialcharacters,macros"]
----
<grant role statement> ::=
    GRANT <<role-granted, <role granted> >> [ { <<comma, <comma> >> <<role-granted, <role granted> >> }... ]
    TO <<grantee, <grantee> >> [ { <<comma, <comma> >> <<grantee, <grantee> >> }... ]
    [ WITH ADMIN OPTION ]
    [ GRANTED BY <<grantor, <grantor> >> ]
----

[[role-granted]]
[subs="specialcharacters,macros"]
----
<role granted> ::= <role name>
----


=== 12.6 <drop role statement>

.Function

Destroy a role.


Format
[[drop-role-statement]]
[subs="specialcharacters,macros"]
----
<drop role statement> ::= DROP ROLE <role name>
----

=== 12.7 <revoke statement>

.Function

Destroy privileges and role authorizations.


Format
[[revoke-statement]]
[subs="specialcharacters,macros"]
----
<revoke statement> ::=
    <<revoke-privilege-statement, <revoke privilege statement> >>
  | <<revoke-role-statement, <revoke role statement> >>
----

[[revoke-privilege-statement]]
[subs="specialcharacters,macros"]
----
<revoke privilege statement> ::=
    REVOKE [ <<revoke-option-extension, <revoke option extension> >> ] <<privileges, <privileges> >>
    FROM <<grantee, <grantee> >> [ { <<comma, <comma> >> <<grantee, <grantee> >> }... ]
    [ GRANTED BY <<grantor, <grantor> >> ]
    <<drop-behavior, <drop behavior> >>
----

[[revoke-option-extension]]
[subs="specialcharacters,macros"]
----
<revoke option extension> ::=
    GRANT OPTION FOR
  | HIERARCHY OPTION FOR
----

[[revoke-role-statement]]
[subs="specialcharacters,macros"]
----
<revoke role statement> ::=
    REVOKE [ ADMIN OPTION FOR ] <<role-revoked, <role revoked> >> [ { <<comma, <comma> >> <<role-revoked, <role revoked> >> }... ]
    FROM <<grantee, <grantee> >> [ { <<comma, <comma> >> <<grantee, <grantee> >> }... ]
    [ GRANTED BY <<grantor, <grantor> >> ]
    <<drop-behavior, <drop behavior> >>
----

[[role-revoked]]
[subs="specialcharacters,macros"]
----
<role revoked> ::= <role name>
----


== 13 SQL-client modules


=== 13.1 <SQL-client module definition>

.Function

Define an SQL-client module.


Format
[[SQL-client-module-definition]]
[subs="specialcharacters,macros"]
----
<SQL-client module definition> ::=
    <<module-name-clause, <module name clause> >> <<language-clause, <language clause> >> <<module-authorization-clause, <module authorization clause> >>
    [ <<module-path-specification, <module path specification> >> ]
    [ <<module-transform-group-specification, <module transform group specification> >> ]
    [ <<module-collations, <module collations> >> ]
    [ <<temporary-table-declaration, <temporary table declaration> >>... ]
    <<module-contents, <module contents> >>...
----

[[module-authorization-clause]]
[subs="specialcharacters,macros"]
----
<module authorization clause> ::=
    SCHEMA <<schema-name, <schema name> >>
  | AUTHORIZATION <<module-authorization-identifier, <module authorization identifier> >>
    [ FOR STATIC { ONLY | AND DYNAMIC } ]
  | SCHEMA <<schema-name, <schema name> >> AUTHORIZATION <<module-authorization-identifier, <module authorization identifier> >>
    [ FOR STATIC { ONLY | AND DYNAMIC } ]
----

[[module-authorization-identifier]]
[subs="specialcharacters,macros"]
----
<module authorization identifier> ::= <authorization identifier>
----

[[module-path-specification]]
[subs="specialcharacters,macros"]
----
<module path specification> ::= <path specification>
----

[[module-transform-group-specification]]
[subs="specialcharacters,macros"]
----
<module transform group specification> ::= <transform group specification>
----

[[module-collations]]
[subs="specialcharacters,macros"]
----
<module collations> ::= <module collation specification>...
----

[[module-collation-specification]]
[subs="specialcharacters,macros"]
----
<module collation specification> ::=
    COLLATION <<collation-name, <collation name> >> [ FOR <<character-set-specification-list, <character set specification list> >> ]
----

[[character-set-specification-list]]
[subs="specialcharacters,macros"]
----
<character set specification list> ::=
    <<character-set-specification, <character set specification> >> [ { <<comma, <comma> >> <<character-set-specification, <character set specification> >> }... ]
----

[[module-contents]]
[subs="specialcharacters,macros"]
----
<module contents> ::=
    <<declare-cursor, <declare cursor> >>
  | <<dynamic-declare-cursor, <dynamic declare cursor> >>
  | <<externally-invoked-procedure, <externally-invoked procedure> >>
----


=== 13.2 <module name clause>

.Function

Name an SQL-client module.


Format
[[module-name-clause]]
[subs="specialcharacters,macros"]
----
<module name clause> ::=
    MODULE [ <<SQL-client-module-name, <SQL-client module name> >> ] [ <<module-character-set-specification, <module character set specification> >> ]
----

[[module-character-set-specification]]
[subs="specialcharacters,macros"]
----
<module character set specification> ::= NAMES ARE <character set specification>
----


=== 13.3 <externally-invoked procedure>

.Function

Define an externally-invoked procedure.


Format
[[externally-invoked-procedure]]
[subs="specialcharacters,macros"]
----
<externally-invoked procedure> ::=
    PROCEDURE <<procedure-name, <procedure name> >> <<host-parameter-declaration-list, <host parameter declaration list> >> <<semicolon, <semicolon> >>
    <<SQL-procedure-statement, <SQL procedure statement> >> <<semicolon, <semicolon> >>
----

[[host-parameter-declaration-list]]
[subs="specialcharacters,macros"]
----
<host parameter declaration list> ::=
    <<left-paren, <left paren> >> <<host-parameter-declaration, <host parameter declaration> >>
    [ { <<comma, <comma> >> <<host-parameter-declaration, <host parameter declaration> >> }... ] <<right-paren, <right paren> >>
----

[[host-parameter-declaration]]
[subs="specialcharacters,macros"]
----
<host parameter declaration> ::=
    <<host-parameter-name, <host parameter name> >> <<host-parameter-data-type, <host parameter data type> >>
  | <<status-parameter, <status parameter> >>
----

[[host-parameter-data-type]]
[subs="specialcharacters,macros"]
----
<host parameter data type> ::= <data type> [ <locator indication> ]
----

[[status-parameter]]
[subs="specialcharacters,macros"]
----
<status parameter> ::= SQLSTATE
----

=== 13.5 <SQL procedure statement>

.Function

Define all of the SQL-statements that are <SQL procedure statement>s.


Format
[[SQL-procedure-statement]]
[subs="specialcharacters,macros"]
----
<SQL procedure statement> ::= <SQL executable statement>
----

[[SQL-executable-statement]]
[subs="specialcharacters,macros"]
----
<SQL executable statement> ::=
    <<SQL-schema-statement, <SQL schema statement> >>
  | <<SQL-data-statement, <SQL data statement> >>
  | <<SQL-control-statement, <SQL control statement> >>
  | <<SQL-transaction-statement, <SQL transaction statement> >>
  | <<SQL-connection-statement, <SQL connection statement> >>
  | <<SQL-session-statement, <SQL session statement> >>
  | <<SQL-diagnostics-statement, <SQL diagnostics statement> >>
  | <<SQL-dynamic-statement, <SQL dynamic statement> >>
----

[[SQL-schema-statement]]
[subs="specialcharacters,macros"]
----
<SQL schema statement> ::=
    <<SQL-schema-definition-statement, <SQL schema definition statement> >>
  | <<SQL-schema-manipulation-statement, <SQL schema manipulation statement> >>
----

[[SQL-schema-definition-statement]]
[subs="specialcharacters,macros"]
----
<SQL schema definition statement> ::=
    <<schema-definition, <schema definition> >>
  | <<table-definition, <table definition> >>
  | <<view-definition, <view definition> >>
  | <<SQL-invoked-routine, <SQL-invoked routine> >>
  | <<grant-statement, <grant statement> >>
  | <<role-definition, <role definition> >>
  | <<domain-definition, <domain definition> >>
  | <<character-set-definition, <character set definition> >>
  | <<collation-definition, <collation definition> >>
  | <<transliteration-definition, <transliteration definition> >>
  | <<assertion-definition, <assertion definition> >>
  | <<trigger-definition, <trigger definition> >>
  | <<user-defined-type-definition, <user-defined type definition> >>
  | <<user-defined-cast-definition, <user-defined cast definition> >>
  | <<user-defined-ordering-definition, <user-defined ordering definition> >>
  | <<transform-definition, <transform definition> >>
  | <<sequence-generator-definition, <sequence generator definition> >>
----

[[SQL-schema-manipulation-statement]]
[subs="specialcharacters,macros"]
----
<SQL schema manipulation statement> ::=
    <<drop-schema-statement, <drop schema statement> >>
  | <<alter-table-statement, <alter table statement> >>
  | <<drop-table-statement, <drop table statement> >>
  | <<drop-view-statement, <drop view statement> >>
  | <<alter-routine-statement, <alter routine statement> >>
  | <<drop-routine-statement, <drop routine statement> >>
  | <<drop-user-defined-cast-statement, <drop user-defined cast statement> >>
  | <<revoke-statement, <revoke statement> >>
  | <<drop-role-statement, <drop role statement> >>
  |   <<alter-domain-statement, <alter domain statement> >>
  |   <<drop-domain-statement, <drop domain statement> >>
  |   <<drop-character-set-statement, <drop character set statement> >>
  |   <<drop-collation-statement, <drop collation statement> >>
  |   <<drop-transliteration-statement, <drop transliteration statement> >>
  |   <<drop-assertion-statement, <drop assertion statement> >>
  |   <<drop-trigger-statement, <drop trigger statement> >>
  |   <<alter-type-statement, <alter type statement> >>
  |   <<drop-data-type-statement, <drop data type statement> >>
  |   <<drop-user-defined-ordering-statement, <drop user-defined ordering statement> >>
  |   <<alter-transform-statement, <alter transform statement> >>
  |   <<drop-transform-statement, <drop transform statement> >>
  |   <<alter-sequence-generator-statement, <alter sequence generator statement> >>
  |   <<drop-sequence-generator-statement, <drop sequence generator statement> >>
----

[[SQL-data-statement]]
[subs="specialcharacters,macros"]
----
<SQL data statement> ::=
    <<open-statement, <open statement> >>
  | <<fetch-statement, <fetch statement> >>
  | <<close-statement, <close statement> >>
  | <<select-statement:-single-row, <select statement: single row> >>
  | <<free-locator-statement, <free locator statement> >>
  | <<hold-locator-statement, <hold locator statement> >>
  | <<SQL-data-change-statement, <SQL data change statement> >>
----

[[SQL-data-change-statement]]
[subs="specialcharacters,macros"]
----
<SQL data change statement> ::=
    <<delete-statement:-positioned, <delete statement: positioned> >>
  | <<delete-statement:-searched, <delete statement: searched> >>
  | <<insert-statement, <insert statement> >>
  | <<update-statement:-positioned, <update statement: positioned> >>
  | <<update-statement:-searched, <update statement: searched> >>
  | <<merge-statement, <merge statement> >>
----

[[SQL-control-statement]]
[subs="specialcharacters,macros"]
----
<SQL control statement> ::=
    <<call-statement, <call statement> >>
  | <<return-statement, <return statement> >>
----

[[SQL-transaction-statement]]
[subs="specialcharacters,macros"]
----
<SQL transaction statement> ::=
    <<start-transaction-statement, <start transaction statement> >>
  | <<set-transaction-statement, <set transaction statement> >>
  | <<set-constraints-mode-statement, <set constraints mode statement> >>
  | <<savepoint-statement, <savepoint statement> >>
  | <<release-savepoint-statement, <release savepoint statement> >>
  | <<commit-statement, <commit statement> >>
  | <<rollback-statement, <rollback statement> >>
----

[[SQL-connection-statement]]
[subs="specialcharacters,macros"]
----
<SQL connection statement> ::=
    <<connect-statement, <connect statement> >>
  | <<set-connection-statement, <set connection statement> >>
  | <<disconnect-statement, <disconnect statement> >>
----

[[SQL-session-statement]]
[subs="specialcharacters,macros"]
----
<SQL session statement> ::=
    <<set-session-user-identifier-statement, <set session user identifier statement> >>
  | <<set-role-statement, <set role statement> >>
  | <<set-local-time-zone-statement, <set local time zone statement> >>
  | <<set-session-characteristics-statement, <set session characteristics statement> >>
  | <<set-catalog-statement, <set catalog statement> >>
  | <<set-schema-statement, <set schema statement> >>
  |   <<set----names-statement, <set    names statement> >>
  |   <<set----path-statement, <set    path statement> >>
  |   <<set----transform-group-statement, <set    transform group statement> >>
  |   <<set----session-collation-statement, <set    session collation statement> >>
----

[[SQL-diagnostics-statement]]
[subs="specialcharacters,macros"]
----
<SQL diagnostics statement> ::= <get diagnostics statement>
----

[[SQL-dynamic-statement]]
[subs="specialcharacters,macros"]
----
<SQL dynamic statement> ::=
    <<SQL-descriptor-statement, <SQL descriptor statement> >>
  | <<prepare-statement, <prepare statement> >>
  | <<deallocate-prepared-statement, <deallocate prepared statement> >>
  | <<describe-statement, <describe statement> >>
  | <<execute-statement, <execute statement> >>
  | <<execute-immediate-statement, <execute immediate statement> >>
  | <<SQL-dynamic-data-statement, <SQL dynamic data statement> >>
----

[[SQL-dynamic-data-statement]]
[subs="specialcharacters,macros"]
----
<SQL dynamic data statement> ::=
    <<allocate-cursor-statement, <allocate cursor statement> >>
  | <<dynamic-open-statement, <dynamic open statement> >>
  | <<dynamic-fetch-statement, <dynamic fetch statement> >>
  | <<dynamic-close-statement, <dynamic close statement> >>
  | <<dynamic-delete-statement:-positioned, <dynamic delete statement: positioned> >>
  | <<dynamic-update-statement:-positioned, <dynamic update statement: positioned> >>
----

[[SQL-descriptor-statement]]
[subs="specialcharacters,macros"]
----
<SQL descriptor statement> ::=
    <<allocate-descriptor-statement, <allocate descriptor statement> >>
  | <<deallocate-descriptor-statement, <deallocate descriptor statement> >>
  | <<set-descriptor-statement, <set descriptor statement> >>
  | <<get-descriptor-statement, <get descriptor statement> >>
----

== 14 Data manipulation


=== 14.1 <declare cursor>

.Function

Define a cursor.


Format
[[declare-cursor]]
[subs="specialcharacters,macros"]
----
<declare cursor> ::=
    DECLARE <<cursor-name, <cursor name> >> [ <<cursor-sensitivity, <cursor sensitivity> >> ] [ <<cursor-scrollability, <cursor scrollability> >> ] CURSOR
    [ <<cursor-holdability, <cursor holdability> >> ]
    [ <<cursor-returnability, <cursor returnability> >> ]
    FOR <<cursor-specification, <cursor specification> >>
----

[[cursor-sensitivity]]
[subs="specialcharacters,macros"]
----
<cursor sensitivity> ::=
    SENSITIVE
  | INSENSITIVE
  | ASENSITIVE
----

[[cursor-scrollability]]
[subs="specialcharacters,macros"]
----
<cursor scrollability> ::=
    SCROLL
  | NO SCROLL
----

[[cursor-holdability]]
[subs="specialcharacters,macros"]
----
<cursor holdability> ::=
    WITH HOLD
  | WITHOUT HOLD
----

[[cursor-returnability]]
[subs="specialcharacters,macros"]
----
<cursor returnability> ::=
    WITH RETURN
  | WITHOUT RETURN
----

[[cursor-specification]]
[subs="specialcharacters,macros"]
----
<cursor specification> ::=
    <<query-expression, <query expression> >> [ <<order-by-clause, <order by clause> >> ] [ <<updatability-clause, <updatability clause> >> ]
----

[[updatability-clause]]
[subs="specialcharacters,macros"]
----
<updatability clause> ::=
    FOR { READ ONLY | UPDATE [ OF <<column-name-list, <column name list> >> ] }
----

[[order-by-clause]]
[subs="specialcharacters,macros"]
----
<order by clause> ::= ORDER BY <sort specification list>
----

=== 14.2 <open statement>

.Function

Open a cursor.


Format
[[open-statement]]
[subs="specialcharacters,macros"]
----
<open statement> ::= OPEN <cursor name>
----

=== 14.3 <fetch statement>

.Function

Position a cursor on a specified row of a table and retrieve values from that row.


Format
[[fetch-statement]]
[subs="specialcharacters,macros"]
----
<fetch statement> ::=
    FETCH [ [ <<fetch-orientation, <fetch orientation> >> ] FROM ] <<cursor-name, <cursor name> >> INTO <<fetch-target-list, <fetch target list> >>
----

[[fetch-orientation]]
[subs="specialcharacters,macros"]
----
<fetch orientation> ::=
    NEXT
  | PRIOR
  | FIRST
  | LAST
  | { ABSOLUTE | RELATIVE } <<simple-value-specification, <simple value specification> >>
----

[[fetch-target-list]]
[subs="specialcharacters,macros"]
----
<fetch target list> ::=
    <<target-specification, <target specification> >> [ { <<comma, <comma> >> <<target-specification, <target specification> >> }... ]
----


=== 14.4 <close statement>

.Function

Close a cursor.


Format
[[close-statement]]
[subs="specialcharacters,macros"]
----
<close statement> ::= CLOSE <cursor name>
----


=== 14.5 <select statement: single row>

.Function

Retrieve values from a specified row of a table.


Format
[[select-statement:-single-row]]
[subs="specialcharacters,macros"]
----
<select statement: single row> ::=
    SELECT [ <<set-quantifier, <set quantifier> >> ] <<select-list, <select list> >>
    INTO <<select-target-list, <select target list> >>
    <<table-expression, <table expression> >>
----

[[select-target-list]]
[subs="specialcharacters,macros"]
----
<select target list> ::=
    <<target-specification, <target specification> >> [ { <<comma, <comma> >> <<target-specification, <target specification> >> }... ]
----


=== 14.6 <delete statement: positioned>

.Function

Delete a row of a table.


Format
[[delete-statement:-positioned]]
[subs="specialcharacters,macros"]
----
<delete statement: positioned> ::=
    DELETE FROM <<target-table, <target table> >> [ [ AS ] <<correlation-name, <correlation name> >> ]
    WHERE CURRENT OF <<cursor-name, <cursor name> >>
----

[[target-table]]
[subs="specialcharacters,macros"]
----
<target table> ::=
    <<table-name, <table name> >>
  | ONLY <<left-paren, <left paren> >> <<table-name, <table name> >> <<right-paren, <right paren> >>
----


=== 14.7 <delete statement: searched>

.Function

Delete rows of a table.


Format
[[delete-statement:-searched]]
[subs="specialcharacters,macros"]
----
<delete statement: searched> ::=
    DELETE FROM <<target-table, <target table> >> [ [ AS ] <<correlation-name, <correlation name> >> ]
    [ WHERE <<search-condition, <search condition> >> ]
----


=== 14.8 <insert statement>

.Function

Create new rows in a table.


Format
[[insert-statement]]
[subs="specialcharacters,macros"]
----
<insert statement> ::=
    INSERT INTO <<insertion-target, <insertion target> >> <<insert-columns-and-source, <insert columns and source> >>
----

[[insertion-target]]
[subs="specialcharacters,macros"]
----
<insertion target> ::= <table name>
----

[[insert-columns-and-source]]
[subs="specialcharacters,macros"]
----
<insert columns and source> ::=
    <<from-subquery, <from subquery> >>
  | <<from-constructor, <from constructor> >>
  | <<from-default, <from default> >>
----

[[from-subquery]]
[subs="specialcharacters,macros"]
----
<from subquery> ::=
    [ <<left-paren, <left paren> >> <<insert-column-list, <insert column list> >> <<right-paren, <right paren> >> ]
    [ <<override-clause, <override clause> >> ]
    <<query-expression, <query expression> >>
----

[[from-constructor]]
[subs="specialcharacters,macros"]
----
<from constructor> ::=
    [ <<left-paren, <left paren> >> <<insert-column-list, <insert column list> >> <<right-paren, <right paren> >> ]
    [ <<override-clause, <override clause> >> ]
    <<contextually-typed-table-value-constructor, <contextually typed table value constructor> >>
----

[[override-clause]]
[subs="specialcharacters,macros"]
----
<override clause> ::=
    OVERRIDING USER VALUE
  | OVERRIDING SYSTEM VALUE
----

[[from-default]]
[subs="specialcharacters,macros"]
----
<from default> ::= DEFAULT VALUES
----

[[insert-column-list]]
[subs="specialcharacters,macros"]
----
<insert column list> ::= <column name list>
----


=== 14.9 <merge statement>

.Function

Conditionally update rows of a table, or insert new rows into a table, or both.


Format
[[merge-statement]]
[subs="specialcharacters,macros"]
----
<merge statement> ::=
    MERGE INTO <<target-table, <target table> >> [ [ AS ] <<merge-correlation-name, <merge correlation name> >> ]
    USING <<table-reference, <table reference> >>
    ON <<search-condition, <search condition> >> <<merge-operation-specification, <merge operation specification> >>
----

[[merge-correlation-name]]
[subs="specialcharacters,macros"]
----
<merge correlation name> ::= <correlation name>
----

[[merge-operation-specification]]
[subs="specialcharacters,macros"]
----
<merge operation specification> ::= <merge when clause>...
----

[[merge-when-clause]]
[subs="specialcharacters,macros"]
----
<merge when clause> ::=
    <<merge-when-matched-clause, <merge when matched clause> >>
  | <<merge-when-not-matched-clause, <merge when not matched clause> >>
----

[[merge-when-matched-clause]]
[subs="specialcharacters,macros"]
----
<merge when matched clause> ::=
    WHEN MATCHED THEN <<merge-update-specification, <merge update specification> >>
----

[[merge-when-not-matched-clause]]
[subs="specialcharacters,macros"]
----
<merge when not matched clause> ::=
    WHEN NOT MATCHED THEN <<merge-insert-specification, <merge insert specification> >>
----

[[merge-update-specification]]
[subs="specialcharacters,macros"]
----
<merge update specification> ::= UPDATE SET <set clause list>
----

[[merge-insert-specification]]
[subs="specialcharacters,macros"]
----
<merge insert specification> ::=
    INSERT [ <<left-paren, <left paren> >> <<insert-column-list, <insert column list> >> <<right-paren, <right paren> >> ]
    [ <<override-clause, <override clause> >> ]
    VALUES <<merge-insert-value-list, <merge insert value list> >>
----

[[merge-insert-value-list]]
[subs="specialcharacters,macros"]
----
<merge insert value list> ::=
    <<left-paren, <left paren> >>
    <<merge-insert-value-element, <merge insert value element> >> [ { <<comma, <comma> >> <<merge-insert-value-element, <merge insert value element> >> }... ]
    <<right-paren, <right paren> >>
----

[[merge-insert-value-element]]
[subs="specialcharacters,macros"]
----
<merge insert value element> ::=
    <<value-expression, <value expression> >>
  | <<contextually-typed-value-specification, <contextually typed value specification> >>
----

=== 14.10 <update statement: positioned>

.Function

Update a row of a table.


Format
[[update-statement:-positioned]]
[subs="specialcharacters,macros"]
----
<update statement: positioned> ::=
    UPDATE <<target-table, <target table> >> [ [ AS ] <<correlation-name, <correlation name> >> ]
    SET <<set-clause-list, <set clause list> >>
    WHERE CURRENT OF <<cursor-name, <cursor name> >>
----


=== 14.11 <update statement: searched>

.Function

Update rows of a table.


Format
[[update-statement:-searched]]
[subs="specialcharacters,macros"]
----
<update statement: searched> ::=
    UPDATE <<target-table, <target table> >> [ [ AS ] <<correlation-name, <correlation name> >> ]
    SET <<set-clause-list, <set clause list> >>
    [ WHERE <<search-condition, <search condition> >> ]
----


=== 14.12 <set clause list>

.Function

Specify a list of updates.


Format
[[set-clause-list]]
[subs="specialcharacters,macros"]
----
<set clause list> ::= <set clause> [ { <comma> <set clause> }... ]
----

[[set-clause]]
[subs="specialcharacters,macros"]
----
<set clause> ::=
    <<multiple-column-assignment, <multiple column assignment> >>
  | <<set-target, <set target> >> <<equals-operator, <equals operator> >> <<update-source, <update source> >>
----

[[set-target]]
[subs="specialcharacters,macros"]
----
<set target> ::=
    <<update-target, <update target> >>
  | <<mutated-set-clause, <mutated set clause> >>
----

[[multiple-column-assignment]]
[subs="specialcharacters,macros"]
----
<multiple column assignment> ::=
    <<set-target-list, <set target list> >> <<equals-operator, <equals operator> >> <<assigned-row, <assigned row> >>
----

[[set-target-list]]
[subs="specialcharacters,macros"]
----
<set target list> ::=
    <<left-paren, <left paren> >> <<set-target, <set target> >> [ { <<comma, <comma> >> <<set-target, <set target> >> }... ] <<right-paren, <right paren> >>
----

[[assigned-row]]
[subs="specialcharacters,macros"]
----
<assigned row> ::= <contextually typed row value expression>
----

[[update-target]]
[subs="specialcharacters,macros"]
----
<update target> ::=
    <<object-column, <object column> >>
  | <<object-column, <object column> >>
    <<left-bracket-or-trigraph, <left bracket or trigraph> >> <<simple-value-specification, <simple value specification> >> <<right-bracket-or-trigraph, <right bracket or trigraph> >>
----

[[object-column]]
[subs="specialcharacters,macros"]
----
<object column> ::= <column name>
----

[[mutated-set-clause]]
[subs="specialcharacters,macros"]
----
<mutated set clause> ::= <mutated target> <period> <method name>
----

[[mutated-target]]
[subs="specialcharacters,macros"]
----
<mutated target> ::=
    <<object-column, <object column> >>
  | <<mutated-set-clause, <mutated set clause> >>
----

[[update-source]]
[subs="specialcharacters,macros"]
----
<update source> ::=
    <<value-expression, <value expression> >>
  | <<contextually-typed-value-specification, <contextually typed value specification> >>
----


=== 14.13 <temporary table declaration>

.Function

Declare a declared local temporary table.


Format
[[temporary-table-declaration]]
[subs="specialcharacters,macros"]
----
<temporary table declaration> ::=
    DECLARE LOCAL TEMPORARY TABLE <<table-name, <table name> >> <<table-element-list, <table element list> >>
    [ ON COMMIT <<table-commit-action, <table commit action> >> ROWS ]
----


=== 14.14 <free locator statement>

.Function

Remove the association between a locator variable and the value that is represented by that locator.


Format
[[free-locator-statement]]
[subs="specialcharacters,macros"]
----
<free locator statement> ::=
    FREE LOCATOR <<locator-reference, <locator reference> >> [ { <<comma, <comma> >> <<locator-reference, <locator reference> >> }... ]
----

[[locator-reference]]
[subs="specialcharacters,macros"]
----
<locator reference> ::=
    <<host-parameter-name, <host parameter name> >>
  | <<embedded-variable-name, <embedded variable name> >>
  | <<dynamic-parameter-specification, <dynamic parameter specification> >>
----

=== 14.15 <hold locator statement>

.Function

Mark a locator variable as being holdable.


Format
[[hold-locator-statement]]
[subs="specialcharacters,macros"]
----
<hold locator statement> ::=
    HOLD LOCATOR <<locator-reference, <locator reference> >> [ { <<comma, <comma> >> <<locator-reference, <locator reference> >> }... ]
----


== 15 Control statements


=== 15.1 <call statement>

.Function

Invoke an SQL-invoked routine.


Format
[[call-statement]]
[subs="specialcharacters,macros"]
----
<call statement> ::= CALL <routine invocation>
----

=== 15.2 <return statement>

.Function

Return a value from an SQL function.


Format
[[return-statement]]
[subs="specialcharacters,macros"]
----
<return statement> ::= RETURN <return value>
----

[[return-value]]
[subs="specialcharacters,macros"]
----
<return value> ::=
    <<value-expression, <value expression> >>
  | NULL
----


== 16 Transaction management


=== 16.1 <start transaction statement>

.Function

Start an SQL-transaction and set its characteristics.


Format
[[start-transaction-statement]]
[subs="specialcharacters,macros"]
----
<start transaction statement> ::=
    START TRANSACTION
    [ <<transaction-mode, <transaction mode> >> [ { <<comma, <comma> >> <<transaction-mode, <transaction mode> >> }... ] ]
----

[[transaction-mode]]
[subs="specialcharacters,macros"]
----
<transaction mode> ::=
    <<isolation-level, <isolation level> >>
  | <<transaction-access-mode, <transaction access mode> >>
  | <<diagnostics-size, <diagnostics size> >>
----

[[transaction-access-mode]]
[subs="specialcharacters,macros"]
----
<transaction access mode> ::=
    READ ONLY
  | READ WRITE
----

[[isolation-level]]
[subs="specialcharacters,macros"]
----
<isolation level> ::= ISOLATION LEVEL <level of isolation>
----

[[level-of-isolation]]
[subs="specialcharacters,macros"]
----
<level of isolation> ::=
    READ UNCOMMITTED
  | READ COMMITTED
  | REPEATABLE READ
  | SERIALIZABLE
----

[[diagnostics-size]]
[subs="specialcharacters,macros"]
----
<diagnostics size> ::= DIAGNOSTICS SIZE <number of conditions>
----

[[number-of-conditions]]
[subs="specialcharacters,macros"]
----
<number of conditions> ::= <simple value specification>
----

=== 16.2 <set transaction statement>

.Function

Set the characteristics of the next SQL-transaction for the SQL-agent.
NOTE 411 — This statement has no effect on any SQL-transactions subsequent to the next SQL-transaction.


Format
[[set-transaction-statement]]
[subs="specialcharacters,macros"]
----
<set transaction statement> ::=
    SET [ LOCAL ] <<transaction-characteristics, <transaction characteristics> >>
----

[[transaction-characteristics]]
[subs="specialcharacters,macros"]
----
<transaction characteristics> ::=
    TRANSACTION <<transaction-mode, <transaction mode> >> [ { <<comma, <comma> >> <<transaction-mode, <transaction mode> >> }... ]
----

=== 16.3 <set constraints mode statement>

.Function

If an SQL-transaction is currently active, then set the constraint mode for that SQL-transaction in the current
SQL-session. If no SQL-transaction is currently active, then set the constraint mode for the next SQL-transaction
in the current SQL-session for the SQL-agent.
NOTE 413 — This statement has no effect on any SQL-transactions subsequent to this SQL-transaction.


Format
[[set-constraints-mode-statement]]
[subs="specialcharacters,macros"]
----
<set constraints mode statement> ::=
    SET CONSTRAINTS <<constraint-name-list, <constraint name list> >> { DEFERRED | IMMEDIATE }
----

[[constraint-name-list]]
[subs="specialcharacters,macros"]
----
<constraint name list> ::=
    ALL
  | <<constraint-name, <constraint name> >> [ { <<comma, <comma> >> <<constraint-name, <constraint name> >> }... ]
----

=== 16.4 <savepoint statement>

.Function

Establish a savepoint.


Format
[[savepoint-statement]]
[subs="specialcharacters,macros"]
----
<savepoint statement> ::= SAVEPOINT <savepoint specifier>
----

[[savepoint-specifier]]
[subs="specialcharacters,macros"]
----
<savepoint specifier> ::= <savepoint name>
----

=== 16.5 <release savepoint statement>

.Function

Destroy a savepoint.


Format
[[release-savepoint-statement]]
[subs="specialcharacters,macros"]
----
<release savepoint statement> ::= RELEASE SAVEPOINT <savepoint specifier>
----

=== 16.6 <commit statement>

.Function

Terminate the current SQL-transaction with commit.


Format
[[commit-statement]]
[subs="specialcharacters,macros"]
----
<commit statement> ::= COMMIT [ WORK ] [ AND [ NO ] CHAIN ]
----

=== 16.7 <rollback statement>

.Function

Terminate the current SQL-transaction with rollback, or rollback all actions affecting SQL-data and/or schemas
since the establishment of a savepoint.


Format
[[rollback-statement]]
[subs="specialcharacters,macros"]
----
<rollback statement> ::= ROLLBACK [ WORK ] [ AND [ NO ] CHAIN ] [ <savepoint clause> ]
----

[[savepoint-clause]]
[subs="specialcharacters,macros"]
----
<savepoint clause> ::= TO SAVEPOINT <savepoint specifier>
----

== 17 Connection management


=== 17.1 <connect statement>

.Function

Establish an SQL-session.


Format
[[connect-statement]]
[subs="specialcharacters,macros"]
----
<connect statement> ::= CONNECT TO <connection target>
----

[[connection-target]]
[subs="specialcharacters,macros"]
----
<connection target> ::=
    <<SQL-server-name, <SQL-server name> >> [ AS <<connection-name, <connection name> >> ] [ USER <<connection-user-name, <connection user name> >> ]
  | DEFAULT
----


=== 17.2 <set connection statement>

.Function

Select an SQL-connection from the available SQL-connections.


Format
[[set-connection-statement]]
[subs="specialcharacters,macros"]
----
<set connection statement> ::= SET CONNECTION <connection object>
----

[[connection-object]]
[subs="specialcharacters,macros"]
----
<connection object> ::=
    DEFAULT
  | <<connection-name, <connection name> >>
----


=== 17.3 <disconnect statement>

.Function

Terminate an SQL-connection.


Format
[[disconnect-statement]]
[subs="specialcharacters,macros"]
----
<disconnect statement> ::= DISCONNECT <disconnect object>
----

[[disconnect-object]]
[subs="specialcharacters,macros"]
----
<disconnect object> ::=
    <<connection-object, <connection object> >>
  | ALL
  | CURRENT
----


== 18 Session management


=== 18.1 <set session characteristics statement>

.Function

Set one or more characteristics for the current SQL-session.


Format
[[set-session-characteristics-statement]]
[subs="specialcharacters,macros"]
----
<set session characteristics statement> ::=
    SET SESSION CHARACTERISTICS AS <<session-characteristic-list, <session characteristic list> >>
----

[[session-characteristic-list]]
[subs="specialcharacters,macros"]
----
<session characteristic list> ::=
    <<session-characteristic, <session characteristic> >> [ { <<comma, <comma> >> <<session-characteristic, <session characteristic> >> }... ]
----

[[session-characteristic]]
[subs="specialcharacters,macros"]
----
<session characteristic> ::= <transaction characteristics>
----

=== 18.2 <set session user identifier statement>

.Function

Set the SQL-session user identifier and the current user identifier of the current SQL-session context.


Format
[[set-session-user-identifier-statement]]
[subs="specialcharacters,macros"]
----
<set session user identifier statement> ::=
    SET SESSION AUTHORIZATION <<value-specification, <value specification> >>
----


=== 18.3 <set role statement>

.Function

Set the current role name for the current SQL-session context.


Format
[[set-role-statement]]
[subs="specialcharacters,macros"]
----
<set role statement> ::= SET ROLE <role specification>
----

[[role-specification]]
[subs="specialcharacters,macros"]
----
<role specification> ::=
    <<value-specification, <value specification> >>
  | NONE
----


=== 18.4 <set local time zone statement>

.Function

Set the current default time zone displacement for the current SQL-session.


Format
[[set-local-time-zone-statement]]
[subs="specialcharacters,macros"]
----
<set local time zone statement> ::= SET TIME ZONE <set time zone value>
----

[[set-time-zone-value]]
[subs="specialcharacters,macros"]
----
<set time zone value> ::=
    <<interval-value-expression, <interval value expression> >>
  | LOCAL
----


=== 18.5 <set catalog statement>

.Function

Set the default catalog name for unqualified <schema name>s in <preparable statement>s that are prepared in
the current SQL-session by an <execute immediate statement> or a <prepare statement> and in <direct SQL
statement>s that are invoked directly.


Format
[[set-catalog-statement]]
[subs="specialcharacters,macros"]
----
<set catalog statement> ::= SET <catalog name characteristic>
----

[[catalog-name-characteristic]]
[subs="specialcharacters,macros"]
----
<catalog name characteristic> ::= CATALOG <value specification>
----


=== 18.6 <set schema statement>

.Function

Set the default schema name for unqualified <schema qualified name>s in <preparable statement>s that are
prepared in the current SQL-session by an <execute immediate statement> or a <prepare statement> and in
[[direct-SQL-statement]]
[subs="specialcharacters,macros"]
----
<direct SQL statement>s that are invoked directly.
----


Format
[[set-schema-statement]]
[subs="specialcharacters,macros"]
----
<set schema statement> ::= SET <schema name characteristic>
----

[[schema-name-characteristic]]
[subs="specialcharacters,macros"]
----
<schema name characteristic> ::= SCHEMA <value specification>
----


=== 18.7 <set names statement>

.Function

Set the default character set name for <character string literal>s in <preparable statement>s that are prepared
in the current SQL-session by an <execute immediate statement> or a <prepare statement> and in <direct SQL
statement>s that are invoked directly.


Format
[[set-names-statement]]
[subs="specialcharacters,macros"]
----
<set names statement> ::= SET <character set name characteristic>
----

[[character-set-name-characteristic]]
[subs="specialcharacters,macros"]
----
<character set name characteristic> ::= NAMES <value specification>
----


=== 18.8 <set path statement>

.Function

Set the SQL-path used to determine the subject routine of <routine invocation>s with unqualified <routine
name>s in <preparable statement>s that are prepared in the current SQL-session by an <execute immediate
statement> or a <prepare statement> and in <direct SQL statement>s, respectively, that are invoked directly.
The SQL-path remains the current SQL-path of the SQL-session until another SQL-path is successfully set.


Format
[[set-path-statement]]
[subs="specialcharacters,macros"]
----
<set path statement> ::= SET <SQL-path characteristic>
----

[[SQL-path-characteristic]]
[subs="specialcharacters,macros"]
----
<SQL-path characteristic> ::= PATH <value specification>
----


=== 18.9 <set transform group statement>

.Function

Set the group name that identifies the group of transform functions for mapping values of user-defined types
to predefined data types.


Format
[[set-transform-group-statement]]
[subs="specialcharacters,macros"]
----
<set transform group statement> ::= SET <transform group characteristic>
----

[[transform-group-characteristic]]
[subs="specialcharacters,macros"]
----
<transform group characteristic> ::=
    DEFAULT TRANSFORM GROUP <<value-specification, <value specification> >>
  | TRANSFORM GROUP FOR TYPE <<path-resolved-user-defined-type-name, <path-resolved user-defined type name> >> <<value-specification, <value specification> >>
----


=== 18.10 <set session collation statement>

.Function

Set the SQL-session collation of the SQL-session for one or more character sets. An SQL-session collation
remains effective until another SQL-session collation for the same character set is successfully set.


Format
[[set-session-collation-statement]]
[subs="specialcharacters,macros"]
----
<set session collation statement> ::=
    SET COLLATION <<collation-specification, <collation specification> >> [ FOR <<character-set-specification-list, <character set specification list> >> ]
  | SET NO COLLATION [ FOR <<character-set-specification-list, <character set specification list> >> ]
----

[[collation-specification]]
[subs="specialcharacters,macros"]
----
<collation specification> ::= <value specification>
----

== 19 Dynamic SQL

=== 19.2 <allocate descriptor statement>

.Function

Allocate an SQL descriptor area.


Format
[[allocate-descriptor-statement]]
[subs="specialcharacters,macros"]
----
<allocate descriptor statement> ::=
    ALLOCATE [ SQL ] DESCRIPTOR <<descriptor-name, <descriptor name> >> [ WITH MAX <<occurrences, <occurrences> >> ]
----

[[occurrences]]
[subs="specialcharacters,macros"]
----
<occurrences> ::= <simple value specification>
----


=== 19.3 <deallocate descriptor statement>

.Function

Deallocate an SQL descriptor area.


Format
[[deallocate-descriptor-statement]]
[subs="specialcharacters,macros"]
----
<deallocate descriptor statement> ::=
    DEALLOCATE [ SQL ] DESCRIPTOR <<descriptor-name, <descriptor name> >>
----


=== 19.4 <get descriptor statement>

.Function

Get information from an SQL descriptor area.


Format
[[get-descriptor-statement]]
[subs="specialcharacters,macros"]
----
<get descriptor statement> ::=
    GET [ SQL ] DESCRIPTOR <<descriptor-name, <descriptor name> >> <<get-descriptor-information, <get descriptor information> >>
----

[[get-descriptor----information]]
[subs="specialcharacters,macros"]
----
<get descriptor    information> ::=
    <<get-header----information, <get header    information> >> [ { <<comma, <comma> >> <<get-header-information, <get header information> >> }... ]
  | VALUE <<item----number, <item    number> >> <<get-item-information, <get item information> >>
    [ { <<comma, <comma> >>    <<get-item-information, <get item information> >> }... ]
----

[[get-header-information]]
[subs="specialcharacters,macros"]
----
<get header information> ::=
    <<simple-target-specification-1, <simple target specification 1> >> <<equals-operator, <equals operator> >> <<header-item-name, <header item name> >>
----

[[header-item-name]]
[subs="specialcharacters,macros"]
----
<header item name> ::=
    COUNT
  | KEY_TYPE
  | DYNAMIC_FUNCTION
  | DYNAMIC_FUNCTION_CODE
  | TOP_LEVEL_COUNT
----

[[get-item-information]]
[subs="specialcharacters,macros"]
----
<get item information> ::=
    <<simple-target-specification-2, <simple target specification 2> >> <<equals-operator, <equals operator> >> <<descriptor-item-name, <descriptor item name> >>
----

[[item-number]]
[subs="specialcharacters,macros"]
----
<item number> ::= <simple value specification>
----

[[simple-target-specification-1]]
[subs="specialcharacters,macros"]
----
<simple target specification 1> ::= <simple target specification>
----

[[simple-target-specification-2]]
[subs="specialcharacters,macros"]
----
<simple target specification 2> ::= <simple target specification>
----

[[descriptor-item-name]]
[subs="specialcharacters,macros"]
----
<descriptor item name> ::=
    CARDINALITY
  | CHARACTER_SET_CATALOG
  | CHARACTER_SET_NAME
  | CHARACTER_SET_SCHEMA
  | COLLATION_CATALOG
  | COLLATION_NAME
  | COLLATION_SCHEMA
  | DATA
  | DATETIME_INTERVAL_CODE
  | DATETIME_INTERVAL_PRECISION
  | DEGREE
  | INDICATOR
  | KEY_MEMBER
  | LENGTH
  | LEVEL
  | NAME
  | NULLABLE
  | OCTET_LENGTH
  |   PARAMETER_MODE
  |   PARAMETER_ORDINAL_POSITION
  |   PARAMETER_SPECIFIC_CATALOG
  |   PARAMETER_SPECIFIC_NAME
  |   PARAMETER_SPECIFIC_SCHEMA
  |   PRECISION
  |   RETURNED_CARDINALITY
  |   RETURNED_LENGTH
  |   RETURNED_OCTET_LENGTH
  |   SCALE
  |   SCOPE_CATALOG
  |   SCOPE_NAME
  |   SCOPE_SCHEMA
  |   TYPE
  |   UNNAMED
  |   USER_DEFINED_TYPE_CATALOG
  |   USER_DEFINED_TYPE_NAME
  |   USER_DEFINED_TYPE_SCHEMA
  |   USER_DEFINED_TYPE_CODE
----


=== 19.5 <set descriptor statement>

.Function

Set information in an SQL descriptor area.


Format
[[set-descriptor-statement]]
[subs="specialcharacters,macros"]
----
<set descriptor statement> ::=
    SET [ SQL ] DESCRIPTOR <<descriptor-name, <descriptor name> >> <<set-descriptor-information, <set descriptor information> >>
----

[[set-descriptor--------information]]
[subs="specialcharacters,macros"]
----
<set descriptor        information> ::=
    <<set-header--------information, <set header        information> >> [ { <<comma, <comma> >> <<set-header-information, <set header information> >> }... ]
  | VALUE <<item--------number, <item        number> >> <<set-item-information, <set item information> >>
    [ { <<comma, <comma> >>        <<set-item-information, <set item information> >> }... ]
----

[[set-header-information]]
[subs="specialcharacters,macros"]
----
<set header information> ::=
    <<header-item-name, <header item name> >> <<equals-operator, <equals operator> >> <<simple-value-specification-1, <simple value specification 1> >>
----

[[set-item-information]]
[subs="specialcharacters,macros"]
----
<set item information> ::=
    <<descriptor-item-name, <descriptor item name> >> <<equals-operator, <equals operator> >> <<simple-value-specification-2, <simple value specification 2> >>
----

[[simple-value-specification-1]]
[subs="specialcharacters,macros"]
----
<simple value specification 1> ::= <simple value specification>
----

[[simple-value-specification-2]]
[subs="specialcharacters,macros"]
----
<simple value specification 2> ::= <simple value specification>
----

=== 19.6 <prepare statement>

.Function

Prepare a statement for execution.


Format
[[prepare-statement]]
[subs="specialcharacters,macros"]
----
<prepare statement> ::=
    PREPARE <<SQL-statement-name, <SQL statement name> >> [ <<attributes-specification, <attributes specification> >> ]
    FROM <<SQL-statement-variable, <SQL statement variable> >>
----

[[attributes-specification]]
[subs="specialcharacters,macros"]
----
<attributes specification> ::= ATTRIBUTES <attributes variable>
----

[[attributes-variable]]
[subs="specialcharacters,macros"]
----
<attributes variable> ::= <simple value specification>
----

[[SQL-statement-variable]]
[subs="specialcharacters,macros"]
----
<SQL statement variable> ::= <simple value specification>
----

[[preparable-statement]]
[subs="specialcharacters,macros"]
----
<preparable statement> ::=
    <<preparable-SQL-data-statement, <preparable SQL data statement> >>
  | <<preparable-SQL-schema-statement, <preparable SQL schema statement> >>
  | <<preparable-SQL-transaction-statement, <preparable SQL transaction statement> >>
  | <<preparable-SQL-control-statement, <preparable SQL control statement> >>
  | <<preparable-SQL-session-statement, <preparable SQL session statement> >>
  | <<preparable-implementation-defined-statement, <preparable implementation-defined statement> >>
----

[[preparable-SQL-data-statement]]
[subs="specialcharacters,macros"]
----
<preparable SQL data statement> ::=
    <<delete-statement:-searched, <delete statement: searched> >>
  | <<dynamic-single-row-select-statement, <dynamic single row select statement> >>
  | <<insert-statement, <insert statement> >>
  | <<dynamic-select-statement, <dynamic select statement> >>
  | <<update-statement:-searched, <update statement: searched> >>
  | <<merge-statement, <merge statement> >>
  | <<preparable-dynamic-delete-statement:-positioned, <preparable dynamic delete statement: positioned> >>
  | <<preparable-dynamic-update-statement:-positioned, <preparable dynamic update statement: positioned> >>
  | <<hold-locator-statement, <hold locator statement> >>
  | <<free-locator-statement, <free locator statement> >>
----

[[preparable-SQL-schema-statement]]
[subs="specialcharacters,macros"]
----
<preparable SQL schema statement> ::= <SQL schema statement>
----

[[preparable-SQL-transaction-statement]]
[subs="specialcharacters,macros"]
----
<preparable SQL transaction statement> ::= <SQL transaction statement>
----

[[preparable-SQL-control-statement]]
[subs="specialcharacters,macros"]
----
<preparable SQL control statement> ::= <SQL control statement>
----

[[preparable-SQL-session-statement]]
[subs="specialcharacters,macros"]
----
<preparable SQL session statement> ::= <SQL session statement>
----

[[dynamic-select-statement]]
[subs="specialcharacters,macros"]
----
<dynamic select statement> ::= <cursor specification>
----

[[preparable-implementation-defined-statement]]
[subs="specialcharacters,macros"]
----
<preparable implementation-defined statement> ::= !! See the Syntax Rules.
----


=== 19.7 <cursor attributes>

.Function

Specify a list of cursor attributes.


Format
[[cursor-attributes]]
[subs="specialcharacters,macros"]
----
<cursor attributes> ::= <cursor attribute>...
----

[[cursor-attribute]]
[subs="specialcharacters,macros"]
----
<cursor attribute> ::=
    <<cursor-sensitivity, <cursor sensitivity> >>
  | <<cursor-scrollability, <cursor scrollability> >>
  | <<cursor-holdability, <cursor holdability> >>
  | <<cursor-returnability, <cursor returnability> >>
----


=== 19.8 <deallocate prepared statement>

.Function

Deallocate SQL-statements that have been prepared with a <prepare statement>.


Format
[[deallocate-prepared-statement]]
[subs="specialcharacters,macros"]
----
<deallocate prepared statement> ::= DEALLOCATE PREPARE <SQL statement name>
----


=== 19.9 <describe statement>

.Function

Obtain information about the <select list> columns or <dynamic parameter specification>s contained in a prepared
statement or about the columns of the result set associated with a cursor.


Format
[[describe-statement]]
[subs="specialcharacters,macros"]
----
<describe statement> ::=
    <<describe-input-statement, <describe input statement> >>
  | <<describe-output-statement, <describe output statement> >>
----

[[describe-input-statement]]
[subs="specialcharacters,macros"]
----
<describe input statement> ::=
    DESCRIBE INPUT <<SQL-statement-name, <SQL statement name> >> <<using-descriptor, <using descriptor> >> [ <<nesting-option, <nesting option> >> ]
----

[[describe-output-statement]]
[subs="specialcharacters,macros"]
----
<describe output statement> ::=
    DESCRIBE [ OUTPUT ] <<described-object, <described object> >> <<using-descriptor, <using descriptor> >> [ <<nesting-option, <nesting option> >> ]
----

[[nesting-option]]
[subs="specialcharacters,macros"]
----
<nesting option> ::=
    WITH NESTING
  | WITHOUT NESTING
----

[[using-descriptor]]
[subs="specialcharacters,macros"]
----
<using descriptor> ::= USING [ SQL ] DESCRIPTOR <descriptor name>
----

[[described-object]]
[subs="specialcharacters,macros"]
----
<described object> ::=
    <<SQL-statement-name, <SQL statement name> >>
  | CURSOR <<extended-cursor-name, <extended cursor name> >> STRUCTURE
----

=== 19.10 <input using clause>

.Function

Supply input values for an <SQL dynamic statement>.


Format
[[input-using-clause]]
[subs="specialcharacters,macros"]
----
<input using clause> ::=
    <<using-arguments, <using arguments> >>
  | <<using-input-descriptor, <using input descriptor> >>
----

[[using-arguments]]
[subs="specialcharacters,macros"]
----
<using arguments> ::= USING <using argument> [ { <comma> <using argument> }... ]
----

[[using-argument]]
[subs="specialcharacters,macros"]
----
<using argument> ::= <general value specification>
----

[[using-input-descriptor]]
[subs="specialcharacters,macros"]
----
<using input descriptor> ::= <using descriptor>
----

=== 19.11 <output using clause>

.Function

Supply output variables for an <SQL dynamic statement>.


Format
[[output-using-clause]]
[subs="specialcharacters,macros"]
----
<output using clause> ::=
    <<into-arguments, <into arguments> >>
  | <<into-descriptor, <into descriptor> >>
----

[[into-arguments]]
[subs="specialcharacters,macros"]
----
<into arguments> ::= INTO <into argument> [ { <comma> <into argument> }... ]
----

[[into-argument]]
[subs="specialcharacters,macros"]
----
<into argument> ::= <target specification>
----

[[into-descriptor]]
[subs="specialcharacters,macros"]
----
<into descriptor> ::= INTO [ SQL ] DESCRIPTOR <descriptor name>
----


=== 19.12 <execute statement>

.Function

Associate input SQL parameters and output targets with a prepared statement and execute the statement.


Format
[[execute-statement]]
[subs="specialcharacters,macros"]
----
<execute statement> ::=
    EXECUTE <<SQL-statement-name, <SQL statement name> >> [ <<result-using-clause, <result using clause> >> ] [ <<parameter-using-clause, <parameter using clause> >> ]
----

[[result-using-clause]]
[subs="specialcharacters,macros"]
----
<result using clause> ::= <output using clause>
----

[[parameter-using-clause]]
[subs="specialcharacters,macros"]
----
<parameter using clause> ::= <input using clause>
----


=== 19.13 <execute immediate statement>

.Function

Dynamically prepare and execute a preparable statement.


Format
[[execute-immediate-statement]]
[subs="specialcharacters,macros"]
----
<execute immediate statement> ::=
    EXECUTE IMMEDIATE <<SQL-statement-variable, <SQL statement variable> >>
----

=== 19.14 <dynamic declare cursor>

.Function

Declare a cursor to be associated with a <statement name>, which may in turn be associated with a <cursor
specification>.


Format
[[dynamic-declare-cursor]]
[subs="specialcharacters,macros"]
----
<dynamic declare cursor> ::=
    DECLARE <<cursor-name, <cursor name> >> [ <<cursor-sensitivity, <cursor sensitivity> >> ] [ <<cursor-scrollability, <cursor scrollability> >> ] CURSOR
    [ <<cursor-holdability, <cursor holdability> >> ]
    [ <<cursor-returnability, <cursor returnability> >> ]
    FOR <<statement-name, <statement name> >>
----


=== 19.15 <allocate cursor statement>

.Function

Define a cursor based on a prepared statement for a <cursor specification> or assign a cursor to the ordered set
of result sets returned from an SQL-invoked procedure.


Format
[[allocate-cursor-statement]]
[subs="specialcharacters,macros"]
----
<allocate cursor statement> ::=
    ALLOCATE <<extended-cursor-name, <extended cursor name> >> <<cursor-intent, <cursor intent> >>
----

[[cursor-intent]]
[subs="specialcharacters,macros"]
----
<cursor intent> ::=
    <<statement-cursor, <statement cursor> >>
  | <<result-set-cursor, <result set cursor> >>
----

[[statement-cursor]]
[subs="specialcharacters,macros"]
----
<statement cursor> ::=
    [ <<cursor-sensitivity, <cursor sensitivity> >> ] [ <<cursor-scrollability, <cursor scrollability> >> ] CURSOR
    [ <<cursor-holdability, <cursor holdability> >> ]
    [ <<cursor-returnability, <cursor returnability> >> ]
    FOR <<extended-statement-name, <extended statement name> >>
----

[[result-set-cursor]]
[subs="specialcharacters,macros"]
----
<result set cursor> ::= FOR PROCEDURE <specific routine designator>
----


=== 19.16 <dynamic open statement>

.Function

Associate input dynamic parameters with a <cursor specification> and open the cursor.


Format
[[dynamic-open-statement]]
[subs="specialcharacters,macros"]
----
<dynamic open statement> ::= OPEN <dynamic cursor name> [ <input using clause> ]
----


=== 19.17 <dynamic fetch statement>

.Function

Fetch a row for a cursor declared with a <dynamic declare cursor>.


Format
[[dynamic-fetch-statement]]
[subs="specialcharacters,macros"]
----
<dynamic fetch statement> ::=
    FETCH [ [ <<fetch-orientation, <fetch orientation> >> ] FROM ] <<dynamic-cursor-name, <dynamic cursor name> >> <<output-using-clause, <output using clause> >>
----


=== 19.18 <dynamic single row select statement>

.Function

Retrieve values from a dynamically-specified row of a table.


Format
[[dynamic-single-row-select-statement]]
[subs="specialcharacters,macros"]
----
<dynamic single row select statement> ::= <query specification>
----


=== 19.19 <dynamic close statement>

.Function

Close a cursor.


Format
[[dynamic-close-statement]]
[subs="specialcharacters,macros"]
----
<dynamic close statement> ::= CLOSE <dynamic cursor name>
----


=== 19.20 <dynamic delete statement: positioned>

.Function

Delete a row of a table.


Format
[[dynamic-delete-statement:-positioned]]
[subs="specialcharacters,macros"]
----
<dynamic delete statement: positioned> ::=
    DELETE FROM <<target-table, <target table> >> WHERE CURRENT OF <<dynamic-cursor-name, <dynamic cursor name> >>
----


=== 19.21 <dynamic update statement: positioned>

.Function

Update a row of a table.


Format
[[dynamic-update-statement:-positioned]]
[subs="specialcharacters,macros"]
----
<dynamic update statement: positioned> ::=
    UPDATE <<target-table, <target table> >> SET <<set-clause-list, <set clause list> >>
    WHERE CURRENT OF <<dynamic-cursor-name, <dynamic cursor name> >>
----


=== 19.22 <preparable dynamic delete statement: positioned>

.Function

Delete a row of a table through a dynamic cursor.


Format
[[preparable-dynamic-delete-statement:-positioned]]
[subs="specialcharacters,macros"]
----
<preparable dynamic delete statement: positioned> ::=
    DELETE [ FROM <<target-table, <target table> >> ]
    WHERE CURRENT OF [ <<scope-option, <scope option> >> ] <<cursor-name, <cursor name> >>
----

=== 19.23 <preparable dynamic update statement: positioned>

.Function

Update a row of a table through a dynamic cursor.


Format
[[preparable-dynamic-update-statement:-positioned]]
[subs="specialcharacters,macros"]
----
<preparable dynamic update statement: positioned> ::=
    UPDATE [ <<target-table, <target table> >> ] SET <<set-clause-list, <set clause list> >>
    WHERE CURRENT OF [ <<scope-option, <scope option> >> ] <<cursor-name, <cursor name> >>
----


== 20 Embedded SQL


=== 20.1 <embedded SQL host program>

.Function

Specify an <embedded SQL host program>.


Format
[[embedded-SQL-------host-program]]
[subs="specialcharacters,macros"]
----
<embedded SQL       host program> ::=
    <<embedded-------SQL-Ada-program, <embedded       SQL Ada program> >>
  | <<embedded-------SQL-C-program, <embedded       SQL C program> >>
  | <<embedded-------SQL-COBOL-program, <embedded       SQL COBOL program> >>
  | <<embedded-------SQL-Fortran-program, <embedded       SQL Fortran program> >>
  | <<embedded-------SQL-MUMPS-program, <embedded       SQL MUMPS program> >>
  | <<embedded-------SQL-Pascal-program, <embedded       SQL Pascal program> >>
  | <<embedded-------SQL-PL/I-program, <embedded       SQL PL/I program> >>
----

[[embedded-SQL-statement]]
[subs="specialcharacters,macros"]
----
<embedded SQL statement> ::=
    <<SQL-prefix, <SQL prefix> >> <<statement-or-declaration, <statement or declaration> >> [ <<SQL-terminator, <SQL terminator> >> ]
----

[[statement-or-declaration]]
[subs="specialcharacters,macros"]
----
<statement or declaration> ::=
    <<declare-cursor, <declare cursor> >>
  | <<dynamic-declare-cursor, <dynamic declare cursor> >>
  | <<temporary-table-declaration, <temporary table declaration> >>
  | <<embedded-authorization-declaration, <embedded authorization declaration> >>
  | <<embedded-path-specification, <embedded path specification> >>
  | <<embedded-transform-group-specification, <embedded transform group specification> >>
  | <<embedded-collation-specification, <embedded collation specification> >>
  | <<embedded-exception-declaration, <embedded exception declaration> >>
  | <<SQL-procedure-statement, <SQL procedure statement> >>
----

[[SQL-prefix]]
[subs="specialcharacters,macros"]
----
<SQL prefix> ::=
    EXEC SQL
  | <<ampersand, <ampersand> >>SQL<<left-paren, <left paren> >>
----

[[SQL-terminator]]
[subs="specialcharacters,macros"]
----
<SQL terminator> ::=
    END-EXEC
  | <<semicolon, <semicolon> >>
  | <<right-paren, <right paren> >>
----

[[embedded-authorization-declaration]]
[subs="specialcharacters,macros"]
----
<embedded authorization declaration> ::= DECLARE <embedded authorization clause>
----

[[embedded-authorization-clause]]
[subs="specialcharacters,macros"]
----
<embedded authorization clause> ::=
    SCHEMA <<schema-name, <schema name> >>
  | AUTHORIZATION <<embedded-authorization-identifier, <embedded authorization identifier> >>
    [ FOR STATIC { ONLY | AND DYNAMIC } ]
  | SCHEMA <<schema-name, <schema name> >> AUTHORIZATION <<embedded-authorization-identifier, <embedded authorization identifier> >>
    [ FOR STATIC { ONLY | AND DYNAMIC } ]
----

[[embedded-authorization-identifier]]
[subs="specialcharacters,macros"]
----
<embedded authorization identifier> ::=
    <<module-authorization-identifier, <module authorization identifier> >>
----

[[embedded-path-specification]]
[subs="specialcharacters,macros"]
----
<embedded path specification> ::= <path specification>
----

[[embedded-transform-group-specification]]
[subs="specialcharacters,macros"]
----
<embedded transform group specification> ::=
    <<transform-group-specification, <transform group specification> >>
----

[[embedded-collation-specification]]
[subs="specialcharacters,macros"]
----
<embedded collation specification> ::= <module collations>
----

[[embedded-SQL-declare-section]]
[subs="specialcharacters,macros"]
----
<embedded SQL declare section> ::=
    <<embedded-SQL-begin-declare, <embedded SQL begin declare> >>
    [ <<embedded-character-set-declaration, <embedded character set declaration> >> ]
    [ <<host-variable-definition, <host variable definition> >>... ]
    <<embedded-SQL-end-declare, <embedded SQL end declare> >>
  | <<embedded-SQL-MUMPS-declare, <embedded SQL MUMPS declare> >>
----

[[embedded-character-set-declaration]]
[subs="specialcharacters,macros"]
----
<embedded character set declaration> ::=
    SQL NAMES ARE <<character-set-specification, <character set specification> >>
----

[[embedded-SQL-begin-declare]]
[subs="specialcharacters,macros"]
----
<embedded SQL begin declare> ::=
    <<SQL-prefix, <SQL prefix> >> BEGIN DECLARE SECTION [ <<SQL-terminator, <SQL terminator> >> ]
----

[[embedded-SQL-end-declare]]
[subs="specialcharacters,macros"]
----
<embedded SQL end declare> ::=
    <<SQL-prefix, <SQL prefix> >> END DECLARE SECTION [ <<SQL-terminator, <SQL terminator> >> ]
----

[[embedded-SQL-MUMPS-declare]]
[subs="specialcharacters,macros"]
----
<embedded SQL MUMPS declare> ::=
    <<SQL-prefix, <SQL prefix> >>
    BEGIN DECLARE SECTION
    [ <<embedded-character-set-declaration, <embedded character set declaration> >> ]
    [ <<host-variable-definition, <host variable definition> >>... ]
    END DECLARE SECTION
    <<SQL-terminator, <SQL terminator> >>
----

[[host-variable-definition]]
[subs="specialcharacters,macros"]
----
<host variable definition> ::=
    <<Ada-variable-definition, <Ada variable definition> >>
  | <<C-variable-definition, <C variable definition> >>
  | <<COBOL-variable-definition, <COBOL variable definition> >>
  | <<Fortran-variable-definition, <Fortran variable definition> >>
  | <<MUMPS-variable-definition, <MUMPS variable definition> >>
  | <<Pascal-variable-definition, <Pascal variable definition> >>
  | <<PL/I-variable-definition, <PL/I variable definition> >>
----

[[embedded-variable-name]]
[subs="specialcharacters,macros"]
----
<embedded variable name> ::= <colon><host identifier>
----

[[host-identifier]]
[subs="specialcharacters,macros"]
----
<host identifier> ::=
    <<Ada-host-identifier, <Ada host identifier> >>
  | <<C-host-identifier, <C host identifier> >>
  | <<COBOL-host-identifier, <COBOL host identifier> >>
  | <<Fortran-host-identifier, <Fortran host identifier> >>
  | <<MUMPS-host-identifier, <MUMPS host identifier> >>
  | <<Pascal-host-identifier, <Pascal host identifier> >>
  | <<PL/I-host-identifier, <PL/I host identifier> >>
----

=== 20.2 <embedded exception declaration>

.Function

Specify the action to be taken when an SQL-statement causes a specific class of condition to be raised.


Format
[[embedded-exception-declaration]]
[subs="specialcharacters,macros"]
----
<embedded exception declaration> ::= WHENEVER <condition> <condition action>
----

[[condition]]
[subs="specialcharacters,macros"]
----
<condition> ::= <SQL condition>
----

[[SQL-condition]]
[subs="specialcharacters,macros"]
----
<SQL condition> ::=
    <<major-category, <major category> >>
  | SQLSTATE ( <<SQLSTATE-class-value, <SQLSTATE class value> >> [ , <<SQLSTATE-subclass-value, <SQLSTATE subclass value> >> ] )
  | CONSTRAINT <<constraint-name, <constraint name> >>
----

[[major-category]]
[subs="specialcharacters,macros"]
----
<major category> ::=
    SQLEXCEPTION
  | SQLWARNING
  | NOT FOUND
----

[[SQLSTATE-class-value]]
[subs="specialcharacters,macros"]
----
<SQLSTATE class value> ::=
    <<SQLSTATE-char, <SQLSTATE char> >><<SQLSTATE-char, <SQLSTATE char> >> !! See the Syntax Rules.
----

[[SQLSTATE-subclass-value]]
[subs="specialcharacters,macros"]
----
<SQLSTATE subclass value> ::=
    <<SQLSTATE-char, <SQLSTATE char> >><<SQLSTATE-char, <SQLSTATE char> >><<SQLSTATE-char, <SQLSTATE char> >> !! See the Syntax Rules.
----

[[SQLSTATE-char]]
[subs="specialcharacters,macros"]
----
<SQLSTATE char> ::=
    <<simple-Latin-upper-case-letter, <simple Latin upper case letter> >>
  | <<digit, <digit> >>
----

[[condition-action]]
[subs="specialcharacters,macros"]
----
<condition action> ::=
    CONTINUE
  | <<go-to, <go to> >>
----

[[go-to]]
[subs="specialcharacters,macros"]
----
<go to> ::= { GOTO | GO TO } <goto target>
----

[[goto-target]]
[subs="specialcharacters,macros"]
----
<goto target> ::=
    <<host-label-identifier, <host label identifier> >>
  | <<unsigned-integer, <unsigned integer> >>
  | <<host-PL/I-label-variable, <host PL/I label variable> >>
----

[[host-label-identifier]]
[subs="specialcharacters,macros"]
----
<host label identifier> ::= !! See the Syntax Rules.
----

[[host-PL/I-label-variable]]
[subs="specialcharacters,macros"]
----
<host PL/I label variable> ::= !! See the Syntax Rules.
----


=== 20.3 <embedded SQL Ada program>

.Function

Specify an <embedded SQL Ada program>.


Format
[[embedded-SQL-Ada-program]]
[subs="specialcharacters,macros"]
----
<embedded SQL Ada program> ::= !! See the Syntax Rules.
----

[[Ada-variable-definition]]
[subs="specialcharacters,macros"]
----
<Ada variable definition> ::=
    <<Ada-host-identifier, <Ada host identifier> >> [ { <<comma, <comma> >> <<Ada-host-identifier, <Ada host identifier> >> }... ] <<colon, <colon> >>
    <<Ada-type-specification, <Ada type specification> >> [ <<Ada-initial-value, <Ada initial value> >> ]
----

[[Ada-initial-value]]
[subs="specialcharacters,macros"]
----
<Ada initial value> ::=
    <<Ada-assignment-operator, <Ada assignment operator> >> <<character-representation, <character representation> >>...
----

[[Ada-assignment-operator]]
[subs="specialcharacters,macros"]
----
<Ada assignment operator> ::= <colon><equals operator>
----

[[Ada-host-identifier]]
[subs="specialcharacters,macros"]
----
<Ada host identifier> ::= !! See the Syntax Rules.
----

[[Ada-type-specification]]
[subs="specialcharacters,macros"]
----
<Ada type specification> ::=
    <<Ada-qualified-type-specification, <Ada qualified type specification> >>
  | <<Ada-unqualified-type-specification, <Ada unqualified type specification> >>
  | <<Ada-derived-type-specification, <Ada derived type specification> >>
----

[[Ada-qualified-type-specification]]
[subs="specialcharacters,macros"]
----
<Ada qualified type specification> ::=
    Interfaces.SQL <<period, <period> >> CHAR
    [ CHARACTER SET [ IS ] <<character-set-specification, <character set specification> >> ]
    <<left-paren, <left paren> >> 1 <<double-period, <double period> >> <<length, <length> >> <<right-paren, <right paren> >>
  | Interfaces.SQL <<period, <period> >> SMALLINT
  | Interfaces.SQL <<period, <period> >> INT
  | Interfaces.SQL <<period, <period> >> BIGINT
  | Interfaces.SQL <<period, <period> >> REAL
  | Interfaces.SQL <<period, <period> >> DOUBLE_PRECISION
  | Interfaces.SQL <<period, <period> >> BOOLEAN
  | Interfaces.SQL <<period, <period> >> SQLSTATE_TYPE
  | Interfaces.SQL <<period, <period> >> INDICATOR_TYPE
----

[[Ada-unqualified-type-specification]]
[subs="specialcharacters,macros"]
----
<Ada unqualified type specification> ::=
    CHAR <<left-paren, <left paren> >> 1 <<double-period, <double period> >> <<length, <length> >> <<right-paren, <right paren> >>
  | SMALLINT
  | INT
  | BIGINT
  | REAL
  | DOUBLE_PRECISION
  | BOOLEAN
  | SQLSTATE_TYPE
  | INDICATOR_TYPE
----

[[Ada-derived-type-specification]]
[subs="specialcharacters,macros"]
----
<Ada derived type specification> ::=
    <<Ada-CLOB-variable, <Ada CLOB variable> >>
  | <<Ada-CLOB-locator-variable, <Ada CLOB locator variable> >>
  | <<Ada-BLOB-variable, <Ada BLOB variable> >>
  |   <<Ada---BLOB-locator-variable, <Ada   BLOB locator variable> >>
  |   <<Ada---user-defined-type-variable, <Ada   user-defined type variable> >>
  |   <<Ada---user-defined-type-locator-variable, <Ada   user-defined type locator variable> >>
  |   <<Ada---REF-variable, <Ada   REF variable> >>
  |   <<Ada---array-locator-variable, <Ada   array locator variable> >>
  |   <<Ada---multiset-locator-variable, <Ada   multiset locator variable> >>
----

[[Ada-CLOB-variable]]
[subs="specialcharacters,macros"]
----
<Ada CLOB variable> ::=
    SQL TYPE IS CLOB <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >>
    [ CHARACTER SET [ IS ] <<character-set-specification, <character set specification> >> ]
----

[[Ada-CLOB-locator-variable]]
[subs="specialcharacters,macros"]
----
<Ada CLOB locator variable> ::= SQL TYPE IS CLOB AS LOCATOR
----

[[Ada-BLOB-variable]]
[subs="specialcharacters,macros"]
----
<Ada BLOB variable> ::=
    SQL TYPE IS BLOB <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >>
----

[[Ada-BLOB-locator-variable]]
[subs="specialcharacters,macros"]
----
<Ada BLOB locator variable> ::= SQL TYPE IS BLOB AS LOCATOR
----

[[Ada-user-defined-type-variable]]
[subs="specialcharacters,macros"]
----
<Ada user-defined type variable> ::=
    SQL TYPE IS <<path-resolved-user-defined-type-name, <path-resolved user-defined type name> >> AS <<predefined-type, <predefined type> >>
----

[[Ada-user-defined-type-locator-variable]]
[subs="specialcharacters,macros"]
----
<Ada user-defined type locator variable> ::=
    SQL TYPE IS <<path-resolved-user-defined-type-name, <path-resolved user-defined type name> >> AS LOCATOR
----

[[Ada-REF-variable]]
[subs="specialcharacters,macros"]
----
<Ada REF variable> ::= SQL TYPE IS <reference type>
----

[[Ada-array-locator-variable]]
[subs="specialcharacters,macros"]
----
<Ada array locator variable> ::= SQL TYPE IS <array type> AS LOCATOR
----

[[Ada-multiset-locator-variable]]
[subs="specialcharacters,macros"]
----
<Ada multiset locator variable> ::= SQL TYPE IS <multiset type> AS LOCATOR
----


=== 20.4 <embedded SQL C program>

.Function

Specify an <embedded SQL C program>.


Format
[[embedded-SQL-C-program]]
[subs="specialcharacters,macros"]
----
<embedded SQL C program> ::= !! See the Syntax Rules.
----

[[C-variable-definition]]
[subs="specialcharacters,macros"]
----
<C variable definition> ::=
    [ <<C-storage-class, <C storage class> >> ] [ <<C-class-modifier, <C class modifier> >> ]
    <<C-variable-specification, <C variable specification> >> <<semicolon, <semicolon> >>
----

[[C-variable-specification]]
[subs="specialcharacters,macros"]
----
<C variable specification> ::=
    <<C-numeric-variable, <C numeric variable> >>
  | <<C-character-variable, <C character variable> >>
  | <<C-derived-variable, <C derived variable> >>
----

[[C-storage-class]]
[subs="specialcharacters,macros"]
----
<C storage class> ::=
    auto
  | extern
  | static
----

[[C-class-modifier]]
[subs="specialcharacters,macros"]
----
<C class modifier> ::=
    const
  | volatile
----

[[C-numeric-variable]]
[subs="specialcharacters,macros"]
----
<C numeric variable> ::=
    { long long | long | short | float | double }
    <<C-host-identifier, <C host identifier> >> [ <<C-initial-value, <C initial value> >> ]
    [ { <<comma, <comma> >> <<C-host-identifier, <C host identifier> >> [ <<C-initial-value, <C initial value> >> ] }... ]
----

[[C-character-variable]]
[subs="specialcharacters,macros"]
----
<C character variable> ::=
    <<C-character-type, <C character type> >> [ CHARACTER SET [ IS ] <<character-set-specification, <character set specification> >> ]
    <<C-host-identifier, <C host identifier> >> <<C-array-specification, <C array specification> >> [ <<C-initial-value, <C initial value> >> ]
    [ { <<comma, <comma> >> <<C-host-identifier, <C host identifier> >> <<C-array-specification, <C array specification> >>
    [ <<C-initial-value, <C initial value> >> ] }... ]
----

[[C-character-type]]
[subs="specialcharacters,macros"]
----
<C character type> ::=
    char
  | unsigned char
  | unsigned short
----

[[C-array-specification]]
[subs="specialcharacters,macros"]
----
<C array specification> ::= <left bracket> <length> <right bracket>
----

[[C-host-identifier]]
[subs="specialcharacters,macros"]
----
<C host identifier> ::= !! See the Syntax Rules.
----

[[C-derived-variable]]
[subs="specialcharacters,macros"]
----
<C derived variable> ::=
    <<C-VARCHAR-variable, <C VARCHAR variable> >>
  | <<C-NCHAR-variable, <C NCHAR variable> >>
  | <<C-NCHAR-VARYING-variable, <C NCHAR VARYING variable> >>
  | <<C-CLOB-variable, <C CLOB variable> >>
  | <<C-NCLOB-variable, <C NCLOB variable> >>
  |   <<C---BLOB-variable, <C   BLOB variable> >>
  |   <<C---user-defined-type-variable, <C   user-defined type variable> >>
  |   <<C---CLOB-locator-variable, <C   CLOB locator variable> >>
  |   <<C---BLOB-locator-variable, <C   BLOB locator variable> >>
  |   <<C---array-locator-variable, <C   array locator variable> >>
  |   <<C---multiset-locator-variable, <C   multiset locator variable> >>
  |   <<C---user-defined-type-locator-variable, <C   user-defined type locator variable> >>
  |   <<C---REF-variable, <C   REF variable> >>
----

[[C-VARCHAR-variable]]
[subs="specialcharacters,macros"]
----
<C VARCHAR variable> ::=
    VARCHAR [ CHARACTER SET [ IS ] <<character-set-specification, <character set specification> >> ]
    <<C-host-identifier, <C host identifier> >> <<C-array-specification, <C array specification> >> [ <<C-initial-value, <C initial value> >> ]
    [ { <<comma, <comma> >> <<C-host-identifier, <C host identifier> >> <<C-array-specification, <C array specification> >> [
    <<C-initial-value, <C initial value> >> ] }... ]
----

[[C-NCHAR-variable]]
[subs="specialcharacters,macros"]
----
<C NCHAR variable> ::=
    NCHAR [ CHARACTER SET [ IS ] <<character-set-specification, <character set specification> >> ]
    <<C-host-identifier, <C host identifier> >> <<C-array-specification, <C array specification> >> [ <<C-initial-value, <C initial value> >> ]
    [ { <<comma, <comma> >> <<C-host-identifier, <C host identifier> >> <<C-array-specification, <C array specification> >>
    [ <<C-initial-value, <C initial value> >> ] } ... ]
----

[[C-NCHAR-VARYING-variable]]
[subs="specialcharacters,macros"]
----
<C NCHAR VARYING variable> ::=
    NCHAR VARYING [ CHARACTER SET [ IS ] <<character-set-specification, <character set specification> >> ]
    <<C-host-identifier, <C host identifier> >> <<C-array-specification, <C array specification> >> [ <<C-initial-value, <C initial value> >> ]
    [ { <<comma, <comma> >> <<C-host-identifier, <C host identifier> >> <<C-array-specification, <C array specification> >> [
    <<C-initial-value, <C initial value> >> ] } ... ]
----

[[C-CLOB-variable]]
[subs="specialcharacters,macros"]
----
<C CLOB variable> ::=
    SQL TYPE IS CLOB <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >>
    [ CHARACTER SET [ IS ] <<character-set-specification, <character set specification> >> ]
    <<C-host-identifier, <C host identifier> >> [ <<C-initial-value, <C initial value> >> ] [ { <<comma, <comma> >> <<C-host-identifier, <C host identifier> >> [
    <<C-initial-value, <C initial value> >> ] }... ]
----

[[C-NCLOB-variable]]
[subs="specialcharacters,macros"]
----
<C NCLOB variable> ::=
    SQL TYPE IS NCLOB <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >>
    [ CHARACTER SET [ IS ] <<character-set-specification, <character set specification> >> ]
    <<C-host-identifier, <C host identifier> >> [ <<C-initial-value, <C initial value> >> ] [ { <<comma, <comma> >> <<C-host-identifier, <C host identifier> >>
    [ <<C-initial-value, <C initial value> >> ] }... ]
----

[[C-user-defined-type-variable]]
[subs="specialcharacters,macros"]
----
<C user-defined type variable> ::=
    SQL TYPE IS <<path-resolved-user-defined-type-name, <path-resolved user-defined type name> >> AS <<predefined-type, <predefined type> >>
    <<C-host-identifier, <C host identifier> >> [ <<C-initial-value, <C initial value> >> ]
    [ { <<comma, <comma> >> <<C-host-identifier, <C host identifier> >> [
    <<C-initial-value, <C initial value> >> ] } ... ]
----

[[C-BLOB-variable]]
[subs="specialcharacters,macros"]
----
<C BLOB variable> ::=
    SQL TYPE IS BLOB <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >>
    <<C-host-identifier, <C host identifier> >> [ <<C-initial-value, <C initial value> >> ]
    [ { <<comma, <comma> >> <<C-host-identifier, <C host identifier> >> [
    <<C-initial-value, <C initial value> >> ] } ... ]
----

[[C-CLOB-locator-variable]]
[subs="specialcharacters,macros"]
----
<C CLOB locator variable> ::=
    SQL TYPE IS CLOB AS LOCATOR
    <<C-host-identifier, <C host identifier> >> [ <<C-initial-value, <C initial value> >> ]
    [ { <<comma, <comma> >> <<C-host-identifier, <C host identifier> >> [
    <<C-initial-value, <C initial value> >> ] } ... ]
----

[[C-BLOB-locator-variable]]
[subs="specialcharacters,macros"]
----
<C BLOB locator variable> ::=
    SQL TYPE IS BLOB AS LOCATOR
    <<C-host-identifier, <C host identifier> >> [ <<C-initial-value, <C initial value> >> ]
    [ { <<comma, <comma> >> <<C-host-identifier, <C host identifier> >> [
    <<C-initial-value, <C initial value> >> ] } ... ]
----

[[C-array-locator-variable]]
[subs="specialcharacters,macros"]
----
<C array locator variable> ::=
    SQL TYPE IS <<array-type, <array type> >> AS LOCATOR
    <<C-host-identifier, <C host identifier> >> [ <<C-initial-value, <C initial value> >> ]
    [ { <<comma, <comma> >> <<C-host-identifier, <C host identifier> >> [
    <<C-initial-value, <C initial value> >> ] } ... ]
----

[[C-multiset-locator-variable]]
[subs="specialcharacters,macros"]
----
<C multiset locator variable> ::=
    SQL TYPE IS <<multiset-type, <multiset type> >> AS LOCATOR
    <<C-host-identifier, <C host identifier> >> [ <<C-initial-value, <C initial value> >> ]
    [ { <<comma, <comma> >> <<C-host-identifier, <C host identifier> >> [
    <<C-initial-value, <C initial value> >> ] } ... ]
----

[[C-user-defined-type-locator-variable]]
[subs="specialcharacters,macros"]
----
<C user-defined type locator variable> ::=
    SQL TYPE IS <<path-resolved-user-defined-type-name, <path-resolved user-defined type name> >> AS LOCATOR
    <<C-host-identifier, <C host identifier> >> [ <<C-initial-value, <C initial value> >> ]
    [ { <<comma, <comma> >> <<C-host-identifier, <C host identifier> >> [
    <<C-initial-value, <C initial value> >> ] }... ]
----

[[C-REF-variable]]
[subs="specialcharacters,macros"]
----
<C REF variable> ::=
    SQL TYPE IS <<reference-type, <reference type> >> <<C-host-identifier, <C host identifier> >> [ <<C-initial-value, <C initial value> >> ]
    [ { <<comma, <comma> >> <<C-host-identifier, <C host identifier> >> [ <<C-initial-value, <C initial value> >> ] }... ]
----

[[C-initial-value]]
[subs="specialcharacters,macros"]
----
<C initial value> ::=
    <<equals-operator, <equals operator> >> <<character-representation, <character representation> >>...
----


=== 20.5 <embedded SQL COBOL program>

.Function

Specify an <embedded SQL COBOL program>.


Format
[[embedded-SQL-COBOL-program]]
[subs="specialcharacters,macros"]
----
<embedded SQL COBOL program> ::= !! See the Syntax Rules.
----

[[COBOL-variable-definition]]
[subs="specialcharacters,macros"]
----
<COBOL variable definition> ::=
    { 01 |77 } <<COBOL-host-identifier, <COBOL host identifier> >>
    <<COBOL-type-specification, <COBOL type specification> >> [ <<character-representation, <character representation> >>... ] <<period, <period> >>
----

[[COBOL-host-identifier]]
[subs="specialcharacters,macros"]
----
<COBOL host identifier> ::= !! See the Syntax Rules.
----

[[COBOL-type-specification]]
[subs="specialcharacters,macros"]
----
<COBOL type specification> ::=
    <<COBOL-character-type, <COBOL character type> >>
  | <<COBOL-national-character-type, <COBOL national character type> >>
  | <<COBOL-numeric-type, <COBOL numeric type> >>
  | <<COBOL-integer-type, <COBOL integer type> >>
  | <<COBOL-derived-type-specification, <COBOL derived type specification> >>
----

[[COBOL-derived-type-specification]]
[subs="specialcharacters,macros"]
----
<COBOL derived type specification> ::=
    <<COBOL-CLOB-variable, <COBOL CLOB variable> >>
  | <<COBOL-NCLOB-variable, <COBOL NCLOB variable> >>
  | <<COBOL-BLOB-variable, <COBOL BLOB variable> >>
  | <<COBOL-user-defined-type-variable, <COBOL user-defined type variable> >>
  | <<COBOL-CLOB-locator-variable, <COBOL CLOB locator variable> >>
  | <<COBOL-BLOB-locator-variable, <COBOL BLOB locator variable> >>
  | <<COBOL-array-locator-variable, <COBOL array locator variable> >>
  | <<COBOL-multiset-locator-variable, <COBOL multiset locator variable> >>
  | <<COBOL-user-defined-type-locator-variable, <COBOL user-defined type locator variable> >>
  | <<COBOL-REF-variable, <COBOL REF variable> >>
----

[[COBOL-character-type]]
[subs="specialcharacters,macros"]
----
<COBOL character type> ::=
    [ CHARACTER SET [ IS ] <<character-set-specification, <character set specification> >> ]
    { PIC | PICTURE } [ IS ] { X [ <<left-paren, <left paren> >> <<length, <length> >> <<right-paren, <right paren> >> ] }...
----

[[COBOL-national-character-type]]
[subs="specialcharacters,macros"]
----
<COBOL national character type> ::=
    [ CHARACTER SET [ IS ] <<character-set-specification, <character set specification> >> ]
    { PIC | PICTURE } [ IS ] { N [ <<left-paren, <left paren> >> <<length, <length> >> <<right-paren, <right paren> >> ] }...
----

[[COBOL-CLOB-variable]]
[subs="specialcharacters,macros"]
----
<COBOL CLOB variable> ::=
    [ USAGE [ IS ] ] SQL TYPE IS CLOB <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >>
    [ CHARACTER SET [ IS ] <<character-set-specification, <character set specification> >> ]
----

[[COBOL-NCLOB-variable]]
[subs="specialcharacters,macros"]
----
<COBOL NCLOB variable> ::=
    [ USAGE [ IS ] ] SQL TYPE IS NCLOB <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >>
    [ CHARACTER SET [ IS ] <<character-set-specification, <character set specification> >> ]
----

[[COBOL-BLOB-variable]]
[subs="specialcharacters,macros"]
----
<COBOL BLOB variable> ::=
    [ USAGE [ IS ] ] SQL TYPE IS BLOB <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >>
----

[[COBOL-user-defined-type-variable]]
[subs="specialcharacters,macros"]
----
<COBOL user-defined type variable> ::=
    [ USAGE [ IS ] ] SQL TYPE IS <<path-resolved-user-defined-type-name, <path-resolved user-defined type name> >>
    AS <<predefined-type, <predefined type> >>
----

[[COBOL-CLOB-locator-variable]]
[subs="specialcharacters,macros"]
----
<COBOL CLOB locator variable> ::=
    [ USAGE [ IS ] ] SQL TYPE IS CLOB AS LOCATOR
----

[[COBOL-BLOB-locator-variable]]
[subs="specialcharacters,macros"]
----
<COBOL BLOB locator variable> ::=
    [ USAGE [ IS ] ] SQL TYPE IS BLOB AS LOCATOR
----

[[COBOL-array-locator-variable]]
[subs="specialcharacters,macros"]
----
<COBOL array locator variable> ::=
    [ USAGE [ IS ] ] SQL TYPE IS <<array-type, <array type> >> AS LOCATOR
----

[[COBOL-multiset-locator-variable]]
[subs="specialcharacters,macros"]
----
<COBOL multiset locator variable> ::=
    [ USAGE [ IS ] ] SQL TYPE IS <<multiset-type, <multiset type> >> AS LOCATOR
----

[[COBOL-user-defined-type-locator-variable]]
[subs="specialcharacters,macros"]
----
<COBOL user-defined type locator variable> ::=
    [ USAGE [ IS ] ] SQL TYPE IS <<path-resolved-user-defined-type-name, <path-resolved user-defined type name> >> AS LOCATOR
----

[[COBOL-REF-variable]]
[subs="specialcharacters,macros"]
----
<COBOL REF variable> ::=
    [ USAGE [ IS ] ] SQL TYPE IS <<reference-type, <reference type> >>
----

[[COBOL-numeric-type]]
[subs="specialcharacters,macros"]
----
<COBOL numeric type> ::=
    { PIC | PICTURE } [ IS ] S <<COBOL-nines-specification, <COBOL nines specification> >>
    [ USAGE [ IS ] ] DISPLAY SIGN LEADING SEPARATE
----

[[COBOL-nines-specification]]
[subs="specialcharacters,macros"]
----
<COBOL nines specification> ::=
    <<COBOL-nines, <COBOL nines> >> [ V [ <<COBOL-nines, <COBOL nines> >> ] ]
  | V <<COBOL-nines, <COBOL nines> >>
----

[[COBOL-integer-type]]
[subs="specialcharacters,macros"]
----
<COBOL integer type> ::= <COBOL binary integer>
----

[[COBOL-binary-integer]]
[subs="specialcharacters,macros"]
----
<COBOL binary integer> ::=
    { PIC | PICTURE } [ IS ] S<<COBOL-nines, <COBOL nines> >>
    [ USAGE [ IS ] ] BINARY
----

[[COBOL-nines]]
[subs="specialcharacters,macros"]
----
<COBOL nines> ::= { 9 [ <left paren> <length> <right paren> ] }...
----

=== 20.6 <embedded SQL Fortran program>

.Function

Specify an <embedded SQL Fortran program>.


Format
[[embedded-SQL-Fortran-program]]
[subs="specialcharacters,macros"]
----
<embedded SQL Fortran program> ::= !! See the Syntax Rules.
----

[[Fortran-variable-definition]]
[subs="specialcharacters,macros"]
----
<Fortran variable definition> ::=
    <<Fortran-type-specification, <Fortran type specification> >> <<Fortran-host-identifier, <Fortran host identifier> >>
    [ { <<comma, <comma> >> <<Fortran-host-identifier, <Fortran host identifier> >> }... ]
----

[[Fortran-host-identifier]]
[subs="specialcharacters,macros"]
----
<Fortran host identifier> ::= !! See the Syntax Rules.
----

[[Fortran-type-specification]]
[subs="specialcharacters,macros"]
----
<Fortran type specification> ::=
    CHARACTER [ <<asterisk, <asterisk> >> <<length, <length> >> ] [ CHARACTER SET
    [ IS ] <<character-set-specification, <character set specification> >> ]
  | CHARACTER KIND = n [ <<asterisk, <asterisk> >> <<length, <length> >> ]
    [ CHARACTER SET [ IS ] <<character-set-specification, <character set specification> >> ]
  | INTEGER
  | REAL
  | DOUBLE PRECISION
  | LOGICAL
  | <<Fortran-derived-type-specification, <Fortran derived type specification> >>
----

[[Fortran-derived-type-specification]]
[subs="specialcharacters,macros"]
----
<Fortran derived type specification> ::=
    <<Fortran-CLOB-variable, <Fortran CLOB variable> >>
  | <<Fortran-BLOB-variable, <Fortran BLOB variable> >>
  | <<Fortran-user-defined-type-variable, <Fortran user-defined type variable> >>
  | <<Fortran-CLOB-locator-variable, <Fortran CLOB locator variable> >>
  | <<Fortran-BLOB-locator-variable, <Fortran BLOB locator variable> >>
  | <<Fortran-user-defined-type-locator-variable, <Fortran user-defined type locator variable> >>
  | <<Fortran-array-locator-variable, <Fortran array locator variable> >>
  | <<Fortran-multiset-locator-variable, <Fortran multiset locator variable> >>
  | <<Fortran-REF-variable, <Fortran REF variable> >>
----

[[Fortran-CLOB-variable]]
[subs="specialcharacters,macros"]
----
<Fortran CLOB variable> ::=
    SQL TYPE IS CLOB <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >>
    [ CHARACTER SET [ IS ] <<character-set-specification, <character set specification> >> ]
----

[[Fortran-BLOB-variable]]
[subs="specialcharacters,macros"]
----
<Fortran BLOB variable> ::=
    SQL TYPE IS BLOB <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >>
----

[[Fortran-user-defined-type-variable]]
[subs="specialcharacters,macros"]
----
<Fortran user-defined type variable> ::=
    SQL TYPE IS <<path-resolved-user-defined-type-name, <path-resolved user-defined type name> >> AS <<predefined-type, <predefined type> >>
----

[[Fortran-CLOB-locator-variable]]
[subs="specialcharacters,macros"]
----
<Fortran CLOB locator variable> ::=
    SQL TYPE IS CLOB AS LOCATOR
----

[[Fortran-BLOB-locator-variable]]
[subs="specialcharacters,macros"]
----
<Fortran BLOB locator variable> ::=
    SQL TYPE IS BLOB AS LOCATOR
----

[[Fortran-user-defined-type-locator-variable]]
[subs="specialcharacters,macros"]
----
<Fortran user-defined type locator variable> ::=
    SQL TYPE IS <<path-resolved-user-defined-type-name, <path-resolved user-defined type name> >> AS LOCATOR
----

[[Fortran-array-locator-variable]]
[subs="specialcharacters,macros"]
----
<Fortran array locator variable> ::=
    SQL TYPE IS <<array-type, <array type> >> AS LOCATOR
----

[[Fortran-multiset-locator-variable]]
[subs="specialcharacters,macros"]
----
<Fortran multiset locator variable> ::=
    SQL TYPE IS <<multiset-type, <multiset type> >> AS LOCATOR
----

[[Fortran-REF-variable]]
[subs="specialcharacters,macros"]
----
<Fortran REF variable> ::=
    SQL TYPE IS <<reference-type, <reference type> >>
----


=== 20.7 <embedded SQL MUMPS program>

.Function

Specify an <embedded SQL MUMPS program>.


Format
[[embedded-SQL-MUMPS-program]]
[subs="specialcharacters,macros"]
----
<embedded SQL MUMPS program> ::= !! See the Syntax Rules.
----

[[MUMPS-variable-definition]]
[subs="specialcharacters,macros"]
----
<MUMPS variable definition> ::=
    <<MUMPS-numeric-variable, <MUMPS numeric variable> >> <<semicolon, <semicolon> >>
  | <<MUMPS-character-variable, <MUMPS character variable> >> <<semicolon, <semicolon> >>
  | <<MUMPS-derived-type-specification, <MUMPS derived type specification> >> <<semicolon, <semicolon> >>
----

[[MUMPS-character-variable]]
[subs="specialcharacters,macros"]
----
<MUMPS character variable> ::=
    VARCHAR <<MUMPS-host-identifier, <MUMPS host identifier> >> <<MUMPS-length-specification, <MUMPS length specification> >>
    [ { <<comma, <comma> >> <<MUMPS-host-identifier, <MUMPS host identifier> >> <<MUMPS-length-specification, <MUMPS length specification> >> }... ]
----

[[MUMPS-host-identifier]]
[subs="specialcharacters,macros"]
----
<MUMPS host identifier> ::= !! See the Syntax Rules.
----

[[MUMPS-length-specification]]
[subs="specialcharacters,macros"]
----
<MUMPS length specification> ::= <left paren> <length> <right paren>
----

[[MUMPS-numeric-variable]]
[subs="specialcharacters,macros"]
----
<MUMPS numeric variable> ::=
    <<MUMPS-type-specification, <MUMPS type specification> >> <<MUMPS-host-identifier, <MUMPS host identifier> >>
    [ { <<comma, <comma> >> <<MUMPS-host-identifier, <MUMPS host identifier> >> }... ]
----

[[MUMPS-type-specification]]
[subs="specialcharacters,macros"]
----
<MUMPS type specification> ::=
    INT
  | DEC [ <<left-paren, <left paren> >> <<precision, <precision> >> [ <<comma, <comma> >> <<scale, <scale> >> ] <<right-paren, <right paren> >> ]
  | REAL
----

[[MUMPS-derived-type-specification]]
[subs="specialcharacters,macros"]
----
<MUMPS derived type specification> ::=
    <<MUMPS-CLOB-variable, <MUMPS CLOB variable> >>
  | <<MUMPS-BLOB-variable, <MUMPS BLOB variable> >>
  | <<MUMPS-user-defined-type-variable, <MUMPS user-defined type variable> >>
  | <<MUMPS-CLOB-locator-variable, <MUMPS CLOB locator variable> >>
  | <<MUMPS-BLOB-locator-variable, <MUMPS BLOB locator variable> >>
  | <<MUMPS-user-defined-type-locator-variable, <MUMPS user-defined type locator variable> >>
  | <<MUMPS-array-locator-variable, <MUMPS array locator variable> >>
  | <<MUMPS-multiset-locator-variable, <MUMPS multiset locator variable> >>
  | <<MUMPS-REF-variable, <MUMPS REF variable> >>
----

[[MUMPS-CLOB-variable]]
[subs="specialcharacters,macros"]
----
<MUMPS CLOB variable> ::=
    SQL TYPE IS CLOB <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >>
    [ CHARACTER SET [ IS ] <<character-set-specification, <character set specification> >> ]
----

[[MUMPS-BLOB-variable]]
[subs="specialcharacters,macros"]
----
<MUMPS BLOB variable> ::=
    SQL TYPE IS BLOB <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >>
----

[[MUMPS-user-defined-type-variable]]
[subs="specialcharacters,macros"]
----
<MUMPS user-defined type variable> ::=
    SQL TYPE IS <<path-resolved-user-defined-type-name, <path-resolved user-defined type name> >> AS <<predefined-type, <predefined type> >>
----

[[MUMPS-CLOB-locator-variable]]
[subs="specialcharacters,macros"]
----
<MUMPS CLOB locator variable> ::=
     SQL TYPE IS CLOB AS LOCATOR
----

[[MUMPS-BLOB-locator-variable]]
[subs="specialcharacters,macros"]
----
<MUMPS BLOB locator variable> ::=
    SQL TYPE IS BLOB AS LOCATOR
----

[[MUMPS-user-defined-type-locator-variable]]
[subs="specialcharacters,macros"]
----
<MUMPS user-defined type locator variable> ::=
    SQL TYPE IS <<path-resolved-user-defined-type-name, <path-resolved user-defined type name> >> AS LOCATOR
----

[[MUMPS-array-locator-variable]]
[subs="specialcharacters,macros"]
----
<MUMPS array locator variable> ::=
    SQL TYPE IS <<array-type, <array type> >> AS LOCATOR
----

[[MUMPS-multiset-locator-variable]]
[subs="specialcharacters,macros"]
----
<MUMPS multiset locator variable> ::=
    SQL TYPE IS <<multiset-type, <multiset type> >> AS LOCATOR
----

[[MUMPS-REF-variable]]
[subs="specialcharacters,macros"]
----
<MUMPS REF variable> ::=
    SQL TYPE IS <<reference-type, <reference type> >>
----


=== 20.8 <embedded SQL Pascal program>

.Function

Specify an <embedded SQL Pascal program>.


Format
[[embedded-SQL-Pascal-program]]
[subs="specialcharacters,macros"]
----
<embedded SQL Pascal program> ::= !! See the Syntax Rules.
----

[[Pascal-variable-definition]]
[subs="specialcharacters,macros"]
----
<Pascal variable definition> ::=
    <<Pascal-host-identifier, <Pascal host identifier> >> [ { <<comma, <comma> >> <<Pascal-host-identifier, <Pascal host identifier> >> }... ] <<colon, <colon> >>
    <<Pascal-type-specification, <Pascal type specification> >> <<semicolon, <semicolon> >>
----

[[Pascal-host-identifier]]
[subs="specialcharacters,macros"]
----
<Pascal host identifier> ::= !! See the Syntax Rules.
----

[[Pascal-type-specification]]
[subs="specialcharacters,macros"]
----
<Pascal type specification> ::=
    PACKED ARRAY <<left-bracket, <left bracket> >> 1 <<double-period, <double period> >> <<length, <length> >> <<right-bracket, <right bracket> >>
    OF CHAR [ CHARACTER SET [ IS ] <<character-set-specification, <character set specification> >> ]
  | INTEGER
  | REAL
  | CHAR [ CHARACTER SET [ IS ] <<character-set-specification, <character set specification> >> ]
  | BOOLEAN
  | <<Pascal-derived-type-specification, <Pascal derived type specification> >>
----

[[Pascal-derived-type-specification]]
[subs="specialcharacters,macros"]
----
<Pascal derived type specification> ::=
    <<Pascal-CLOB-variable, <Pascal CLOB variable> >>
  | <<Pascal-BLOB-variable, <Pascal BLOB variable> >>
  | <<Pascal-user-defined-type-variable, <Pascal user-defined type variable> >>
  | <<Pascal-CLOB-locator-variable, <Pascal CLOB locator variable> >>
  | <<Pascal-BLOB-locator-variable, <Pascal BLOB locator variable> >>
  | <<Pascal-user-defined-type-locator-variable, <Pascal user-defined type locator variable> >>
  | <<Pascal-array-locator-variable, <Pascal array locator variable> >>
  | <<Pascal-multiset-locator-variable, <Pascal multiset locator variable> >>
  | <<Pascal-REF-variable, <Pascal REF variable> >>
----

[[Pascal-CLOB-variable]]
[subs="specialcharacters,macros"]
----
<Pascal CLOB variable> ::=
    SQL TYPE IS CLOB <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >>
    [ CHARACTER SET [ IS ] <<character-set-specification, <character set specification> >> ]
----

[[Pascal-BLOB-variable]]
[subs="specialcharacters,macros"]
----
<Pascal BLOB variable> ::=
    SQL TYPE IS BLOB <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >>
----

[[Pascal-CLOB-locator-variable]]
[subs="specialcharacters,macros"]
----
<Pascal CLOB locator variable> ::=
    SQL TYPE IS CLOB AS LOCATOR
----

[[Pascal-user-defined-type-variable]]
[subs="specialcharacters,macros"]
----
<Pascal user-defined type variable> ::=
    SQL TYPE IS <<path-resolved-user-defined-type-name, <path-resolved user-defined type name> >> AS <<predefined-type, <predefined type> >>
----

[[Pascal-BLOB-locator-variable]]
[subs="specialcharacters,macros"]
----
<Pascal BLOB locator variable> ::=
    SQL TYPE IS BLOB AS LOCATOR
----

[[Pascal-user-defined-type-locator-variable]]
[subs="specialcharacters,macros"]
----
<Pascal user-defined type locator variable> ::=
    SQL TYPE IS <<path-resolved-user-defined-type-name, <path-resolved user-defined type name> >> AS LOCATOR
----

[[Pascal-array-locator-variable]]
[subs="specialcharacters,macros"]
----
<Pascal array locator variable> ::=
    SQL TYPE IS <<array-type, <array type> >> AS LOCATOR
----

[[Pascal-multiset-locator-variable]]
[subs="specialcharacters,macros"]
----
<Pascal multiset locator variable> ::=
    SQL TYPE IS <<multiset-type, <multiset type> >> AS LOCATOR
----

[[Pascal-REF-variable]]
[subs="specialcharacters,macros"]
----
<Pascal REF variable> ::=
    SQL TYPE IS <<reference-type, <reference type> >>
----


=== 20.9 <embedded SQL PL/I program>

.Function

Specify an <embedded SQL PL/I program>.


Format
[[embedded-SQL-PL/I-program]]
[subs="specialcharacters,macros"]
----
<embedded SQL PL/I program> ::= !! See the Syntax Rules.
----

[[PL/I-variable-definition]]
[subs="specialcharacters,macros"]
----
<PL/I variable definition> ::=
    { DCL | DECLARE } <<PL/I-type-specification, <PL/I type specification> >> [ <<character-representation, <character representation> >>... ] <<semicolon, <semicolon> >>
  | { <<PL/I-host-identifier, <PL/I host identifier> >> | <<left-paren, <left paren> >> <<PL/I-host-identifier, <PL/I host identifier> >>
    [ { <<comma, <comma> >> <<PL/I-host-identifier, <PL/I host identifier> >> }... ] <<right-paren, <right paren> >> }
    <<PL/I-type-specification, <PL/I type specification> >> [ <<character-representation, <character representation> >>... ] <<semicolon, <semicolon> >>
----

[[PL/I-host-identifier]]
[subs="specialcharacters,macros"]
----
<PL/I host identifier> ::= !! See the Syntax Rules.
----

[[PL/I-type-specification]]
[subs="specialcharacters,macros"]
----
<PL/I type specification> ::=
    { CHAR | CHARACTER } [ VARYING ] <<left-paren, <left paren> >> <<length, <length> >> <<right-paren, <right paren> >>
    [ CHARACTER SET [ IS ] <<character-set-specification, <character set specification> >> ]
  | <<PL/I-type-fixed-decimal, <PL/I type fixed decimal> >> <<left-paren, <left paren> >> <<precision, <precision> >> [ <<comma, <comma> >> <<scale, <scale> >> ] <<right-paren, <right paren> >>
  | <<PL/I-type-fixed-binary, <PL/I type fixed binary> >> [ <<left-paren, <left paren> >> <<precision, <precision> >> <<right-paren, <right paren> >> ]
  | <<PL/I-type-float-binary, <PL/I type float binary> >> <<left-paren, <left paren> >> <<precision, <precision> >> <<right-paren, <right paren> >>
  | <<PL/I-derived-type-specification, <PL/I derived type specification> >>
----

[[PL/I-derived-type-specification]]
[subs="specialcharacters,macros"]
----
<PL/I derived type specification> ::=
    <<PL/I-CLOB-variable, <PL/I CLOB variable> >>
  | <<PL/I-BLOB-variable, <PL/I BLOB variable> >>
  | <<PL/I-user-defined-type-variable, <PL/I user-defined type variable> >>
  | <<PL/I-CLOB-locator-variable, <PL/I CLOB locator variable> >>
  | <<PL/I-BLOB-locator-variable, <PL/I BLOB locator variable> >>
  | <<PL/I-user-defined-type-locator-variable, <PL/I user-defined type locator variable> >>
  | <<PL/I-array-locator-variable, <PL/I array locator variable> >>
  | <<PL/I-multiset-locator-variable, <PL/I multiset locator variable> >>
  | <<PL/I-REF-variable, <PL/I REF variable> >>
----

[[PL/I-CLOB-variable]]
[subs="specialcharacters,macros"]
----
<PL/I CLOB variable> ::=
    SQL TYPE IS CLOB <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >>
    [ CHARACTER SET [ IS ] <<character-set-specification, <character set specification> >> ]
----

[[PL/I-BLOB-variable]]
[subs="specialcharacters,macros"]
----
<PL/I BLOB variable> ::=
    SQL TYPE IS BLOB <<left-paren, <left paren> >> <<large-object-length, <large object length> >> <<right-paren, <right paren> >>
----

[[PL/I-user-defined-type-variable]]
[subs="specialcharacters,macros"]
----
<PL/I user-defined type variable> ::=
    SQL TYPE IS <<path-resolved-user-defined-type-name, <path-resolved user-defined type name> >> AS <<predefined-type, <predefined type> >>
----

[[PL/I-CLOB-locator-variable]]
[subs="specialcharacters,macros"]
----
<PL/I CLOB locator variable> ::=
    SQL TYPE IS CLOB AS LOCATOR
----

[[PL/I-BLOB-locator-variable]]
[subs="specialcharacters,macros"]
----
<PL/I BLOB locator variable> ::=
    SQL TYPE IS BLOB AS LOCATOR
----

[[PL/I-user-defined-type-locator-variable]]
[subs="specialcharacters,macros"]
----
<PL/I user-defined type locator variable> ::=
     SQL TYPE IS <<path-resolved-user-defined-type-name, <path-resolved user-defined type name> >> AS LOCATOR
----

[[PL/I-array-locator-variable]]
[subs="specialcharacters,macros"]
----
<PL/I array locator variable> ::=
    SQL TYPE IS <<array-type, <array type> >> AS LOCATOR
----

[[PL/I-multiset-locator-variable]]
[subs="specialcharacters,macros"]
----
<PL/I multiset locator variable> ::=
    SQL TYPE IS <<multiset-type, <multiset type> >> AS LOCATOR
----

[[PL/I-REF-variable]]
[subs="specialcharacters,macros"]
----
<PL/I REF variable> ::=
    SQL TYPE IS <<reference-type, <reference type> >>
----

[[PL/I-type-fixed-decimal]]
[subs="specialcharacters,macros"]
----
<PL/I type fixed decimal> ::=
    { DEC | DECIMAL } FIXED
  | FIXED { DEC | DECIMAL }
----

[[PL/I-type-fixed-binary]]
[subs="specialcharacters,macros"]
----
<PL/I type fixed binary> ::=
    { BIN | BINARY } FIXED
  | FIXED { BIN | BINARY }
----

[[PL/I-type-float-binary]]
[subs="specialcharacters,macros"]
----
<PL/I type float binary> ::=
    { BIN | BINARY } FLOAT
  | FLOAT { BIN | BINARY }
----


== 21 Direct invocation of SQL


=== 21.1 <direct SQL statement>

.Function

Specify direct execution of SQL.


Format
[[direct-SQL-statement]]
[subs="specialcharacters,macros"]
----
<direct SQL statement> ::= <directly executable statement> <semicolon>
----

[[directly-executable-statement]]
[subs="specialcharacters,macros"]
----
<directly executable statement> ::=
    <<direct-SQL-data-statement, <direct SQL data statement> >>
  | <<SQL-schema-statement, <SQL schema statement> >>
  | <<SQL-transaction-statement, <SQL transaction statement> >>
  | <<SQL-connection-statement, <SQL connection statement> >>
  | <<SQL-session-statement, <SQL session statement> >>
  | <<direct-implementation-defined-statement, <direct implementation-defined statement> >>
----

[[direct-SQL-data-statement]]
[subs="specialcharacters,macros"]
----
<direct SQL data statement> ::=
    <<delete-statement:-searched, <delete statement: searched> >>
  | <<direct-select-statement:-multiple-rows, <direct select statement: multiple rows> >>
  | <<insert-statement, <insert statement> >>
  | <<update-statement:-searched, <update statement: searched> >>
  | <<merge-statement, <merge statement> >>
  | <<temporary-table-declaration, <temporary table declaration> >>
----

[[direct-implementation-defined-statement]]
[subs="specialcharacters,macros"]
----
<direct implementation-defined statement> ::= !! See the Syntax Rules
----


=== 21.2 <direct select statement: multiple rows>

.Function

Specify a statement to retrieve multiple rows from a specified table.


Format
[[direct-select-statement:-multiple-rows]]
[subs="specialcharacters,macros"]
----
<direct select statement: multiple rows> ::= <cursor specification>
----


== 22 Diagnostics management


=== 22.1 <get diagnostics statement>

.Function

Get exception or completion condition information from a diagnostics area.


Format
[[get-diagnostics-statement]]
[subs="specialcharacters,macros"]
----
<get diagnostics statement> ::=
    GET DIAGNOSTICS <<SQL-diagnostics-information, <SQL diagnostics information> >>
----

[[SQL-diagnostics-information]]
[subs="specialcharacters,macros"]
----
<SQL diagnostics information> ::=
    <<statement-information, <statement information> >>
  | <<condition-information, <condition information> >>
----

[[statement-information]]
[subs="specialcharacters,macros"]
----
<statement information> ::=
    <<statement-information-item, <statement information item> >> [ { <<comma, <comma> >> <<statement-information-item, <statement information item> >> }... ]
----

[[statement-information-item]]
[subs="specialcharacters,macros"]
----
<statement information item> ::=
    <<simple-target-specification, <simple target specification> >> <<equals-operator, <equals operator> >> <<statement-information-item-name, <statement information item name> >>
----

[[statement-information-item-name]]
[subs="specialcharacters,macros"]
----
<statement information item name> ::=
    NUMBER
  | MORE
  | COMMAND_FUNCTION
  | COMMAND_FUNCTION_CODE
  | DYNAMIC_FUNCTION
  | DYNAMIC_FUNCTION_CODE
  | ROW_COUNT
  | TRANSACTIONS_COMMITTED
  | TRANSACTIONS_ROLLED_BACK
  | TRANSACTION_ACTIVE
----

[[condition-information]]
[subs="specialcharacters,macros"]
----
<condition information> ::=
    { EXCEPTION | CONDITION } <<condition-number, <condition number> >> <<condition-information-item, <condition information item> >>
    [ { <<comma, <comma> >> <<condition-information-item, <condition information item> >> }... ]
----

[[condition-information-item]]
[subs="specialcharacters,macros"]
----
<condition information item> ::=
    <<simple-target-specification, <simple target specification> >> <<equals-operator, <equals operator> >> <<condition-information-item-name, <condition information item name> >>
----

[[condition-information-item-name]]
[subs="specialcharacters,macros"]
----
<condition information item name> ::=
    CATALOG_NAME
  | CLASS_ORIGIN
  | COLUMN_NAME
  | CONDITION_NUMBER
  | CONNECTION_NAME
  | CONSTRAINT_CATALOG
  |   CONSTRAINT_NAME
  |   CONSTRAINT_SCHEMA
  |   CURSOR_NAME
  |   MESSAGE_LENGTH
  |   MESSAGE_OCTET_LENGTH
  |   MESSAGE_TEXT
  |   PARAMETER_MODE
  |   PARAMETER_NAME
  |   PARAMETER_ORDINAL_POSITION
  |   RETURNED_SQLSTATE
  |   ROUTINE_CATALOG
  |   ROUTINE_NAME
  |   ROUTINE_SCHEMA
  |   SCHEMA_NAME
  |   SERVER_NAME
  |   SPECIFIC_NAME
  |   SUBCLASS_ORIGIN
  |   TABLE_NAME
  |   TRIGGER_CATALOG
  |   TRIGGER_NAME
  |   TRIGGER_SCHEMA
----

[[condition-number]]
[subs="specialcharacters,macros"]
----
<condition number> ::= <simple value specification>
----

